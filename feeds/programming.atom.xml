<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Aniruddha Deb - Programming</title><link href="https://aniruddhadeb.com/" rel="alternate"></link><link href="https://aniruddhadeb.com/feeds/programming.atom.xml" rel="self"></link><id>https://aniruddhadeb.com/</id><updated>2023-06-04T01:00:00+05:30</updated><entry><title>My (updated) DL workflow for 2023</title><link href="https://aniruddhadeb.com/articles/2023/updated-dl-workflow-2023.html" rel="alternate"></link><published>2023-06-04T01:00:00+05:30</published><updated>2023-06-04T01:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2023-06-04:/articles/2023/updated-dl-workflow-2023.html</id><summary type="html">&lt;p&gt;Remember last semester, where I said this?&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img width="600px" src="/articles/2022/res/cs_degree.png"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;That went pretty well. Much better than I expected it to go :) I also used the 
HPC DL environment a lot, across 4 courses that I did (COL380, COL772, COL775 
and COD310). It was so used that at a point I had four â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Remember last semester, where I said this?&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img width="600px" src="/articles/2022/res/cs_degree.png"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;That went pretty well. Much better than I expected it to go :) I also used the 
HPC DL environment a lot, across 4 courses that I did (COL380, COL772, COL775 
and COD310). It was so used that at a point I had four different GPU's allocated
just for running tasks for these different courses.&lt;/p&gt;
&lt;p&gt;A lot could be done better, though. Since I have my summer ahead of me, I
decided to clean house for the next semester&lt;/p&gt;
&lt;h2&gt;The secret life of software&lt;/h2&gt;
&lt;p&gt;After an OS course that delved deep into the linux kernel, I'm qualified to 
talk about this. For software-specific stuff, the relevant linux directories
are structured as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/ &lt;span class="c1"&gt;# Root - primary hierarchy&lt;/span&gt;
&lt;span class="sb"&gt;`&lt;/span&gt;- bin &lt;span class="c1"&gt;# where your executables go&lt;/span&gt;
&lt;span class="sb"&gt;`&lt;/span&gt;- include &lt;span class="c1"&gt;# where header files go&lt;/span&gt;
&lt;span class="sb"&gt;`&lt;/span&gt;- lib &lt;span class="c1"&gt;# where libraries go&lt;/span&gt;
&lt;span class="sb"&gt;`&lt;/span&gt;- home &lt;span class="c1"&gt;# home directories of users&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="sb"&gt;`&lt;/span&gt;- aniruddha &lt;span class="c1"&gt;# home directories of users&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="sb"&gt;`&lt;/span&gt;- .local &lt;span class="c1"&gt;# User-specific tertiary hierarchy&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="sb"&gt;`&lt;/span&gt;- bin
&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="sb"&gt;`&lt;/span&gt;- include
&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="sb"&gt;`&lt;/span&gt;- lib
&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="sb"&gt;`&lt;/span&gt;- .conda
&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="sb"&gt;`&lt;/span&gt;- envs
&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="sb"&gt;`&lt;/span&gt;- dl &lt;span class="c1"&gt;# a single environment folder&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;        &lt;span class="sb"&gt;`&lt;/span&gt;- bin
&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;        &lt;span class="sb"&gt;`&lt;/span&gt;- include
&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="p"&gt;|&lt;/span&gt;        &lt;span class="sb"&gt;`&lt;/span&gt;- lib
&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="sb"&gt;`&lt;/span&gt;- .config &lt;span class="c1"&gt;# directory containing config files&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="sb"&gt;`&lt;/span&gt;- .bashrc &lt;span class="c1"&gt;# sourced on every login shell&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="sb"&gt;`&lt;/span&gt;- scratch -&amp;gt; /scratch/aniruddha &lt;span class="c1"&gt;# HPC specific scratch directory&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="sb"&gt;`&lt;/span&gt;- usr &lt;span class="c1"&gt;# Unix System Resources - Secondary Hierarchy, read only stuff for users&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="sb"&gt;`&lt;/span&gt;- bin
&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="sb"&gt;`&lt;/span&gt;- include
&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="sb"&gt;`&lt;/span&gt;- lib
&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="sb"&gt;`&lt;/span&gt;- &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="c1"&gt;# Tertiary hierarchy - has it&amp;#39;s own bin, include, lib, etc&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="sb"&gt;`&lt;/span&gt;- share &lt;span class="c1"&gt;# Architecture Independent (shared) data&lt;/span&gt;
&lt;span class="sb"&gt;`&lt;/span&gt;- opt &lt;span class="c1"&gt;# Optional software&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;PATH&lt;/code&gt; variable's contents now make a lot more sense. An &lt;code&gt;echo $PATH&lt;/code&gt; on a
unix box will usually have all the &lt;code&gt;bin&lt;/code&gt; directories shown above, and doing a
&lt;code&gt;echo $LD_LIBRARY_PATH&lt;/code&gt; will have all the &lt;code&gt;lib&lt;/code&gt; directories above. It's simple,
intuitive and has been working for half a century now. More details can be found
&lt;a href="https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's say that we don't have super-user privileges. This brings two challenges:
- &lt;strong&gt;The only directory above that we can write to is our home directory&lt;/strong&gt;.
  That's it. Any software/libraries/headers that we need to install need to be
  installed in &lt;code&gt;.local&lt;/code&gt; and added to path/symlinked through
- If a binary already exists in &lt;code&gt;/bin&lt;/code&gt; or &lt;code&gt;/usr/bin&lt;/code&gt;, that would be registered
  by the system, especially if it needed an older version. This is visible
  in HPC, which has super-old versions of &lt;code&gt;git&lt;/code&gt; (1.8x) and &lt;code&gt;conda&lt;/code&gt; (5.x).&lt;/p&gt;
&lt;p&gt;Even when it comes to modules, HPC doesn't have the latest &lt;code&gt;gcc&lt;/code&gt; (stuck at 9)
or modern build tools, such as &lt;code&gt;cmake&lt;/code&gt; or &lt;code&gt;ninja&lt;/code&gt;. There is no clean way to 
even install these. The &lt;a href="https://supercomputing.iitd.ac.in/?soft"&gt;HPC website&lt;/a&gt; 
mentions two options that you can take in this event:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the software in your own account (&lt;code&gt;$HOME&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Request installation, via your supervisor.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2 would be a good option if it didn't have a turnaround time of over a month,
so the only sane thing to do is 1.&lt;/p&gt;
&lt;h2&gt;Install software locally&lt;/h2&gt;
&lt;p&gt;This is easier than it sounds. HPC runs CentOS 7, which uses &lt;code&gt;yum&lt;/code&gt; as it's 
package manager, so installing software should be as easy as doing &lt;code&gt;yum install 
&amp;lt;packagename&amp;gt; --local&lt;/code&gt;, right?&lt;/p&gt;
&lt;p&gt;Nope.&lt;/p&gt;
&lt;p&gt;yum doesn't support doing this natively. &lt;a href="https://stackoverflow.com/questions/36651091/how-to-install-packages-in-linux-centos-without-root-user-with-automatic-depen"&gt;After some research&lt;/a&gt;, 
you can get yum to install things locally, but it's not worth the effort. &lt;code&gt;dnf&lt;/code&gt;
isn't installed, neither is any other package manager, so this turns up a dead
end.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Aside: Package Managers&lt;/h4&gt;
&lt;p&gt;What I had been doing so far was to build software from source if needed, and
then pass the installation directory using a flag in the &lt;code&gt;make install&lt;/code&gt; step.
This is &lt;em&gt;(a)&lt;/em&gt; super hard and &lt;em&gt;(b)&lt;/em&gt; unsustainable. (a) because you'd need to 
take into account all of the package's dependencies, and (b) because you'd 
need to update the package if a newer version came around. &lt;/p&gt;
&lt;p&gt;Package managers take away all of this pain by handling the dependency 
management and updates on their own. So what we're really looking for is &lt;strong&gt;a 
package manager that manages it's repository of packages in .local and, ipso 
facto, can be run without superuser privileges.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;(Mini)Conda to the rescue&lt;/h2&gt;
&lt;p&gt;The second answer in the StackExchange thread linked above recommended using
&lt;code&gt;conda&lt;/code&gt; as a package manager, and that's what was finally done. However, the 
&lt;code&gt;conda&lt;/code&gt; version as mentioned above is outdated, and since we want to use the
most up to date versions of packages, that would defeat the purpose.&lt;/p&gt;
&lt;p&gt;To fix this, I installed miniconda locally in &lt;code&gt;$HOME/.local/opt/miniconda3&lt;/code&gt;, 
following the good directory structure above. &lt;code&gt;miniconda3&lt;/code&gt; is an open-source 
conda variant and picks up right where &lt;code&gt;conda&lt;/code&gt; left off: it has access to all 
my old environments, and also uses the preferences in my &lt;code&gt;.condarc&lt;/code&gt; to make
new environments in &lt;code&gt;scratch/conda_data/envs&lt;/code&gt;, so that others can also use 
them.&lt;/p&gt;
&lt;p&gt;What about keeping miniconda up to date? &lt;em&gt;Miniconda updates itself, so we don't 
need to do anything!&lt;/em&gt; conda also launches the &lt;code&gt;base&lt;/code&gt; environment by default, so 
all we need to do is prepend the base conda environment's &lt;code&gt;bin&lt;/code&gt; to our &lt;code&gt;PATH&lt;/code&gt;,
and we can use &lt;code&gt;conda&lt;/code&gt; to manage our executables!&lt;/p&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;Let's update git, gcc, g++ and get cmake and node&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;conda install -c conda-forge git gcc gxx cmake &lt;span class="nv"&gt;nodejs&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;18&lt;/span&gt;.5.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's also install neovim. Unfortunately there isn't a conda package for this
(there was one, but that was for neovim python bindings), so I had to manually
download the appimage from &lt;a href="https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.tar.gz"&gt;here&lt;/a&gt; 
and move the files to the right locations. Once that was done, I installed packer
to the right place, and copied my config over. Everything worked as expected 
after that.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/Neovim?ref_src=twsrc%5Etfw"&gt;@neovim&lt;/a&gt; is goated. &lt;a href="https://twitter.com/code?ref_src=twsrc%5Etfw"&gt;@code&lt;/a&gt; is bloated.&lt;/p&gt;&amp;mdash; Aniruddha Deb (@hairband_dude) &lt;a href="https://twitter.com/hairband_dude/status/1665143467079507968?ref_src=twsrc%5Etfw"&gt;June 3, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;After that, I made an environment for PyTorch 2. It's a bit too late now to
test out &lt;code&gt;torch.compile&lt;/code&gt;, but I will tomorrow on a couple of models. I also 
wanted to develop &lt;a href="https://github.com/Aniruddha-Deb/pajamas"&gt;pajamas&lt;/a&gt; further,
which I'll probably do sooner or later.&lt;/p&gt;
&lt;p&gt;And with that, I'm ready to become a researcher for the next two semesters :)&lt;/p&gt;
&lt;h2&gt;Other things&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://aniruddhadeb.com/articles/2022/intern-inferno.html#intern-inferno"&gt;Amsterdam is Beautiful&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="random bridge sunset" src="res/amsterdam.jpg"&gt;&lt;/p&gt;
&lt;p&gt;So is Rotterdam&lt;/p&gt;
&lt;p&gt;&lt;img alt="erasmus bridge" src="res/rotterdam.jpg"&gt;&lt;/p&gt;
&lt;p&gt;So is Antwerp&lt;/p&gt;
&lt;p&gt;&lt;img alt="grote markt" src="res/antwerp.jpg"&gt;&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Machine Learning"></category><category term="Deep Learning"></category></entry><entry><title>MRCU comic</title><link href="https://aniruddhadeb.com/articles/2023/rcu-comic.html" rel="alternate"></link><published>2023-03-19T23:30:00+05:30</published><updated>2023-03-19T23:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2023-03-19:/articles/2023/rcu-comic.html</id><content type="html">&lt;p&gt;&lt;img alt="From my notes" src="/articles/2023/res/RCU.jpeg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Drawn from &lt;a href="https://en.wikipedia.org/wiki/Read-copy-update"&gt;Wikipedia's&lt;/a&gt; amazing RCU explanation.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Operating Systems"></category></entry><entry><title>Mac Setup v2</title><link href="https://aniruddhadeb.com/articles/2023/mac-setup-2.html" rel="alternate"></link><published>2023-03-06T12:00:00+05:30</published><updated>2023-03-06T12:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2023-03-06:/articles/2023/mac-setup-2.html</id><summary type="html">&lt;p&gt;My 2015 MBP 13" was giving me some pain over this entire semester, lagging a lot
and being very slow overall. I recently upgraded to a 16" MBP, and there have
been no complaints so far :) the notch is simply not there if you have a black
desktop background, so â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;My 2015 MBP 13" was giving me some pain over this entire semester, lagging a lot
and being very slow overall. I recently upgraded to a 16" MBP, and there have
been no complaints so far :) the notch is simply not there if you have a black
desktop background, so +1 to apple for that. Although face ID would have been
nice to have.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Basic intro Screen&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dark Mode&lt;br&gt;
&lt;img alt="dark side meme" src="/articles/2020/res/darkside.jpeg"&gt;&lt;/li&gt;
&lt;li&gt;Don't set up Siri, or Stage Manager&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Home Directory and Username renaming&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MacOS uses a lowercase first letter, even if you've input an uppercase
one while making your username. The way to change this is a bit complicated,
but follow the instructions &lt;a href="https://support.apple.com/en-in/HT201548"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System &lt;strike&gt;Preferences&lt;/strike&gt; Settings&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Turn off autocorrect&lt;/li&gt;
&lt;li&gt;Function keys are function keys, and not 'do weird stuff' keys&lt;/li&gt;
&lt;li&gt;Don't switch to a workspace which has an open window of the application&lt;/li&gt;
&lt;li&gt;Make 10 workspaces and activate all the ^(n) hotkeys to switch to them&lt;/li&gt;
&lt;li&gt;Change the date/time format to &lt;code&gt;Day HH:MM:SS&lt;/code&gt; in control center&lt;/li&gt;
&lt;li&gt;Remove some stuff from control center, put keyboard brightness there&lt;/li&gt;
&lt;li&gt;Turn off the 'quick note' bottom right hot corner&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accounts&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bsw.iitd.ac.in/email.php"&gt;IITD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Applications&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XCode CLT&lt;/li&gt;
&lt;li&gt;Firefox&lt;/li&gt;
&lt;li&gt;VS Code (don't use this much)&lt;/li&gt;
&lt;li&gt;Kitty (with the &lt;a href="https://github.com/DinkDonk/kitty-icon/blob/main/kitty-dark.icns"&gt;cuter icon&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Calibre&lt;/li&gt;
&lt;li&gt;TG Pro&lt;/li&gt;
&lt;li&gt;The Unarchiver&lt;/li&gt;
&lt;li&gt;Shottr&lt;/li&gt;
&lt;li&gt;Hidden Bar&lt;/li&gt;
&lt;li&gt;TinkerTool&lt;ul&gt;
&lt;li&gt;Hide dock, and delay in showing it&lt;/li&gt;
&lt;li&gt;Remove 'recent apps' section in Dock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rectangle&lt;/li&gt;
&lt;li&gt;Bandwidth+&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://brew.sh/"&gt;Brew&lt;/a&gt; Packages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Neovim&lt;/li&gt;
&lt;li&gt;htop&lt;/li&gt;
&lt;li&gt;gcc&lt;/li&gt;
&lt;li&gt;openmpi&lt;/li&gt;
&lt;li&gt;miniforge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kitty Setup&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download the &lt;a href="https://github.com/ryanoasis/nerd-fonts/releases/tag/v2.3.3"&gt;Meslo&lt;/a&gt;
zipfile from here, and install all the fonts.&lt;/li&gt;
&lt;li&gt;Copy over the &lt;code&gt;kitty.conf&lt;/code&gt; from my previous machine. Works out of the box
(just darkened the background a bit more, as the new mac has a brighter
 display)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh"&gt;Oh my zsh&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://github.com/romkatv/powerlevel10k"&gt;Powerlevel10k&lt;/a&gt; after this&lt;/li&gt;
&lt;li&gt;Follow the setup guide for Powerlevel10k according to liking. I use a one-
line prompt, with no repeats&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Firefox setup&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Default browser&lt;/li&gt;
&lt;li&gt;Login to firefox account to sync plugins&lt;ul&gt;
&lt;li&gt;TabbyCat&lt;/li&gt;
&lt;li&gt;uBlock Origin&lt;/li&gt;
&lt;li&gt;Tampermonkey&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Get &lt;a href="https://github.com/Aniruddha-Deb/UserScripts"&gt;UserScripts&lt;/a&gt; and load
into Tampermonkey&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spaces Renamer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Probably the hardest part of the setup. &lt;/li&gt;
&lt;li&gt;TL;DR follow the procedure &lt;a href="https://github.com/dado3212/spaces-renamer/issues/75#issuecomment-1201511482"&gt;here&lt;/a&gt;.
Requires &lt;a href="https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection"&gt;disabling SIP&lt;/a&gt;
and library validation, and then loading in spaces renamer. You'll be asked
to download rosetta at this point as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Neovim setup&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://nodejs.org/en/download/"&gt;node&lt;/a&gt; for CoC&lt;/li&gt;
&lt;li&gt;Lift and Shift nvim config directory from previous machine&lt;/li&gt;
&lt;li&gt;Install &lt;a href="https://github.com/wbthomason/packer.nvim"&gt;packer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do &lt;code&gt;:PackerInstall&lt;/code&gt; to install plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blog Setup&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clone the blog git repo&lt;/li&gt;
&lt;li&gt;Instead of using a &lt;code&gt;venv&lt;/code&gt;, I used a conda-managed environment this time.
Worked out better. Created an &lt;code&gt;environment.yml&lt;/code&gt; for the blog.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ML Setup&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a Conda environment for ML stuff&lt;/li&gt;
&lt;li&gt;Install:&lt;ul&gt;
&lt;li&gt;torch, torchvision, torchaudio&lt;/li&gt;
&lt;li&gt;numpy, pandas, scikit-learn, xgboost&lt;/li&gt;
&lt;li&gt;matplotlib, bokeh&lt;/li&gt;
&lt;li&gt;jupyterlab, ipywidgets&lt;/li&gt;
&lt;li&gt;jupyterlab-vim&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, you should have a stable system. Move over data from the previous
machine (Documents, Pictures, Videos etc.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Set Desktop Background&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step back and enjoy :)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="hehe" src="res/desktop.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="nvim+kitty" src="res/blog.png"&gt;&lt;/p&gt;
&lt;h2&gt;One More Thing&lt;/h2&gt;
&lt;p&gt;There's a difference between &lt;code&gt;.zshenv&lt;/code&gt;, &lt;code&gt;.zprofile&lt;/code&gt;, &lt;code&gt;.zshrc&lt;/code&gt; and other flavours
of zsh conf files, details of which I learnt from &lt;a href="https://unix.stackexchange.com/questions/71253/what-should-shouldnt-go-in-zshenv-zshrc-zlogin-zprofile-zlogout"&gt;here&lt;/a&gt;.
You'd want to alias &lt;code&gt;gcc&lt;/code&gt; to &lt;code&gt;gcc-12&lt;/code&gt; and &lt;code&gt;g++&lt;/code&gt; to &lt;code&gt;g++-12&lt;/code&gt; (they dubiously
use clang), and &lt;code&gt;vim&lt;/code&gt; to &lt;code&gt;nvim&lt;/code&gt; in &lt;code&gt;.zshenv&lt;/code&gt; (otherwise makefiles won't pick up
on the change. Also, uncomment the lines in .zshrc which export &lt;code&gt;$EDITOR&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, name your programming folder &lt;code&gt;Developer&lt;/code&gt; to get a nice directory icon.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;EDIT (9 Mar): Moved from CoC to &lt;code&gt;nvim-lspconfig&lt;/code&gt; and &lt;code&gt;cmp-nvim&lt;/code&gt;, and to 
treesitter-based syntax highlighting. Feels marginally better, and got the
chance to hack at my vim config after a long time.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>Optimizers, Part 1</title><link href="https://aniruddhadeb.com/articles/2023/optimizers-1.html" rel="alternate"></link><published>2023-01-02T12:25:00+05:30</published><updated>2023-01-02T12:25:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2023-01-02:/articles/2023/optimizers-1.html</id><summary type="html">&lt;p&gt;Happy New Year! This &lt;strike&gt;is going to&lt;/strike&gt; was supposed to be a long
one, so sit back and grab a chocolate (and preferably view this on your laptop)&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;/p&gt;
&lt;iframe src="/articles/2023/res/intro_plot.html" style="width: 100%; height: 650px; border: 0"&gt;&lt;/iframe&gt;

&lt;p&gt;Some optimization algorithms. Click on a colour in the legend to hide/show it
&lt;/center&gt;&lt;/p&gt;
&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#solution-existence"&gt;Do Solutions Even Exist â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Happy New Year! This &lt;strike&gt;is going to&lt;/strike&gt; was supposed to be a long
one, so sit back and grab a chocolate (and preferably view this on your laptop)&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;/p&gt;
&lt;iframe src="/articles/2023/res/intro_plot.html" style="width: 100%; height: 650px; border: 0"&gt;&lt;/iframe&gt;

&lt;p&gt;Some optimization algorithms. Click on a colour in the legend to hide/show it
&lt;/center&gt;&lt;/p&gt;
&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#solution-existence"&gt;Do Solutions Even Exist?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#structure"&gt;How this guide is structured&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gradient-descent-optimizers"&gt;Gradient Descent Optimizers&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#stochastic-gradient-descent"&gt;Stochastic Gradient Descent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sgd-with-momentum"&gt;SGD with Momentum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sgd-with-nesterov-momentum"&gt;SGD with Nesterov Momentum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gradient-descent-comparision"&gt;Putting it all together&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#refs-and-footnotes"&gt;References and Footnotes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!--
3. &lt;a href="#adaptive-optimizers"&gt;Adaptive Optimizers&lt;/a&gt;
    * &lt;a href="#adagrad"&gt;AdaGrad&lt;/a&gt;
    * &lt;a href="#rmsprop"&gt;RMSProp&lt;/a&gt;
    * &lt;a href="#rmsprop-with-nesterov-momentum"&gt;RMSProp with Nesterov Momentum&lt;/a&gt;
    * &lt;a href="#adam"&gt;Adam&lt;/a&gt;
    * &lt;a href="#nadam-nesterov-adam"&gt;NAdam (Nesterov Adam)&lt;/a&gt;
    * &lt;a href="#adamw"&gt;AdamW&lt;/a&gt;
    * &lt;a href="#amsgrad"&gt;AMSGrad&lt;/a&gt;
    * &lt;a href="#adabound"&gt;AdaBound&lt;/a&gt;
    * &lt;a href="#adabelief"&gt;AdaBelief&lt;/a&gt;
4. &lt;a href="#second-order-optimizers"&gt;Second Order Optimizers&lt;/a&gt;
    * &lt;a href="#newton"&gt;Newton&lt;/a&gt;
    * &lt;a href="#conjugate-gradients"&gt;Conjugate Gradients&lt;/a&gt;
        * &lt;a href="#fletcher-reeves"&gt;Fletcher-Reeves&lt;/a&gt;
        * &lt;a href="#polak-ribiere"&gt;Polak-Ribiere&lt;/a&gt;
    * &lt;a href="#bfgs"&gt;BFGS&lt;/a&gt;
    * &lt;a href="#l-bfgs"&gt;L-BFGS&lt;/a&gt;--&gt;

&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Most supervised learning tasks involve optimizing a loss function, in order to
fit the model to the given training data. Of these, the most common is neural
network training: neural networks have millions (even billions) of parameters
which need to be tuned so that the model can predict the right outputs.&lt;/p&gt;
&lt;p&gt;Obtaining closed form solutions to neural network problems is more often than
not intractable, and so we perform this optimization algorithmically and 
numerically. The main things we look for in an algorithm that optimizes the
loss function are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It should converge&lt;/strong&gt;: Sounds like a no-brainer, but the algorithm should be
  able to decide when and where to stop, and to ensure that the location at 
  which it stops is a local minima.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It should converge quickly&lt;/strong&gt;: The algorithm should take as few steps as
  possible to converge, as every step requires a parameter update, and updating
  millions (if not billions) of parameters is inefficient. Therefore, it should
  take the optimal steps at every point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It should be able to deal with ambiguity&lt;/strong&gt;: Loosely worded, the algorithm 
  would not have the exact value of the gradient: all the algorithms described 
  use a batch of samples to obtain an estimate of the gradient, and the 
  expected value of the gradient obtained should equal the gradient of the 
  function at this point. The algorithm should be able to converge to a local 
  minima even if it obtains incorrect gradients at some steps in the process.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="solution-existence"&gt;Do solutions even exist?&lt;/h2&gt;

&lt;p&gt;We can't really go further without knowing what the loss landscape looks like: 
do solutions even exist? How do we visualize a high-dimensional loss landscape?&lt;/p&gt;
&lt;p&gt;A few observations about the loss landscape of a neural network from Goodfellow
are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;As dimensionality of the latent space increases, the probability a
   critical point is a local minima decreases&lt;/strong&gt;. The curvature of a point is
   given by the eigenvalues of the hessian: if all the eigenvalues are positive,
   the point is a local minima (and the hessian is positive semi-definite), and
   the opposite for a local maxima. If we consider a random function, choosing 
   the sign of the eigenvalue is akin to tossing a coin. Therefore, in
   n-dimensional space, if we toss n coins to determine these signs, the
   probability that all of them turn up positive is very low. Therefore, high-
   dimensional space has more saddle points than local minima/maxima&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;There are several equally good local minima&lt;/strong&gt;: because of scale invariance,
   if you scale the inputs to a layer down by 10 and multiply the outputs by 10,
   then you get the same resultant network. Also, if you switch the position of
   two neurons in a layer with each other while maintaining the connections, 
   you get the same network. These two similarities result in a large number of
   similar optima, reaching any one of which will optimize the entire network.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of these are in our favour, and show us that reaching a local minima in
high-dimensional space should be sufficient to fit the network. We'll now take 
a look at some algorithms which do this.&lt;/p&gt;
&lt;p&gt;As for visualizing the loss landscape, this is significantly trickier to do.
This work by &lt;a href="https://arxiv.org/pdf/1712.09913v3.pdf"&gt;Goldstein et al&lt;/a&gt; does a
good job of it, but visualizing and comparing the paths taken by optimization 
algorithms on this landscape is very difficult: because what we're seeing is a
projection onto two dimensions, the direction taken by the path need not
correspond to the direction of maximum descent. This repository by &lt;a href="https://github.com/logancyang/loss-landscape-anim"&gt;Logan Yang&lt;/a&gt;
had a good implementation of this paper, along with traces of the paths taken
by various optimization algorithms showing why we can't use this to
qualitatively compare different optimization algorithms with each other &lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img src="/articles/2023/res/loss_landscape_goldstein.png" width=800px&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;The loss landscape of ResNet-56 (source: Goldstein et al)
&lt;/center&gt;&lt;/p&gt;
&lt;h2 id="structure"&gt;How this guide is structured&lt;/h2&gt;

&lt;p&gt;While most deep learning problems use a super high-dimensional loss function, 
for the purposes of this guide we'll use a simple 2-D loss function which is 
a linear combination of gaussians of the following form
$$\begin{gather}
f(x, y) = se^{-(ax+by+c)^2} \\
\mathcal{L} = \sum_{i=1}^{n} f_i(x, y)
\end{gather}$$&lt;/p&gt;
&lt;p&gt;The good thing about gaussians is that they're easy to differentiate
$$\begin{align}
\frac{\partial f}{\partial x} &amp;amp;= -2a(ax+by+c)f(x,y) \\
\frac{\partial f}{\partial y} &amp;amp;= -2b(ax+by+c)f(x,y) \\
\frac{\partial^2 f}{\partial x^2} &amp;amp;= -2a^2(1 - 2(ax+by+c)^2)f(x,y) \\
\frac{\partial^2 f}{\partial x \partial y} &amp;amp;= -2ab(1 - 2(ax+by+c)^2)f(x,y) \\
\frac{\partial^2 f}{\partial y^2} &amp;amp;= -2b^2(1 - 2(ax+by+c)^2)f(x,y)
\end{align}$$&lt;/p&gt;
&lt;p&gt;so all the methods can use the exact gradient/hessian of the loss function
rather than a &lt;em&gt;stochastic&lt;/em&gt; one. This is kind of cheating, but since this is a
science experiment, let's run with it. about this loss func&lt;/p&gt;
&lt;p&gt;$s, a, b, c$ are generated uniform randomly from a suitable range, and I played
around manually with this till I got a loss function that looked funky enough
for my needs. We finally use the following loss function, and it's been
exported to the file &lt;code&gt;func.dill&lt;/code&gt; if you want to load it in (use dill to load it, 
as there were some errors serializing it via pickle)&lt;/p&gt;
&lt;iframe src="/articles/2023/res/loss_fn_interactive.html" style="width: 100%; height: 620px; border: 0"&gt;&lt;/iframe&gt;

&lt;p&gt;The convergence criterion that's used for all optimizers is when the gradient norm 
is less than 0.05, and all the optimizers are limited to take atmost 1000 steps.&lt;/p&gt;
&lt;p&gt;The plots are made in Bokeh/Plotly and are interactive (if you haven't already 
played with the plot we generated in the start). I've done my best to be 
inspired by &lt;a href="https://distill.pub"&gt;Distill&lt;/a&gt;, most notably &lt;a href="https://distill.pub/2017/momentum/"&gt;Gabriel Goh&lt;/a&gt;'s
beautiful, interactive article on momentum.&lt;/p&gt;
&lt;h1 id="gradient-descent-optimizers"&gt;Gradient Descent Optimizers&lt;/h1&gt;

&lt;p&gt;Gradient Descent optimizers converge to a local minimum by simply following the
gradient: there's no adaptiveness here, and it's akin to feeling the area 
around your feet and just taking a small step in the steepest direction, and 
repeating that till you get to the minima. There are a few tricks here and we 
take hints from Physics to speed up the convergence, but most of the algorithm
relies on the gradient, and the speed with which we're already going.&lt;/p&gt;
&lt;h2 id="stochastic-gradient-descent"&gt;Stochastic Gradient Descent&lt;/h2&gt;

&lt;p&gt;SGD is probably the first optimization algorithm one thinks of. It's
deceptively simple: Look around and take a step in the direction where the
gradient decreases the most. Once you've taken the step, &lt;strong&gt;Stop&lt;/strong&gt;, look around
again, and repeat until you're at the minima (the gradient is sufficiently 
small or you come back to a point you've visited).&lt;/p&gt;
&lt;p&gt;Th &lt;em&gt;S&lt;/em&gt; in SGD comes from the fact that the gradient that the algorithm obtains
in practice is not perfect: it's an approximation of the actual gradient of the
loss function, based on the batch of examples that are sampled. However, this
approximates the gradient reasonably well, and in the long run, the expected
path taken by this algorithm comes out to be the same as the path taken when we
can perfectly obtain the gradient.&lt;/p&gt;
&lt;p&gt;The update rule for SGD is fairly simple:&lt;/p&gt;
&lt;p&gt;$$\begin{align}
\theta_{t+1} &amp;amp;\leftarrow \theta_{t} - \epsilon g(\theta_{t})
\end{align}$$&lt;/p&gt;
&lt;p&gt;Combining this with a convergence criterion gives us the algorithm (implemented
in python here)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;SGD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="sgd-with-momentum"&gt;SGD with Momentum&lt;/h2&gt;

&lt;p&gt;While SGD is simple, it is slow to converge, taking several more steps than
required. This is because we come to a stop once we take a step, and the size
of the next step is solely determined by the gradient at that point. This means
that if we're in a long stretch where the gradient is small, we can only 
descend at the speed $\epsilon g$, even though we know that the stretch is
reasonably long. This slows down our algorithm and makes it take a longer time
to converge.&lt;/p&gt;
&lt;p&gt;Momentum counters this by providing some inertia to the process. Intuitively,
if SGD is a person stopping and taking a step in the direction of maximum 
descent, momentum is equivalent to throwing a ball down the incline of a given
mass and seeing where it settles. If you take a look at the path momentum
follows in the introduction plot, you can see that it doesn't immediately stop
when it comes to a point with a zero (or very small) gradient; instead, it
oscillates until it loses all it's velocity.&lt;/p&gt;
&lt;p&gt;How do we simulate adding 'mass' to the update steps? We claim that the ball
moves at a velocity $v$, and model $v$ as an exponential moving average of the
current velocity and the gradient at the current point. The update equations
are as follows:&lt;/p&gt;
&lt;p&gt;$$\begin{align}
v_{t+1} &amp;amp;\leftarrow \alpha v_{t} - \epsilon g(\theta_{t}) \\
\theta_{t+1} &amp;amp;\leftarrow \theta_{t} + v_{t+1}
\end{align}$$&lt;/p&gt;
&lt;p&gt;What's the maximum velocity we can move at? If all the gradients are in the
same direction for an infinite (practically a very large) period of time, then
this velocity is equal to&lt;/p&gt;
&lt;p&gt;$$v_{\text{max}} = \frac{\epsilon g}{1-\alpha}$$&lt;/p&gt;
&lt;p&gt;This can be derived by expanding out the recurrence in the update step, to
obtain an infinite GP. This GP converges when $\alpha &amp;lt; 1$ to $1/(1-\alpha)$.
We can think of $1-\alpha$ as the 'mass' of the ball: the smaller this quantity
is, the faster the ball will move.&lt;/p&gt;
&lt;p&gt;Generally (and in this simulation as well), $\alpha = 0.9$, so $1-\alpha = 0.1$.
This means that we can move atmost ten times faster than the step size at a
point, and this is what causes momentum to converge faster!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;SGD_momentum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What do these gradient updates look like in practice? For starters, all changes
in the direction of the path are caused due to changes in the gradient. Where
the path takes a turn, the gradient is normal or antiparallel to the current
velocity, and at places where the path is straight, both the gradient and the
velocity are parallel. We can draw out the update vectors at two points in the
path above to see how this works.&lt;/p&gt;
&lt;iframe src="/articles/2023/res/momentum_vectors.html" style="width: 100%; height: 650px; border: 0"&gt;&lt;/iframe&gt;

&lt;h2 id="sgd-with-nesterov-momentum"&gt;SGD with Nesterov Momentum&lt;/h2&gt;

&lt;p&gt;If you've seen the path that momentum takes, there is one issue: &lt;em&gt;Momentum
doesn't stop very soon&lt;/em&gt;. It's easy to get the ball rolling, but harder to stop
it. This happens because the gradient that's added to the path is the gradient
&lt;em&gt;at the current point&lt;/em&gt;, not the gradient &lt;em&gt;at the point at which we would have 
been, if we took the step&lt;/em&gt;. In a continuous, real-world scenario, this 
difference is infinitesimal, but in a numerical scenario, it becomes 
significant if our step size is not small enough. This is also not an issue if 
our gradients at consecutive points are similar, but becomes an issue if we
'jump' across a local minima: momentum would push us even further forward, 
because the gradient at the current point is downward. &lt;/p&gt;
&lt;p&gt;This 'bug' was discovered by Nesterov, and the fix was to compute the gradient
at $\theta_{t} + \alpha v_{t}$ (the position we will be at, if the gradient is 
zero) rather than at $\theta_{t}$ (our current position). This 'pulls' the
gradient back if we jump across a minima&lt;/p&gt;
&lt;iframe src="/articles/2023/res/nesterov_comparision.html" style="width: 100%; height: 650px; border: 0"&gt;&lt;/iframe&gt;

&lt;p&gt;The implementation and update are quite similar, with just a minor update to
the gradient calculation.&lt;/p&gt;
&lt;p&gt;$$\begin{align}
v_{t+1} &amp;amp;\leftarrow \alpha v_{t} - \epsilon g(\theta_{t} + \alpha v_{t}) \\
\theta_{t+1} &amp;amp;\leftarrow \theta_{t} + v_{t+1}
\end{align}$$&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;SGD_nesterov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="gradient-descent-comparision"&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;Here's an interactive demo, showing the paths taken by SGD, SGD with Momentum
and SGD with Nesterov Updates. The arrows have the same colour scheme as
before, and show the directions in which the path is pulled (their sum is the
next resultant step). Playing around with this should give you an idea of how
these algorithms update themselves&lt;/p&gt;
&lt;iframe src="/articles/2023/res/comparision_plot.html" style="width: 100%; height: 650px; border: 0"&gt;&lt;/iframe&gt;

&lt;p&gt;Even though there are a large number of new algorithms for optimization, SGD
with Nesterov momentum (along with Adam) remains the algorithm of choice for
training very large neural networks: it's stable, explainable and converges
nicely.&lt;/p&gt;
&lt;!--
&lt;h2 id="adaptive-optimizers"&gt;Adaptive Optimizers&lt;/h2&gt;


&lt;h2 id="adagrad"&gt;AdaGrad&lt;/h2&gt;

$$\begin{align}
r_{t+1} &amp;\leftarrow r_{t} + (g(\theta_{t}))^2 \\\\
v_{t+1} &amp;\leftarrow -\frac{\epsilon g(\theta_{t})}{\sqrt{r_{t+1} + \delta}} \\\\
\theta_{t+1} &amp;\leftarrow \theta_{t} + v_{t+1}
\end{align}$$


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;AdaGrad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2 id="rmsprop"&gt;RMSProp&lt;/h2&gt;

$$\begin{align}
r_{t+1} &amp;\leftarrow \rho r_{t} + (1-\rho)(g(\theta_{t}))^2 \\\\
v_{t+1} &amp;\leftarrow -\frac{\epsilon g(\theta_{t})}{\sqrt{r_{t+1} + \delta}} \\\\
\theta_{t+1} &amp;\leftarrow \theta_{t} + v_{t+1}
\end{align}$$


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;RMSProp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;decay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decay&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;decay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;1e-7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2 id="rmsprop-with-nesterov-momentum"&gt;RMSProp with Nesterov Momentum&lt;/h2&gt;

$$\begin{align}
r_{t+1} &amp;\leftarrow \rho r_{t} + (1-\rho)(g(\theta_{t} + \alpha v_{t}))^2 \\\\
v_{t+1} &amp;\leftarrow \alpha v_{t} - \frac{\epsilon g(\theta_{t})}{\sqrt{r_{t+1} + \delta}} \\\\
\theta_{t+1} &amp;\leftarrow \theta_{t} + v_{t+1}
\end{align}$$


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;RMSProp_nesterov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;decay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decay&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;decay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;1e-7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2 id="adam"&gt;Adam&lt;/h2&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Adam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.999&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;rh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rh&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;1e-7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2 id="nadam-nesterov-adam"&gt;NAdam (Nesterov Adam)&lt;/h2&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;NAdam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.999&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# nesterov step&lt;/span&gt;
        &lt;span class="n"&gt;rh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rh&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;1e-7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2 id="adamw"&gt;AdamW&lt;/h2&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;AdamW&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;rh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rh&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;1e-7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# adamW step&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2 id="amsgrad"&gt;AMSGrad&lt;/h2&gt;


&lt;h2 id="adabound"&gt;AdaBound&lt;/h2&gt;


&lt;h2 id="adabelief"&gt;AdaBelief&lt;/h2&gt;


&lt;h1 id="second-order-optimizers"&gt;Second Order Optimizers&lt;/h1&gt;


&lt;h2 id="newton"&gt;Newton&lt;/h2&gt;


&lt;h2 id="conjugate-gradients"&gt;Conjugate Gradients&lt;/h2&gt;


&lt;h3 id="fletcher-reeves"&gt;Fletcher-Reeves&lt;/h3&gt;


&lt;h3 id="polak-ribiere"&gt;Polak-Ribiere&lt;/h3&gt;


&lt;h2 id="bfgs"&gt;BFGS&lt;/h2&gt;


&lt;h2 id="l-bfgs"&gt;L-BFGS&lt;/h2&gt;--&gt;

&lt;h1 id="refs-and-footnotes"&gt;References and Footnotes&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Goh, "Why Momentum Really Works", Distill, 2017. 
   &lt;a href="http://doi.org/10.23915/distill.00006"&gt;http://doi.org/10.23915/distill.00006&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Goodfellow, Ian, Bengio, Yoshua and Courville, Aaron. Deep Learning. : MIT 
   Press, 2016. &lt;/li&gt;
&lt;li&gt;Melville, James. Nesterov Accelerated Gradient and Momentum. 
   &lt;a href="https://jlmelville.github.io/mize/nesterov.html"&gt;https://jlmelville.github.io/mize/nesterov.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;This was supposed to also feature adaptive optimizers (AMSGrad, RMSProp, Adam 
and friends), but due to CCIC happening in the last week of December, I didn't
get the time to do this properly, and the second semester starts &lt;strike&gt;in a
couple days&lt;/strike&gt; tomorrow, so hard deadline :/ I'll try to get part 2 out
as soon as possible, but it might be a while. In the meantime, exploring the
source might help for the impatient.&lt;/p&gt;
&lt;p&gt;For the complete code, and to play around and implement your own optimizers, 
check out the repository here&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="https://github.com/Aniruddha-Deb/optimizers"&gt;&lt;img src="https://gh-card.dev/repos/Aniruddha-Deb/optimizers.svg"&gt;&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Machine Learning"></category><category term="Deep Learning"></category></entry><entry><title>My DL workflow for 2023</title><link href="https://aniruddhadeb.com/articles/2022/dl-workflow-2023.html" rel="alternate"></link><published>2022-12-29T23:40:00+05:30</published><updated>2022-12-29T23:40:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-12-29:/articles/2022/dl-workflow-2023.html</id><summary type="html">&lt;p&gt;I've kind of zeroed down on Deep Learning at this point, and putting my money
where my mouth is, will be taking both COL772 (Natural Language Processing) and
COL775 (Deep Learning) next semester.&lt;/p&gt;
&lt;p&gt;Along with Operating Systems, Parallel Programming and Theory of Computation.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img width="600px" src="/articles/2022/res/cs_degree.png"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Why a workflow?&lt;/h2&gt;
&lt;p&gt;I'll need to train â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've kind of zeroed down on Deep Learning at this point, and putting my money
where my mouth is, will be taking both COL772 (Natural Language Processing) and
COL775 (Deep Learning) next semester.&lt;/p&gt;
&lt;p&gt;Along with Operating Systems, Parallel Programming and Theory of Computation.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img width="600px" src="/articles/2022/res/cs_degree.png"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Why a workflow?&lt;/h2&gt;
&lt;p&gt;I'll need to train a lot of models, and while &lt;a href="https://kaggle.com"&gt;Kaggle&lt;/a&gt; and 
&lt;a href="https://colab.research.google.com"&gt;Colab&lt;/a&gt; are great at this, 30 hours a week 
won't cut it. So I'll need to move to using the 
&lt;a href="https://supercomputing.iitd.ac.in"&gt;IITD HPC&lt;/a&gt; to train some (most?) of my 
models.&lt;/p&gt;
&lt;p&gt;Most of this article will be very HPC-specific: the libraries, environment and
everything else involved in the setup probably (and thankfully) won't need to 
be replicated anywhere else, but the entire environment is something I'll 
probably use throughout next semester. &lt;/p&gt;
&lt;p&gt;If you're reading this as a HPC getting started guide, this is not it. Ruturaj
has published a great guide for that &lt;a href="https://github.com/kanha95/HPC-IIT-Delhi"&gt;here&lt;/a&gt;, 
and you should check that out as an introduction. This is a tad bit more 
advanced.&lt;/p&gt;
&lt;h2&gt;Mission Statement&lt;/h2&gt;
&lt;p&gt;I need an environment that will let me train the same model on both kaggle and
the HPC. Preferably do my initial EDA/debug runs on kaggle and then finetune/do 
production runs on the HPC. &lt;/p&gt;
&lt;p&gt;Let's look at a Pro/Con matrix for both platforms:&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
  &lt;th&gt;&lt;/th&gt;
  &lt;th&gt;Kaggle&lt;/th&gt;
  &lt;th&gt;HPC&lt;/th&gt;
&lt;/tr&gt;
&lt;tr style="background-color: #bae3b399;"&gt;
  &lt;td style="vertical-align: middle;"&gt; &lt;b&gt;Pro&lt;/b&gt; &lt;/td&gt;
  &lt;td&gt;&lt;ul&gt;
    &lt;li&gt;Easy to use! Versioning, running and working with data is super easy&lt;/li&gt;
    &lt;li&gt;Good GPU's (T4 x2, P100)&lt;/li&gt;
    &lt;li&gt;Large, Common datasets already there&lt;/li&gt;
  &lt;/ul&gt;&lt;/td&gt;
  &lt;td&gt;&lt;ul&gt;
    &lt;li&gt;No 12h limit, so run really long jobs!&lt;/li&gt;
    &lt;li&gt;Allocate as much hardware as you need (8 GPU rig go brr)&lt;/li&gt;
    &lt;li&gt;Get Skylake nodes if you're lucky or have funding (with 32GB V100 cards)&lt;/li&gt;
  &lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="background-color: #f0b9b499;"&gt;
  &lt;td style="vertical-align: middle;"&gt; &lt;b&gt;Con&lt;/b&gt; &lt;/td&gt;
  &lt;td&gt;&lt;ul&gt;
    &lt;li&gt;Only 30 hours a week&lt;/li&gt;
    &lt;li&gt;Working with notebooks/datasets without a proper filesystem may get 
        tedious for larger models&lt;/li&gt;
  &lt;/ul&gt;&lt;/td&gt;
  &lt;td&gt;&lt;ul&gt;
    &lt;li&gt;Slow, outdated GPU on haswell nodes (K40)&lt;/li&gt;
    &lt;li&gt;Super complicated versioning and environment management&lt;/li&gt;
    &lt;li&gt;System versions of software/libraries are antiquated and unreliable&lt;/li&gt;
  &lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;So, if we're shifting to HPC, we need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A Live Notebook environment&lt;/strong&gt;: JupyterLab running on HPC would be great to 
  test/debug stuff: no ML model runs at the first go, and it's foolish to
  assume that every model we run will just be some python script that we'll
  need to train. Exploring and interacting with models is part of the job
  description&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Seamless Kaggle Integration&lt;/strong&gt;: This is quite important, as we should be 
  directly able to jump from kaggle to HPC if needed, and the way this is
  finally implemented is via GitHub integration with Kaggle, and Papermill+Git
  on HPC to run notebooks (some config stuff, such as input/output directories
  are involved, which I'll get to later)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A Proper Installable Environment&lt;/strong&gt;: This was initially set up with Conda, 
  but because conda throws tantrums if the bashrc is not set according to it's
  tastes, all I used conda for was to setup the initial virtual environment.
  From there, it's easier to directly activate the virtual environment yourself
  and use pip.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Setup Process&lt;/h2&gt;
&lt;p&gt;This section started out as being very procedural, but I think a good grasp of
how the HPC works is more important. For starters, all relevant software that
you need is loaded in at runtime via &lt;a href="https://modules.readthedocs.io/en/latest/"&gt;Environment
modules&lt;/a&gt;. These use modulefiles, 
which look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;whatis&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;what this module does&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;modules_this_module_depends_on&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;prepend&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PATH_VAR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;path_to_append&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;setenv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ENV_FLAGS&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is great, but it's also super complicated to make a module and load a
module by yourself. You can only install software to your home directory, not
being admin, and modules are loaded from &lt;code&gt;MODULEPATH&lt;/code&gt; (which is
&lt;code&gt;/home/soft/modules&lt;/code&gt; on HPC). You could append &lt;code&gt;~/.local/modules&lt;/code&gt; to
&lt;code&gt;MODULEPATH&lt;/code&gt; on login, and then define your own modules, but that's still
fairly complicated. &lt;/p&gt;
&lt;p&gt;Since we're only going to be working with Python, using a virtual environment
is a better option. The python on HPC, however, has some hidden hacks.
Examining the module file for &lt;code&gt;apps/anaconda/3&lt;/code&gt; gives us the following two 
lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;set             TOP                     /home/apps/anaconda3_2018/4.6.9
...
setenv          PYTHON_ROOT             $TOP          
prepend-path    PYTHONPATH      $TOP/lib/python3.6/site-packages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is an issue, because after activating this module, &lt;code&gt;python2&lt;/code&gt; stops working
because the &lt;code&gt;PYTHONPATH&lt;/code&gt; has been changed. This means that your python proxy
script won't run! (3EnvCreation also does the same, although that sets &lt;code&gt;TOP&lt;/code&gt; as
&lt;code&gt;/home/apps/anaconda3/5.2.0/gnu&lt;/code&gt;). Activating an environment also causes issues
when you're doing it on a job, as &lt;code&gt;.bashrc&lt;/code&gt; is not called while running a job,
and conda, as said previously, throws tantrums when it's not configured in your
&lt;code&gt;.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The way we work around this is to create your conda environment AFTER activating
your proxy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;anaconda&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;EnvCreation&lt;/span&gt;
&lt;span class="n"&gt;conda&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;dl_35&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;3.7&lt;/span&gt;
&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;unload&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;anaconda&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;EnvCreation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then pick up the &lt;code&gt;activate&lt;/code&gt; script in &lt;code&gt;/home/apps/anaconda3/5.2.0/gnu/bin&lt;/code&gt; 
(&lt;code&gt;/home/apps/anaconda3_2018/4.6.9/bin&lt;/code&gt; if you made your env while using 
 &lt;code&gt;apps/anaconda/3&lt;/code&gt;), and place that in your home folder, or somewhere 
accessible. To activate your environment, you can now directly call &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; path/to/activate path/to/env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;for example, I have &lt;code&gt;activate&lt;/code&gt; in my &lt;code&gt;scripts&lt;/code&gt; directory, so I'll run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; scripts/activate .conda/envs/dl_35
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and it'll work, without loading any modules or without throwing errors that
conda isn't configured for your shell. Great!&lt;/p&gt;
&lt;p&gt;The next task we come to is actually installing libraries on there. Most stuff
is simple to install, and can be done via pip, except PyTorch. One major issue
on HPC are the dated GPU's: they have CUDA compute capability 3.5, and that's
not compatible with PyTorch, even though cudatoolkit 10 supports this CUDA
compute version! The reason is that compiling PyTorch to so many platforms
would increase the size of the resulting binary, and they wouldn't be able to
push the binaries to conda and pip archives. &lt;/p&gt;
&lt;p&gt;To work around this, you'll have to install a version of PyTorch compiled for
CUDA 3.5; &lt;a href="https://github.com/nelson-liu/pytorch-manylinux-binaries/releases"&gt;Nelson Liu&lt;/a&gt; 
has fortunately compiled some binaries, and they're great for getting PyTorch
to work. Follow the instructions and download and install the binary for your
python version only. The download itself is a bit large, so make sure you have
enough bandwidth left on your proxy.&lt;/p&gt;
&lt;p&gt;That covers most of what I did. I installed Jupyter, pandas, numpy, matplotlib,
plotly, scikit-learn and the usual suspects on my virtual environment, along
with some JupyterLab plugins and &lt;a href="https://papermill.readthedocs.io/en/latest/index.html"&gt;papermill&lt;/a&gt;,
which is also what Kaggle uses to run their notebooks.&lt;/p&gt;
&lt;h2&gt;Any Good?&lt;/h2&gt;
&lt;p&gt;I would be working on GAN's next semseter, so let's see if we can get StyleGAN2
up and running on our setup&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;qsub scripts/nbserver.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This runs a jupyter server with 4 CPU's, 1 GPU and 16G of memory for 2 hours; 
you can modify the parameters and runtime by downloading and customizing the
script from &lt;a href="https://gist.github.com/Aniruddha-Deb/2d48ba5ef8fcb853024a994b7cc73531"&gt;here&lt;/a&gt;,
but for now let's continue. Once our server is up and running, we'll get an
email and we can check the output logs to get the URL for the server, and we're
good to go&lt;/p&gt;
&lt;p&gt;&lt;img alt="jupyter on HPC" src="res/jupyter_hpc.png"&gt;&lt;/p&gt;
&lt;p&gt;I've cloned the &lt;a href="https://github.com/NVlabs/stylegan2-ada-pytorch"&gt;StyleGAN2&lt;/a&gt; 
PyTorch implemenation, and downloaded the weights trained on FFHQ from 
&lt;a href="https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/"&gt;here&lt;/a&gt;. Then made a 
notebook in the same directory and followed the examples&lt;/p&gt;
&lt;p&gt;Let's generate one image!&lt;/p&gt;
&lt;p&gt;&lt;img alt="One image" src="res/one_stylegan_image.png"&gt;&lt;/p&gt;
&lt;p&gt;Not too bad. Let's do 10 now&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ten faces" src="res/ten_faces.png"&gt;&lt;/p&gt;
&lt;h2&gt;What Next?&lt;/h2&gt;
&lt;p&gt;I still haven't gotten around to synergising kaggle with HPC, but it looks very
doable. Kaggle integrates with GitHub well: you can link your notebooks and
commit to GitHub with each kaggle commit. Papermill can pass parameters to a
cell that's been tagged as 'parameters' using Jupyter. All I'll have to do is
commit to GitHub from Kaggle, open up the notebook on HPC and mark the cell
as parameters (I'll have the input and output directories here, along with some
hyperparameters, and I can standardize this across all my scripts), and then
run the notebook with Papermill.&lt;/p&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;I've been at home for the past three weeks and have been prepping for a large(ish)
article to start 2023 with: an optimizer playground, with some interactive
charts. Stay tuned for that!&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Machine Learning"></category><category term="Deep Learning"></category></entry><entry><title>HackerFX v2</title><link href="https://aniruddhadeb.com/articles/2022/hackerfx-v2.html" rel="alternate"></link><published>2022-12-08T01:00:00+05:30</published><updated>2022-12-08T01:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-12-08:/articles/2022/hackerfx-v2.html</id><summary type="html">&lt;p&gt;Some of you might have come across &lt;a href="https://github.com/Aniruddha-Deb/HackerFX"&gt;HackerFX&lt;/a&gt;,
an image binarizer. This was written a long time back, when the only language I 
knew was Java, and when I was still in school. &lt;/p&gt;
&lt;p&gt;An update was on the cards for a while, because I wanted to change my desktop 
background â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some of you might have come across &lt;a href="https://github.com/Aniruddha-Deb/HackerFX"&gt;HackerFX&lt;/a&gt;,
an image binarizer. This was written a long time back, when the only language I 
knew was Java, and when I was still in school. &lt;/p&gt;
&lt;p&gt;An update was on the cards for a while, because I wanted to change my desktop 
background (which still looks surprisingly pretty for something made so long 
ago). I started playing around with PIL today evening to update this, and the 
end result is &lt;a href="https://github.com/Aniruddha-Deb/hackerfx-v2"&gt;HackerFX v2&lt;/a&gt;, a 
python rewrite that supports multicoloured input images, hex, file dumps, 
variable colors and a manual 5x5 font for the output charactes (so the aspect 
ratio doesn't have to be manually tweaked). It's a step jump in every way, and 
the images it generates are super pretty&lt;/p&gt;
&lt;p&gt;&lt;img alt="jojo" src="res/jojo.jpg"&gt;
&lt;img alt="jojo_out" src="res/jojo_out.png"&gt;&lt;/p&gt;
&lt;p&gt;Especially with hi-res shots, you have to zoom in to tell the difference. The 
performance is also very cool, given that you're iterating over millions of 
pixels. This does it all in less than 10 seconds.&lt;/p&gt;
&lt;p&gt;&lt;img alt="input" src="res/hallway.jpeg"&gt;
&lt;img alt="output" src="res/hallway_out.png"&gt;&lt;/p&gt;
&lt;p&gt;More examples are there in the github repo, and I haven't played around with 
the options much to generate prettier ones (it's getting kind of late, should sleep).
Feel free to clone the code, give it a spin on your images and enter the matrix :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: Thanks to &lt;a href="https://github.com/Salil03"&gt;Salil&lt;/a&gt; for implementing this 
for videos, and improvements to make video processing faster/better 
(multithreading, bitstream pre-generation, etc). Here's the result:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/O16AXOghFd8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>Bootloader Deep Dive</title><link href="https://aniruddhadeb.com/articles/2022/boot-deep-dive.html" rel="alternate"></link><published>2022-12-03T05:00:00+05:30</published><updated>2022-12-03T05:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-12-03:/articles/2022/boot-deep-dive.html</id><summary type="html">&lt;h2&gt;The Basics&lt;/h2&gt;
&lt;p&gt;The most basic boot process is BIOS on a standard i386/x86-64 device. The BIOS
first detects the CPU/RAM, then initializes the remainder of the hardware, and
then begins the boot sequence. The boot sequence basically consists of finding 
a bootable device, loading the boot program in â€¦&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Basics&lt;/h2&gt;
&lt;p&gt;The most basic boot process is BIOS on a standard i386/x86-64 device. The BIOS
first detects the CPU/RAM, then initializes the remainder of the hardware, and
then begins the boot sequence. The boot sequence basically consists of finding 
a bootable device, loading the boot program in that bootable device into the 
processor cache and letting the processor do it's thing.&lt;/p&gt;
&lt;p&gt;How is a bootable device found? A device is considered bootable if it has the 
magic bytes &lt;code&gt;0x55&lt;/code&gt; and &lt;code&gt;0xaa&lt;/code&gt; at offsets 511 and 512 from the start. This block
is called the &lt;em&gt;boot block&lt;/em&gt; or &lt;em&gt;master boot record&lt;/em&gt; (MBR), and this is what
kicks off the boot process. &lt;/p&gt;
&lt;p&gt;The MBR looks something like this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;sensei@manjaro-vm temp&lt;span class="o"&gt;]&lt;/span&gt;$ sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sda &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mbr.bin &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;+0 records in
&lt;span class="m"&gt;1&lt;/span&gt;+0 records out
&lt;span class="m"&gt;512&lt;/span&gt; bytes copied, &lt;span class="m"&gt;0&lt;/span&gt;.00493179 s, &lt;span class="m"&gt;104&lt;/span&gt; kB/s
&lt;span class="o"&gt;[&lt;/span&gt;sensei@manjaro-vm temp&lt;span class="o"&gt;]&lt;/span&gt;$ hexdump mbr.bin 
&lt;span class="m"&gt;0000000&lt;/span&gt; 63eb &lt;span class="m"&gt;0090&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt;
&lt;span class="m"&gt;0000010&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt;
*
&lt;span class="m"&gt;0000050&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;8000&lt;/span&gt; &lt;span class="m"&gt;0001&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt;
&lt;span class="m"&gt;0000060&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; faff &lt;span class="m"&gt;9090&lt;/span&gt; c2f6 &lt;span class="m"&gt;7480&lt;/span&gt; f605 70c2
...
...
00001c0 &lt;span class="m"&gt;0021&lt;/span&gt; fe83 ffff &lt;span class="m"&gt;0800&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; f026 01df &lt;span class="m"&gt;0000&lt;/span&gt;
00001d0 &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt;
*
00001f0 &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; &lt;span class="m"&gt;0000&lt;/span&gt; aa55
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;dd&lt;/code&gt; copies the first 512 bytes of my disk to a binary called &lt;code&gt;mbr.bin&lt;/code&gt;, and 
we hexdump it's contents. Note the &lt;code&gt;0x55&lt;/code&gt; and &lt;code&gt;0xaa&lt;/code&gt; magic bytes right at the 
end (the system is little endian, so it reads as &lt;code&gt;aa55&lt;/code&gt;). These 512 bytes tell 
the system to load in GRUB, which then begins the boot process.&lt;/p&gt;
&lt;h2&gt;GRUB&lt;/h2&gt;
&lt;p&gt;The GRand Unified Bootloader is the default bootloader on Linux systems. What 
GRUB does is create a basic runtime, initializes the ramdisk and finally loads 
the kernel in. GRUB is launched by those 512 bytes that we saw above. The
actual GRUB files are stored in &lt;code&gt;/boot/grub&lt;/code&gt;, and they look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/boot/grub
â”œâ”€â”€ fonts
â”‚Â Â  â””â”€â”€ unicode.pf2
â”œâ”€â”€ grub.cfg
â”œâ”€â”€ grubenv
â”œâ”€â”€ i386-pc
â”‚Â Â  â”œâ”€â”€ acpi.mod
â”‚Â Â  â”œâ”€â”€ adler32.mod
â”‚Â   â”‚   ...
â”‚Â   â”‚   ...
â”‚Â Â  â””â”€â”€ zstd.mod
â”œâ”€â”€ locale
â”‚Â Â  â”œâ”€â”€ ast.mo
â”‚Â Â  â”œâ”€â”€ ca.mo
â”‚Â   â”‚   ...
â”‚Â   â”‚   ...
â”‚Â Â  â””â”€â”€ zh_TW.mo
â””â”€â”€ themes
    â””â”€â”€ starfield
        â”œâ”€â”€ blob_w.png
 Â       â”‚   ...
 Â       â”‚   ...
        â””â”€â”€ theme.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What GRUB does is essentially create a 'mini 32-bit linux OS', with debug
environments, a shell, and a lot of creature comforts, but beyond all that, it 
creates the RAMFS and loads the kernel and points it to the RAMFS. This can be 
seen in the &lt;code&gt;grub.cfg&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;menuentry &lt;span class="s1"&gt;&amp;#39;Manjaro Linux&amp;#39;&lt;/span&gt; --class manjaro --class gnu-linux --class gnu --class os &lt;span class="nv"&gt;$menuentry_id_option&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gnulinux-simple-ffd2d1d7-a3e5-4e24-816d-d83f13c56708&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    savedefault
    load_video
    ...
    ...
    linux   /boot/vmlinuz-5.15-x86_64 &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;UUID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ffd2d1d7-a3e5-4e24-816d-d83f13c56708 rw  quiet udev.log_priority&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;
    initrd  /boot/intel-ucode.img /boot/initramfs-5.15-x86_64.img
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the last two lines: here we're specifying the actual linux kernel image
using the &lt;code&gt;linux&lt;/code&gt; command, and the files that initialize the RAMFS using &lt;code&gt;initrd&lt;/code&gt;.
(The &lt;code&gt;intel-ucode.img&lt;/code&gt; is a bunch of microcode patches that the OS loads in to 
workaround hardware-level bugs, think heartbleed, spectre etc. It's super 
important to load this in before anything else, so that the boot process may 
not be compromised and so on.)&lt;/p&gt;
&lt;h2&gt;What's a RAMFS&lt;/h2&gt;
&lt;p&gt;A RAM file system (or RAM disk) is, quite simply, a file system in memory! When 
the system needs to boot, the files for the system may not simply be on the 
HDD/SSD: they can be somewhere on the network (PXE boot), on a removable media 
(USB,CDROM) or on an encrypted drive! (BootLocker equivalents on Linux). For 
all this, we need a temporary file system that the kernel can run off of to
load the OS into actual memory.&lt;/p&gt;
&lt;p&gt;Another reason for a RAMFS is that the Linux kernel is neither monolithic, nor 
a microkernel: it's somewhere in between in the sense that you can load modules 
into the kernel while it's running. To do the stuff that we've described above,
(Boot off of the network, decrypt an encrypted drive, etc), the relevant kernel 
modules will need to be loaded into the kernel first. These generally reside in 
the initramfs image, and are loaded into memory by the kernel. &lt;code&gt;initramfs&lt;/code&gt; is 
generally a &lt;code&gt;cpio&lt;/code&gt; compressed image, which is decompressed when it's loaded in 
(something that GRUB does), and this is generated using the &lt;code&gt;mkinitcpio&lt;/code&gt; command, 
after specifying the default modules and hooks (for more information, check 
out &lt;a href="https://nickdesaulniers.github.io/blog/2018/10/24/booting-a-custom-linux-kernel-in-qemu-and-debugging-it-with-gdb/"&gt;This great resource&lt;/a&gt;
which boots a Linux Kernel from scratch in QEMU)&lt;/p&gt;
&lt;h2&gt;From Kernel to Login Screen&lt;/h2&gt;
&lt;p&gt;Once the Kernel has finally loaded all the modules from the RAMFS and entrenched 
itself in memory, it calls &lt;code&gt;/init&lt;/code&gt; in the RAMFS to finally load the disk and 
all other modules from disk.&lt;/p&gt;
&lt;p&gt;It's all downhill from here: once all modules have been loaded, &lt;code&gt;systemd&lt;/code&gt; (or 
&lt;a href="https://nosystemd.org/"&gt;Your favourite Init Daemon&lt;/a&gt;) is called, which starts 
as PID 1 and spawns all relevant processes on the system. &lt;code&gt;systemd&lt;/code&gt; will then 
start LightDM (On Manjaro, you might have a different Desktop Manager), which 
displays your login prompt, and you can now finally login!&lt;/p&gt;
&lt;p&gt;&lt;img alt="image of a login screen" src="res/manjaro_cinnamon.png"&gt;&lt;/p&gt;
&lt;p&gt;Unless, of course, you've locked yourself out with too many failed password 
attempts&lt;/p&gt;
&lt;h2&gt;Is this process standard across systems?&lt;/h2&gt;
&lt;p&gt;Nope. Atleast, not when you change architectures. Or go to UEFI. Ah, let's just 
say this is very specific.&lt;/p&gt;
&lt;p&gt;I bumped into this whole process as I wanted to do some kernel hacking on my 
faithful &lt;a href="https://aniruddhadeb.com/articles/2022/arch-linux-1.html"&gt;Raspberry Pi&lt;/a&gt;.
I regret to inform all Pi hackers that the bootloader process for the Pi is 
&lt;a href="https://raspberrypi.stackexchange.com/questions/10442/what-is-the-boot-sequence/10595#10595"&gt;completely different&lt;/a&gt;,
and much easier, and all you have to do is place your kernel image with the 
appropriate name in the '/boot' directory and the Pi will boot from it.&lt;/p&gt;
&lt;p&gt;TL;DR the Pi has a two (three?) stage bootloader, which curiously completely 
runs on the GPU. The only time the CPU is actually used is when the kernel image 
is loaded into memory, and the actual init process starts. The bootloaders are 
&lt;code&gt;.elf&lt;/code&gt; files, and are apparently proprietrary. I'll give decompiling them a 
shot if I have free time, but I think someone would already have tried that out.&lt;/p&gt;
&lt;p&gt;On a side note, embedded systems with limited memory and a fairly fixed device 
layout generally boot without a RAMFS, as there's simply no need to hotload a 
bunch of modules into the linux kernel, when you know exactly what modules you'll 
need and what the hardware arrangement (where you're going to boot from) is.&lt;/p&gt;
&lt;p&gt;Happy Hacking!&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>Vim Sutras</title><link href="https://aniruddhadeb.com/articles/2022/vim-sutras.html" rel="alternate"></link><published>2022-10-22T09:45:00+05:30</published><updated>2022-10-22T09:45:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-10-22:/articles/2022/vim-sutras.html</id><summary type="html">&lt;p&gt;&lt;img alt="vim setup screenshot" src="/articles/2022/res/vim-1.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;When in Neovim, Do as the Luans do&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unless you're just starting out with Neovim or are extremely used to vim, it's a good idea to set up Neovim using neovim-exclusive plugins. Most of them are written in lua, and integrate more nicely with the Neovim environment (async, faster startup â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="vim setup screenshot" src="/articles/2022/res/vim-1.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;When in Neovim, Do as the Luans do&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unless you're just starting out with Neovim or are extremely used to vim, it's a good idea to set up Neovim using neovim-exclusive plugins. Most of them are written in lua, and integrate more nicely with the Neovim environment (async, faster startup, support for LSP and treesitter, etc). &lt;/p&gt;
&lt;p&gt;My initial neovim setup was just a clone of my vim setup, but when I noticed NERDTree wasn't loading large directories quickly, I searched for a lighter, async file tree plugin for Neovim and came across NvimTree, and not long after, all my vim plugins were replaced with their neovim equivalents.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Shun character by character movements&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do not use h,j,k,l as a drop in replacement for your arrow keys: it is the vim equivalent of using a fine-tipped brush to paint your entire watercolour. Use a broad brush for the base strokes (&lt;code&gt;?&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;gg&lt;/code&gt;/&lt;code&gt;G&lt;/code&gt;), a finer brush for outlines (&lt;code&gt;f&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;) and the finest brushes for detailing (&lt;code&gt;w&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Also, for tag-jumping, use &lt;code&gt;&amp;lt;C-[&amp;gt;&lt;/code&gt; with ctags and &lt;code&gt;gf&lt;/code&gt; for going to a file under the cursor. For more motions, see &lt;a href="https://www.barbarianmeetscoding.com/boost-your-coding-fu-with-vscode-and-vim/moving-blazingly-fast-with-the-core-vim-motions/"&gt;this&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Repeat, don't retype&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Make liberal use of &lt;code&gt;;&lt;/code&gt; (repeat motion) and &lt;code&gt;.&lt;/code&gt; (repeat edit). They are powerful tools.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Master the nature of Vi: all else is ephemeral&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Don't rely too much on plugins or keybinds: they might give a huge speedup in very specific cases, but as &lt;a href="https://blog.samwhited.com/2015/04/the-dharma-of-vi/"&gt;The dharma of vi&lt;/a&gt; states, "With patience the man who knows how to use a snare may catch himself a hare, or a hog, or a grouse for dinner, even though the snare was not made for all these things. The man who shapes the snare to better catch only the rabbits foot will starve if no rabbit wanders by."&lt;/p&gt;
&lt;p&gt;Also from &lt;a href="https://blog.sanctum.geek.nz/vim-koans/"&gt;Vim koans&lt;/a&gt;, "you will master vimscript when you never use it".&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Vi and the shell are one&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;!&lt;/code&gt; command allows you to run any shell command via Vi. &lt;/p&gt;
&lt;p&gt;Suppose you have a list of files in a directory &lt;code&gt;d&lt;/code&gt; and you want to load in the names of only the ones starting with &lt;code&gt;en&lt;/code&gt; into your file. Simply do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;:r !ls d/en* -1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://blog.sanctum.geek.nz/vim-koans/"&gt;Vim koans&lt;/a&gt; also have a nice example of this, where they convert Markdown to HTML&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Shepherd your lines with ex&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ex mode is useful when line-based tasks have to be done in a non-visual manner. If I want to duplicate a method that is 5 lines above me and 3 lines long to my current position, I'd do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="s s-Atom"&gt;co&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Same with motions: If I want to move that method here, I'd do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="s s-Atom"&gt;mo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is also where relative line numbers shine: if you're in a file with a lot of lines, you'd need to type the entire line number (which may be 3/4 digits) twice. Instead, relative line numbers are easier to type.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Mysterious are the ways of g&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Reference: &lt;a href="https://vim.fandom.com/wiki/Power_of_g"&gt;The power of &lt;code&gt;g&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;When in doubt, refer to the user manual&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;:h user-manual&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And use &lt;code&gt;gf&lt;/code&gt; to navigate the various subfiles in it. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Haven't posted in a while: I realized I could post about the million other things I've done recently, but I don't want to make this blog an instagram status feed.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Vim"></category></entry><entry><title>Installing ns3: What worked</title><link href="https://aniruddhadeb.com/articles/2022/ns3-installation.html" rel="alternate"></link><published>2022-10-06T18:00:00+05:30</published><updated>2022-10-06T18:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-10-06:/articles/2022/ns3-installation.html</id><summary type="html">&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;XCode CLT (which you should have)&lt;/li&gt;
&lt;li&gt;QT 5. Install via &lt;code&gt;brew install qt5&lt;/code&gt;. NOTE: if you already have an updated version of Qt, you'll need to pass a different &lt;code&gt;qmake&lt;/code&gt;, and brew won't link this to your system. Brew will inform you of this, and you'll manually need to â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;XCode CLT (which you should have)&lt;/li&gt;
&lt;li&gt;QT 5. Install via &lt;code&gt;brew install qt5&lt;/code&gt;. NOTE: if you already have an updated version of Qt, you'll need to pass a different &lt;code&gt;qmake&lt;/code&gt;, and brew won't link this to your system. Brew will inform you of this, and you'll manually need to pass the path to &lt;code&gt;qmake&lt;/code&gt; while building. More on this later.&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;? PyBindGen - I installed this via &lt;code&gt;pip install pybindgen&lt;/code&gt;, but &lt;code&gt;waf&lt;/code&gt; didn't pick it up. If anyone else succeeds, let me know in the comments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Download the source code, unzip with &lt;code&gt;tar -xvf&lt;/code&gt; and &lt;code&gt;cd&lt;/code&gt; into the directory&lt;/li&gt;
&lt;li&gt;Use the following command to build: &lt;code&gt;./build.py [--qmake-path=/usr/local/opt/qt@5/bin/qmake] --enable-examples --enable-tests -- --build-profile=optimized --disable-werror&lt;/code&gt; (Without the stuff in the square brackets, if you don't have a newer version of Qt preinstalled, and with the stuff but excluding the square brackets if you do have a newer version).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aaaand you're good! To test, change into the &lt;code&gt;ns-3.29&lt;/code&gt; directory and do &lt;code&gt;./waf --run hello-simulator&lt;/code&gt;. You should see &lt;code&gt;Hello Simulator&lt;/code&gt; printed. To test NetAnim, go to the &lt;code&gt;netanim-3.108&lt;/code&gt; folder and do &lt;code&gt;./NetAnim&lt;/code&gt;, and you should see the NetAnim GUI pop up. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: The python bindings are generated when you run &lt;code&gt;waf&lt;/code&gt; using python2 (no idea why not with python3). To generate them, go to &lt;code&gt;ns-3.29&lt;/code&gt; and run &lt;code&gt;python2 waf configure --build-profile=optimized --enable-examples --enable-tests --disable-werror&lt;/code&gt; and then &lt;code&gt;./waf build&lt;/code&gt;.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Networks"></category></entry><entry><title>Manjaro Rice</title><link href="https://aniruddhadeb.com/articles/2022/manjaro-rice.html" rel="alternate"></link><published>2022-10-04T19:00:00+05:30</published><updated>2022-10-04T19:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-10-04:/articles/2022/manjaro-rice.html</id><content type="html">&lt;p&gt;&lt;img alt="rice 1" src="/articles/2022/res/manjaro_rice_1.png"&gt;
&lt;img alt="rice 2" src="/articles/2022/res/manjaro_rice_2.png"&gt;&lt;/p&gt;
&lt;p&gt;ft. nvim, neofetch and htop. WM: i3-gaps, with compton for compositing. &lt;/p&gt;
&lt;p&gt;Wallpaper: &lt;a href="https://i.imgur.com/cCIfZTm.jpeg"&gt;Pick and Place&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;nvim theme: &lt;a href="https://github.com/tiagovla/tokyodark.nvim"&gt;tokyodark.nvim&lt;/a&gt;, supporting transparency.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Linux"></category></entry><entry><title>Neovim Ricing</title><link href="https://aniruddhadeb.com/articles/2022/nvim-ricing.html" rel="alternate"></link><published>2022-09-25T17:00:00+05:30</published><updated>2022-09-25T17:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-09-25:/articles/2022/nvim-ricing.html</id><summary type="html">&lt;p&gt;While pruning a bug in my server, I had to debug my code on Manjaro, which was getting tedious. I'd installed Neovim, so the rational step would be to install Sublime and forget about neovim.&lt;/p&gt;
&lt;p&gt;Right?&lt;/p&gt;
&lt;p&gt;Nope. Let's install Neovim on Mac instead and try moving to it!&lt;/p&gt;
&lt;p&gt;&lt;img alt="neovim" src="/articles/2022/res/neovim.png"&gt;&lt;/p&gt;
&lt;h2&gt;Sprucing up â€¦&lt;/h2&gt;</summary><content type="html">&lt;p&gt;While pruning a bug in my server, I had to debug my code on Manjaro, which was getting tedious. I'd installed Neovim, so the rational step would be to install Sublime and forget about neovim.&lt;/p&gt;
&lt;p&gt;Right?&lt;/p&gt;
&lt;p&gt;Nope. Let's install Neovim on Mac instead and try moving to it!&lt;/p&gt;
&lt;p&gt;&lt;img alt="neovim" src="/articles/2022/res/neovim.png"&gt;&lt;/p&gt;
&lt;h2&gt;Sprucing up Neovim&lt;/h2&gt;
&lt;p&gt;Neovim is actually a nice editor, once you install a bunch of plugins via arcane terminal magic (what else gives people feelings of power, amirite?). The only difference I see between Neovim and good ol' vim is that Neovim supports all the old vim plugins, but also supports Lua plugins as well (and is asynchronous, but I don't notice that in practice).&lt;/p&gt;
&lt;p&gt;It also has Language Server Protocol support and tree-sitter and a bunch of other useful stuff which I'll get around to eventually using, but are just magic for now.&lt;/p&gt;
&lt;h2&gt;Plugins used&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;preservim/nerdtree&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim-airline/vim-airline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tanvirtin/monokai.nvim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;airblade/vim-gitgutter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ryanoasis/vim-devicons&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Xuyuanp/nerdtree-git-plugin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And &lt;code&gt;vim-plug&lt;/code&gt; for installing all of them. Note that &lt;code&gt;vim-devicons&lt;/code&gt; needs the nerdicons patched font. I use Meslo LG S, because it's basically Open-Source Menlo, and I'm too used to Menlo by this point to quit. Interestingly, my kitty config doesn't use this parameter anywhere, but still manages to pick up the glyphs from the right font... Omoshiroi.&lt;/p&gt;
&lt;h2&gt;Roadmap&lt;/h2&gt;
&lt;p&gt;I still need to work on LSP integration (installed &lt;code&gt;ccls&lt;/code&gt; today), but will do that at a later time. There are still a lot of things to move over (If I do choose to move over), some of them are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LSP's for C,C++,Python,Rust&lt;/li&gt;
&lt;li&gt;Learn the buffer vs tabs philosophy (I used tabs extensively previously in vim)&lt;/li&gt;
&lt;li&gt;Multi cursor vs macros... Get used to macros&lt;/li&gt;
&lt;li&gt;Port my Competitive Programming setup over&lt;/li&gt;
&lt;li&gt;VimLaTeX installation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that's it, I guess. Terminals are probably why I'd switch over (Sublime terminals just seem half-baked, and it's much nicer using nvim+kitty than ctrl-tabbing with sublime), and nicer keyboard integration in nvim. Most of my original reasons for &lt;a href="https://aniruddhadeb.com/articles/2021/sublime-text-setup"&gt;switching to sublime&lt;/a&gt; are now mitigated, and I do have the skill to improve my vim-jutsu.&lt;/p&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;Short and sweet blog post, because it's Minors week!&lt;/p&gt;
&lt;p&gt;Also, I might start posting these on Hacker News and Reddit&lt;/p&gt;
&lt;p&gt;Aaaand debating whether to create a twitter as well for that added publicity. Devs with it seem to do a lot better than those without it. Even John Carmack has a twitter :^&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Systems"></category></entry><entry><title>Seven Days of Creation</title><link href="https://aniruddhadeb.com/articles/2022/seven-days-of-creation.html" rel="alternate"></link><published>2022-09-18T12:00:00+05:30</published><updated>2022-09-18T12:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-09-18:/articles/2022/seven-days-of-creation.html</id><summary type="html">&lt;p&gt;When you learn more in the last week than in any other week in your life. A summary of how I built a high-performance peer-server-peer file sharing network in the span of a week.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Our networks course required us to construct a peer-server-peer file transfer protocol, wherein once chunks of the file are evenly distributed to different clients, the clients contact the server for chunks they don't have, and the server in turn queries all other clients if they have the chunk. If they do, they send it back to the server, which in turn relays it back to the client. This continues until all connected parties have the complete file.&lt;/p&gt;
&lt;p&gt;A thread-based implementation in Python was suggested, but given the requirements, I decided to go one level deeper: make a C++-based implementation with non-blocking sockets and asynchronous IO.&lt;/p&gt;
&lt;h2&gt;Day One&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In the beginning, God created sockets. Now the sockets were isolated, unable to connect to anything on the system. And God said, &lt;strong&gt;"Let there be syscalls"&lt;/strong&gt;, and there were syscalls.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Having decided to go as close to the metal as I could for performance reasons (the assignment requirements stated that we'd have to transfer a 100 MB file to 100 clients simultaneously, in a reasonable amount of time), I decided to cut no corners. Fortunately, socket programming is very well documented, and is actually one of the more reasonable subsystems of the Linux/BSD kernel (POSIX sockets API FTW!). &lt;/p&gt;
&lt;p&gt;There are a lot of guides online for this, but the best one is &lt;a href="https://beej.us/guide/bgnet/pdf/bgnet_a4_c_1.pdf"&gt;Beej's network programming guide&lt;/a&gt;, now updated for IPv6 ^_^. This goes through the basics of a lot of what is needed, namely the socket syscalls (&lt;code&gt;socket&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt;, &lt;code&gt;connect&lt;/code&gt;, &lt;code&gt;accept&lt;/code&gt;, &lt;code&gt;send&lt;/code&gt;, &lt;code&gt;recv&lt;/code&gt;, &lt;code&gt;sendto&lt;/code&gt;, &lt;code&gt;recvfrom&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt;) and a lot of other things, such as getting address information, setting socket options with &lt;code&gt;setsockopt&lt;/code&gt; (and the various options available), making sockets nonblocking, as well as a small tutorial on &lt;code&gt;select&lt;/code&gt; for asynchronous IO&lt;sup&gt;&lt;a href="#footnote-1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;I won't be repeating whatever was mentioned there, but a few things that tripped me up were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SO_REUSEADDR&lt;/code&gt;. Yep. The first time &lt;a href="https://stackoverflow.com/questions/14388706/how-do-so-reuseaddr-and-so-reuseport-differ"&gt;I read about this flag&lt;/a&gt;, I understood nothing. It was only after I could not reconnect to my server immediately after shutting it down did I realize that something's up. TCP's TIME_WAIT state persists &lt;em&gt;after&lt;/em&gt; the application has shut down, which is why if you close and restart a socket at the same port, it won't immediately rebind, as there may still be a FIN/ACK message out on the network, bound for this port. If that hits the second application, it would cause that application's port to shut down, which is why TIME_WAIT waits for 2 maximum segment lifetimes (approx. 30 to 120 seconds). Here's a TCP state diagram to help out, if the above didn't make sense&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img src="res/tcp-state-diagram-v2.svg" width="400px"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SO_RCVLOWAT&lt;/code&gt;. TCP is a stream protocol, and not a datagram protocol, and I think nobody makes it obvious what the differences are between them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reading from a SOCK_STREAM port (TCP) is like sucking bits from a straw on the network. &lt;code&gt;recv(fd, buf, len, flags)&lt;/code&gt; will read&lt;sup&gt;&lt;a href="#footnote-2"&gt;2&lt;/a&gt;&lt;/sup&gt; atmost &lt;code&gt;len&lt;/code&gt; bytes from &lt;code&gt;fd&lt;/code&gt;'s read buffer to &lt;code&gt;buf&lt;/code&gt;. It doesn't care whether the bytes were part of a previous message, or if it's two messages, it will just read that many bytes in. If the entire message hasn't reached, it will read less than &lt;code&gt;len&lt;/code&gt; bytes, and return the number of bytes read (basically reading partial messages).&lt;/li&gt;
&lt;li&gt;Reading from a SOCK_DGRAM port (UDP) is like eating potato chips from a pringles tube, one at a time. &lt;code&gt;recv(fd, buf, len, flags)&lt;/code&gt; on a UDP port will read &lt;em&gt;min(len,size of one datagram)&lt;/em&gt; into buf. This means that you only get single datagrams. The port will read an incomplete datagram &lt;strong&gt;only if len is less than the size of one datagram&lt;/strong&gt;, otherwise you're guaranteed to read the complete datagram in, notwithstanding system/network errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, how do we emulate UDP's 'chunking' in TCP? The &lt;code&gt;SO_RCVLOWAT&lt;/code&gt; parameter sets a low water mark for the socket read buffer: we are only alerted of a read if the number of bytes in the read buffer are more than those set by this flag (a blocking read will wait until the number of bytes is more than this, or the socket has closed). By setting the low water mark and our buffer length to the size of one 'packet' of information that we are expected to receive, we can read only one packet at a time, cleanly separated from the rest of the byte stream. Neat!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Respect the error message!&lt;/strong&gt; I cannot stress on this enough. Always, &lt;strong&gt;ALWAYS&lt;/strong&gt; check what these syscalls are returning. You'll save yourself a lot of pain. An example: this is terrible code&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// some code here&lt;/span&gt;
&lt;span class="n"&gt;getaddrinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;c_str&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;uintptr_t&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_family&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_socktype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_protocol&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;reuse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;reuse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reuse&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_addrlen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;F_SETFL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_NONBLOCK&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;freeaddrinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// more code here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Do you see the error? Exactly. You'll never see the error, until it blows up in your face 500 lines later. Your server needs to fail fast while debugging. There's no shame in throwing assert statements around like confetti.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;errstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; (errno &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getaddrinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;c_str&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;errstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not get address information&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kt"&gt;uintptr_t&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_family&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_socktype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_protocol&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;errstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not create socket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;reuse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;reuse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reuse&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;errstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not set SO_REUSEADDR option&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_addrlen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;errstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not bind socket to port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Day Two&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;And God said, &lt;strong&gt;"Let there be an event loop so that sockets can know when they have to read and write"&lt;/strong&gt;, So God made an event loop and registered his sockets to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Possibly the most fun part of this entire exercise. Event loops allow you to write superfast single-threaded concurrent servers, simply because the OS doesn't need to schedule a bunch of threads waiting for their clients to reply to them. In macOS (and other BSD distros), the kernel uses &lt;code&gt;kevent&lt;/code&gt; for the event queue, but if you're looking to port to linux, &lt;a href="https://github.com/mheily/libkqueue"&gt;&lt;code&gt;libkqueue&lt;/code&gt;&lt;/a&gt; works like a charm (just make sure to build and install the latest version: the ones on the default package repositories are outdated and have bugs).&lt;/p&gt;
&lt;p&gt;Event loops and the reactor pattern are not-so-easy to understand, so &lt;a href="https://dzone.com/articles/understanding-reactor-pattern-thread-based-and-eve"&gt;here&lt;/a&gt; and &lt;a href="http://www.dre.vanderbilt.edu/~schmidt/PDF/reactor-siemens.pdf"&gt;here&lt;/a&gt; were some good resources I referred to. A broad overview (when applied to sockets) is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each socket has a file descriptor, along with a read/write buffer (in the kernel).&lt;/li&gt;
&lt;li&gt;An event queue allows us to register this file descriptor with the queue, such that we are alerted when we can read/write from this file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What does an event queue look like? Here's a (rough) abstraction from my code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;event_t&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EventQueue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;EventQueue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;add_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;event_t&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;delete_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;event_t&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;event_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get_events&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;simple enough. Where does the event loop come in? The loop is responsible for polling the event queue and processing the events that occur&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;EventQueue&lt;/span&gt; &lt;span class="n"&gt;evtq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// add events here&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;evts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;evtq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_events&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nl"&gt;e&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;evts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// process e;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Generally, a callback-like structure is employed within the event loop&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unordered_map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;read_callbacks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//...&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;register_read_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;read_callbacks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// inside the event loop&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nl"&gt;e&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;evts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// ...&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;EV_READ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;read_callbacks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;]();&lt;/span&gt;
            &lt;span class="c1"&gt;// ...&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Short and sweet, add more callbacks as needed.&lt;/p&gt;
&lt;p&gt;There's a very nice &lt;a href="https://wiki.netbsd.org/tutorials/kqueue_tutorial/"&gt;kqueue tutorial&lt;/a&gt; here, which goes into more specifics; stuff such as timers and one-shot events, but read/write events on sockets should be enough to scale.&lt;/p&gt;
&lt;h2&gt;Day Three&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;And God said, &lt;strong&gt;"Let there be a client to keep the server company"&lt;/strong&gt;, and it was so. God made a client using the same principles as the server, and God saw that it was good.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The client was basically a mini-server, with a TCP and UDP port, that used the same event-loop based architecture to simultaneously transmit messages and receive file chunks. Once the protocol is implemented and the server is created, implementing a client is a relatively simple exercise, and was easy to do.&lt;/p&gt;
&lt;p&gt;One additional feature of kevent that I used were timers: if a request packet (over UDP) drops, then we won't receive a chunk in response to it. The way I solved this is to have a timer event every second, and a map that stores which chunk ID's are currently requested, and when those requests were sent out. Every second, when the timer event triggers, we check if there are any requests sent to which we haven't received a response in 5 seconds, and we resend these requests. Adding timer events to kqueue is relatively straightforward, just that the documentation doesn't make it clear whether we have to pass the time (in milliseconds) or a pointer to the time. The former works, but not the latter (even though &lt;code&gt;struct kevent&lt;/code&gt; has the type of data as &lt;code&gt;intptr_t&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;kevent&lt;/span&gt; &lt;span class="n"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;period_in_ms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;EV_SET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EVFILT_TIMER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EV_ADD&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;EV_ENABLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;period_in_ms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;kevent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_kq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; was chosen as 6000 as this is large enough to not clash with anything else. I couldn't think of a better way to choose a descriptor for a timer. If you do know of one (allocating a file descriptor which won't clash with other file descriptors), do let me know in the comments :)&lt;/p&gt;
&lt;h2&gt;Day Four&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;And God said, &lt;strong&gt;"Let there be two implementations of the protocol, for testing purposes"&lt;/strong&gt;, and it was so. God set about refactoring the codebase, abstracting the interfaces and implementation out, and when he was done, he saw that it was good.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This was probably the most frustrating part: after three straight days of programming, I realized that to switch protocols, I'd have to do it all over again. This is where effective design comes into picture: rather than making a hacky proof-of-concept server, abstracting out the various things that would have separate implementations from the start would've made this exercise very easy. &lt;/p&gt;
&lt;p&gt;I set about redesigning the server. Fortunately, a full rewrite wasn't needed, and a lot of the components could just be reused directly. For changing the protocol, I defined the interfaces in a header file, and implementation-specific versions in a source file. This allows me to change the implementation at compile time rather than in source (which would need me to subclass Server and override these methods). All I need to do now to change the protocol is &lt;code&gt;make proto=TCP&lt;/code&gt; instead of normal &lt;code&gt;make&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;The makefile flags to do something like this are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;ifeq ($(PROTO), TCP)&lt;/span&gt;
    &lt;span class="nv"&gt;SRC_SERVER&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &amp;lt;tcp implementation files&amp;gt;
    ...
    SERVER :&lt;span class="o"&gt;=&lt;/span&gt; bin/server_tcp
    ...
&lt;span class="cp"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;SRC_SERVER&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &amp;lt;udp implementation files&amp;gt;
    ...
    SERVER :&lt;span class="o"&gt;=&lt;/span&gt; bin/server_udp
    ...
&lt;span class="cp"&gt;endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The final source design looked like this (leaving out other non-relevant items)&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="protocol" src="res/protocol.svg"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Day Five&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;And God said, &lt;strong&gt;"Let this bounty be available to the users of Linux as well"&lt;/strong&gt;, and it was so. God did not have a working Linux machine, so he created a QEMU VM to run Manjaro and to compile the code, and when he was done, he saw that it was good.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Linux machine I'd gotten from home had a broken keyboard, and my Raspberry Pi was not connecting to the cellular network (apparently my cellphone provider switched from an ipv4 to an ipv6 network, so arp-scan and everything was a mess; I couldn't locate my pi's IP, and an iPhone being an iPhone, doesn't let you see the IP of the devices connected to it's WiFi hotspot.)&lt;/p&gt;
&lt;p&gt;After messing around with an ethernet cable, a friend's laptop and computer-to-computer WiFi connections, I decided to leave the option of connecting to another machine, and instead run a VM on my machine. I already had QEMU installed, but had never figured out how to use it. The next day, I downloaded an Ubuntu 20.04 server image from online, only to find out that &lt;a href="https://stackoverflow.com/questions/29137679/login-credentials-of-ubuntu-cloud-server-image"&gt;it doesn't have a default password&lt;/a&gt;, and an ISO containing login credentials had to be booted with the image to allow you to login, &lt;em&gt;and that too only via SSH&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Noped out of that pretty quick. I then downloaded a Manjaro&lt;sup&gt;&lt;a href="#footnote-3"&gt;3&lt;/a&gt;&lt;/sup&gt; image, and installed and ran that painlessly. &lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="qemu" src="res/qemu_vm_2.png"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;QEMU is a charm: it barely uses any CPU while idling, and boots lightning fast. Forwarding an SSH port to it is also very easy. Will probably play around with more exotic machines on qemu, but that's for another post :)&lt;/p&gt;
&lt;p&gt;With access to a linux machine, there were two choices:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use a compatiability layer to get kqueue functionality: libkqueue, as previously mentioned, hadn't worked on an ubuntu machine because of an old version (a fact I didn't know till then)&lt;/li&gt;
&lt;li&gt;Write an epoll implementation of my abstracted event queue&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I really didn't want to do (2), but it looked like there was no choice. I decided to give libkqueue a final chance on linux, and since it was not available on manjaro default repositories, I downloaded and compiled from source.&lt;/p&gt;
&lt;p&gt;And it worked! I had to link the library with &lt;code&gt;-lkqueue&lt;/code&gt; and &lt;code&gt;-lpthread&lt;/code&gt;, so made some linux-specific flags for that. I can now see why &lt;code&gt;cmake&lt;/code&gt; is such a popular build tool, as this os-dependent complexity would only increase with more modules&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;ifneq ($(OS),Windows_NT)&lt;/span&gt;
    uname_os :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;shell uname&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="cp"&gt;    ifneq ($(uname_os),Darwin)&lt;/span&gt;
        &lt;span class="nv"&gt;CPPFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; -I/usr/include/kqueue
        &lt;span class="nv"&gt;LFLAGS&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; -lkqueue -lpthread
&lt;span class="cp"&gt;    endif&lt;/span&gt;
&lt;span class="cp"&gt;endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Day Six&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;And God said, &lt;strong&gt;"Let there be a client manager to spawn clients, so that I may be absolved of the burden of testing"&lt;/strong&gt;, and it was so. God crafted a client manager using threads, and did the server benchmarks, and he saw that they were good.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This (and benchmarking) were boring but rewarding. For starters, a few changes had to be made in the protocol to make it a bit more reliable, and then some bookkeeping code had to be written for clients so that they could save their packet request round trip times to files, and also be called independently and run on separate threads. Once that was done, I created a client manager that took care of spawning a bunch of clients and making requests to the server&lt;/p&gt;
&lt;p&gt;The load benchmarks were great, for small files. For large files, I was transferring around 50kb/sec to 50 clients each, on my machine. Note that if you simulate a large number of clients, your server CPU allocation will be disproportionate to the number of clients: for a 100 clients, my server was using only 3-4% of the processor, while the clients were using ~90%. Something to keep an eye out for. Or just use a more powerful machine with more cores while simulating.&lt;/p&gt;
&lt;p&gt;Here are some numbers. For context, A2_small_file.txt is a 100kB text file.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="times" src="res/time_clients.svg"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Day Seven&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Thus, the clients and server were completed in all their vast array, so on the seventh day, God rested from all his work. Then God &lt;strike&gt;Blessed the seventh day and made it holy&lt;/strike&gt; &lt;em&gt;Cursed himself for having spent so much time on one assignment, when there were four more to do, and minors would begin in a week&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you felt like this article was too fast, or too poorly written, you now know why :')&lt;/p&gt;
&lt;p&gt;&lt;strike&gt;Since the assignment deadline is still not over, I've consciously not divulged many specifics. Will probably release a follow-up on the protocol and client-server design itself later on.&lt;/strike&gt; Update: you can play with the code &lt;a href="https://github.com/Aniruddha-Deb/trickle"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;&lt;sup id="footnote-1"&gt;1&lt;/sup&gt; &lt;code&gt;select&lt;/code&gt; can handle only 1024 events, and is linear in time, which makes it a very bad choice. More modern implementations use kqueue(BSD/macOS), epoll(Linux) or IOCP(Windows). A cross-platform option is to use &lt;a href="https://libevent.org/"&gt;libevent&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-2"&gt;2&lt;/sup&gt; &lt;code&gt;recv&lt;/code&gt; will block (wait until there are nonzero bytes in the read buffer) if the socket is blocking, and will read atmost &lt;code&gt;len&lt;/code&gt; bytes to &lt;code&gt;buf&lt;/code&gt; (the number of bytes read are returned by the syscall). If the socket is non-blocking, &lt;code&gt;recv&lt;/code&gt; may return 0 if there's nothing in the buffer to read. Note that if a blocking &lt;code&gt;recv&lt;/code&gt; returns 0, it means that the connection has been disconnected (why? Don't really know, but I guess it's because there's an EOF residing in the buffer, sent by the other party, up to which &lt;code&gt;recv&lt;/code&gt; reads, and then there's nothing left to read but the EOF).&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-3"&gt;3&lt;/sup&gt; Tired of all the *buntu distros, and had experience with arch (loved the rolling distro functionality), so needed an arch experience with minimal effort.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Systems"></category></entry><entry><title>A Simple Sudoku Solver</title><link href="https://aniruddhadeb.com/articles/2022/simple-sudoku-solver.html" rel="alternate"></link><published>2022-09-03T17:00:00+05:30</published><updated>2022-09-03T17:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-09-03:/articles/2022/simple-sudoku-solver.html</id><summary type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;The problem is a simple search problem: given a partially filled sudoku board, return a fully filled sudoku board with the initial numbers in place such that each digit features only once in every row, column and 3x3 subgrid.&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;These problems, in general, are called &lt;a href="https://en.wikipedia.org/wiki/Constraint_satisfaction_problem"&gt;Constraint â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;The problem is a simple search problem: given a partially filled sudoku board, return a fully filled sudoku board with the initial numbers in place such that each digit features only once in every row, column and 3x3 subgrid.&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;These problems, in general, are called &lt;a href="https://en.wikipedia.org/wiki/Constraint_satisfaction_problem"&gt;Constraint Satisfaction Problems&lt;/a&gt;. Given a set of constraints, find a valid solution which satisfies all the constraints.&lt;/p&gt;
&lt;p&gt;A CSP is generally represented as a graph, with each variable as a node and a constraint between two variables as an edge. &lt;a href="https://en.wikipedia.org/wiki/Sudoku_graph"&gt;Sudoku Graphs&lt;/a&gt; are well-studied, and here's an example of a 9x9 one (courtesy &lt;a href="https://www.researchgate.net/figure/b-Graph-coloring-of-Sudoku_fig9_311668725"&gt;Artacho and Campoy&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="sudoku_graph" src="https://www.researchgate.net/profile/Ruben-Campoy/publication/311668725/figure/fig9/AS:439849451823105@1481879689246/b-Graph-coloring-of-Sudoku.png"&gt;&lt;/p&gt;
&lt;p&gt;This gives us a nice formulation, and allows us to search for a solution on this graph using backtracking search (Pseudocode courtesy &lt;a href="https://www.cse.iitd.ac.in/~rohanpaul/teaching/data/2022-COL333/L06-Constraint-Satisfaction.pdf"&gt;Rohan Paul's Slides&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="csp_bts" src="res/backtracking_search_pseudocode.png"&gt;&lt;/p&gt;
&lt;p&gt;The two key algorithmic decisions to make here are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In what order do we select unassigned variables&lt;/li&gt;
&lt;li&gt;In what order do we assign values to the unassigned variable chosen?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is the crux of the functions &lt;code&gt;select-unassigned-variable&lt;/code&gt; and &lt;code&gt;order-domain-values&lt;/code&gt;. Thinking about it a bit more:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We want to first fill the variables whose values we already know: the ones which have only one possible value ie are fully constrained. This is designed to fail fast, and will make the search go quicker. Hence, the ordering here should be &lt;strong&gt;choose the most constrained variable&lt;/strong&gt;. &lt;ul&gt;
&lt;li&gt;Note that among variables with the same number of constraints, to break ties, we'd choose the variable &lt;strong&gt;with the greatest degree&lt;/strong&gt;, however for sudoku all the vertices have the same degree so it doesn't really matter.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We want to fill the values that are the least used in the board first, that is, the most likely values (that would rule out the fewest values in the remaining variables). We want to fail last while making this assignment, so we choose &lt;strong&gt;The most likely variable&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are a few more optimizations, such as forward checking, but for a simple sudoku solver, these should be sufficient.&lt;/p&gt;
&lt;h2&gt;The Implementation&lt;/h2&gt;
&lt;p&gt;With the algorithm in mind, I cooked up a quick implementation in C++. I used the following bitboard structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Sudoku bitboard:&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;board_t&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;324&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;n_set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;board_t&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;n_set&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This structure makes checks constant time, and since we're having a mutable bitboard, size isn't really an issue (this clocks in at ~600 bytes). &lt;/p&gt;
&lt;p&gt;The core backtracking algorithm itself looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board_t&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;


    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n_set&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//std::cout &amp;lt;&amp;lt; (int)b.n_set &amp;lt;&amp;lt; std::endl;&lt;/span&gt;
    &lt;span class="c1"&gt;// choose the most constrained cell c in b&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mcc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_mcc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// I think this takes the most time now...&lt;/span&gt;
                          &lt;span class="c1"&gt;// atleast 729 ops.&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mcc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mcc&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// move ordering... fail last&lt;/span&gt;
    &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nl"&gt;m&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;solved&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solved&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The only issue? It's &lt;em&gt;slow&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;The Performance&lt;/h2&gt;
&lt;p&gt;Initially, I was mighty pleased with myself for creating such a nice solver: it solved &lt;a href="https://www.sudokuwiki.org/sudoku.htm?bd=800000000003600000070090200050007000000045700000100030001000068008500010090000400"&gt;Arto Inkala's Unsolvable Sudoku&lt;/a&gt; in less than a second, as well as &lt;a href="https://www.sudokuwiki.org/Weekly_Sudoku.asp?puz=28"&gt;#28&lt;/a&gt; of the unsolveable sudoku puzzles in less than two seconds. &lt;/p&gt;
&lt;p&gt;Then I saw how sudoku solver benchmarks are actually done&lt;/p&gt;
&lt;h2&gt;State of the art&lt;/h2&gt;
&lt;p&gt;Currently, this is &lt;a href="https://t-dillon.github.io/tdoku/"&gt;tdoku&lt;/a&gt;. Beautifully written and explained, tdoku takes &lt;strong&gt;41.7 us&lt;/strong&gt; on average for very difficult puzzles with Sudoku Explainer ratings of 11 or higher&lt;/p&gt;
&lt;p&gt;And mine?&lt;/p&gt;
&lt;p&gt;300,000 us&lt;/p&gt;
&lt;p&gt;Yep.&lt;/p&gt;
&lt;p&gt;From an instant to an eternity. Well, atleast there's still a long way to go! I had to limit my solver to solve only a hundred puzzles from the same dataset, otherwise it wouldn't terminate. &lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is by no means a conclusive solver: there are still a lot of optimizations I can make, such as faster move generation and some SIMD stuff to make checks faster, but I think I'll get to those later. Now, the tree search would need to be optimized first. &lt;/p&gt;
&lt;p&gt;This was hacked up in ~3 hours, and you can find the entire code &lt;a href="https://gist.github.com/Aniruddha-Deb/45055de874701009525de9d04e044382"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Happy sudoku solving!&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>Variance Estimation in Heteroscedastic Regression</title><link href="https://aniruddhadeb.com/articles/2022/heteroscedastic-variance-estimation.html" rel="alternate"></link><published>2022-08-29T18:00:00+05:30</published><updated>2022-08-29T18:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-08-29:/articles/2022/heteroscedastic-variance-estimation.html</id><summary type="html">&lt;p&gt;Most of the times, the regression models we need to fit don't have a constant standard deviation, but rather one that is some function of $x$. In this article, I try to learn a model with variance varying linearly as a function of x: kind of like a &lt;em&gt;regression on variance&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Most linear regression models assume &lt;/p&gt;
&lt;p&gt;$$y^{i} \approx \mathcal{N}(\theta^T x^{i}, \sigma^2)$$&lt;/p&gt;
&lt;p&gt;The standard closed form for this, obtained via finding the MLE estimate, gives $(X^T X)^{-1} X^T Y$, where $X$ is the example matrix of shape $(m,n)$ and $Y$ is the label vector of shape $(n,1)$. Note that $m$ is the number of training examples and $n$ is the number of features.&lt;/p&gt;
&lt;p&gt;However, the variance need not always be constant. Consider a model where the variance is varying linearly (or rather just increasing) with $x$: an example would be the &lt;a href="https://www.kaggle.com/code/chanakyavivekkapoor/house-price-prediction"&gt;House prices dataset&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" src="res/house_prices.png"&gt;&lt;/p&gt;
&lt;p&gt;While there are feature transformations that would make this less heteroscedastic, this article focuses on learning the variance parameters, so along with our regression estimate, we can provide a variance estimate as well&lt;/p&gt;
&lt;h2&gt;The Model&lt;/h2&gt;
&lt;p&gt;We assume that the &lt;strong&gt;standard deviation&lt;/strong&gt; (not variance) is a linear function of $x$&lt;/p&gt;
&lt;p&gt;$$y^{i} \approx \mathcal{N}(\theta_m^T x^{i}, (\theta_v^T x^{i})^2)$$&lt;/p&gt;
&lt;p&gt;The log-likelihood function is hence&lt;/p&gt;
&lt;p&gt;$$\mathcal{LL}(\theta_m, \theta_v) = -\frac{m}{2} \log 2\pi - \sum_{i=1}^m \log \theta_v^T x^{i} - \frac{1}{2} \sum_{i=1}^m \frac{(y^{i} - \theta_m^T x^{i})^2}{(\theta_v^T x^{i})^2}$$&lt;/p&gt;
&lt;p&gt;Differentiating with respect to $\theta_v$ gives us the gradient for $\theta_v$:&lt;/p&gt;
&lt;p&gt;$$\frac{\partial \mathcal{LL}}{\partial \theta_v} = - \sum_{i=1}^m \frac{x^{i}}{\theta_v^T x^{i}} + \sum_{i=1}^m x^{i} \frac{(y^{i} - \theta_m^T x^{i})^2}{(\theta_v^T x^{i})^3}$$&lt;/p&gt;
&lt;p&gt;Rearranging this gives us, in a matrix form,&lt;/p&gt;
&lt;p&gt;$$\frac{\partial \mathcal{LL}}{\partial \theta_v}= X^T \left( \frac{E^2 - S^2}{S^3} \right)$$&lt;/p&gt;
&lt;p&gt;Where $X$ is our example matrix, $E$ is the sum of squared error vector and $S$ is the standard deviation vector. This is a nice, concise form that we can use in our code. However, because of the $V$ term in the denominator, &lt;strong&gt;I couldn't obtain a closed form for this, and had to do gradient descent on the parameters&lt;/strong&gt;. Even getting into second derivative methods was getting a bit tedious. If you do find a closed form, let me know :)&lt;/p&gt;
&lt;p&gt;The derivative with respect to $\theta_m$ is pretty standard: we get&lt;/p&gt;
&lt;p&gt;$$\frac{\partial \mathcal{LL}}{\partial \theta_m} = \sum_{i=1}^m x^{i} \frac{(y^{i} - \theta_m^T x^{i})}{(\theta_v^T x^{i})^2}$$&lt;/p&gt;
&lt;h2&gt;An Implementation&lt;/h2&gt;
&lt;p&gt;Implementation was fairly straightforward, using gradient descent, and it converged nicely to some generated data&lt;/p&gt;
&lt;p&gt;&lt;img alt="hetero_model" src="res/hetero_sd_model.png"&gt;&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Machine Learning"></category></entry><entry><title>The Rise of the Codefluencer</title><link href="https://aniruddhadeb.com/articles/2022/rise-of-codefluencer.html" rel="alternate"></link><published>2022-08-20T17:00:00+05:30</published><updated>2022-08-20T17:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-08-20:/articles/2022/rise-of-codefluencer.html</id><summary type="html">&lt;p&gt;My Thoughts on Web Development, Programming Influencers/tutors and the portrayal of programming as a lavish dream rather than providing a careful solution to complex problems, bit by bit.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Not an opinion piece, but an opinion piece. If it matters; what weight do the opinions of a twentysomething university student have on a trillion-dollar industry? This'll probably be something I'll look back at in twenty years and chuckle at my hotheadedness (if I'm alive after twenty years and have not evaporated due to climate change)&lt;/p&gt;
&lt;h2&gt;Web Development, to an outsider&lt;/h2&gt;
&lt;p&gt;I recently had to develop a small platform to keep track of my investments. As luck would have it, I want this to be cross-platform, run in the background and send alerts to me on certain triggers. Which means No Desktop apps: XCode is out of the question because I don't have much expertise in swift, and I hopped off the Java bandwagon a long time ago. Most importantly, my laptop won't be running 24x7. So, create a python utility and a cron job, and run it? Sure, but I'd need a way to look at my portfolio as well, which doesn't involve a curses-based TUI. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;sigh. You can probably tell where this is going.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="aaaaaaaa" src="res/frontend-spaghetti-monster.png"&gt;&lt;/p&gt;
&lt;p&gt;Yep. We're finally doing WebDev. &lt;/p&gt;
&lt;h3&gt;The descent into darkness&lt;/h3&gt;
&lt;p&gt;I know the bare minimum about frontend frameworks (maybe a bit more conceptually), but have 0 practical experience. All my frontend so far has been bare HTML/CSS/JS, raw DOM manipulation, JS classes and no components (I felt the pinch a bit &lt;a href="https://github.com/Aniruddha-Deb/RubiksCube"&gt;In my previous project&lt;/a&gt;, but made do without it). This time though, I had to make a large Single Page Application&lt;sup&gt;&lt;a href="#footnote-1"&gt;1&lt;/a&gt;&lt;/sup&gt; and component-wise design would be crucial.&lt;/p&gt;
&lt;p&gt;I picked up &lt;a href="https://vuejs.org"&gt;Vue&lt;/a&gt;, and credit where it's due, Vue is probably the most beginner-friendly framework: good documentation, great conceptual clarity and nice examples. I'm good with &lt;a href="https://flask.palletsprojects.com/en/2.2.x/"&gt;Flask&lt;/a&gt; as well, and it was easy to do some groundwork and housekeeping and set up a basic system supporting configuration, logging and authentication on the backend and routing and a couple views on the frontend&lt;sup&gt;&lt;a href="#footnote-2"&gt;2&lt;/a&gt;&lt;/sup&gt;. Also, the Flask and Vite development servers run on different ports, so had to set up a reverse proxy on the Vite server to redirect API traffic to flask, which made it very &lt;em&gt;clean&lt;/em&gt; to run in debug mode, with both hot-reloading ^_^. The next day (today), I added some CSS using &lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt;, along with a login and registration page. &lt;/p&gt;
&lt;p&gt;With this done, the problems left to solve are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connecting to my broker, getting quotes every 5 minutes and updating the database&lt;/li&gt;
&lt;li&gt;Creating a Pivot Table component from scratch to sum up the securities and all the transactions that have occured&lt;/li&gt;
&lt;li&gt;Packaging and deploying to a remote server (maybe heroku?)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are still not &lt;em&gt;core&lt;/em&gt; engineering problems, and I probably will run into some when I work on making the daemon, and interfacing it with Flask and the DB. However, these are still more complicated than everything I've set up so far.&lt;/p&gt;
&lt;p&gt;Seems simple enough, right? So where's the disappointment?&lt;/p&gt;
&lt;h2&gt;Willy Wonka's Chocolate Factory&lt;/h2&gt;
&lt;p&gt;I simplified the description of the framework picking process &lt;strong&gt;by a huge margin&lt;/strong&gt;. A simple google search for &lt;code&gt;frontend framework&lt;/code&gt; returns 6 different sites&lt;sup&gt;&lt;a href="#footnote-3"&gt;3&lt;/a&gt;&lt;/sup&gt; all listing the same top 10 (or 15) frontend frameworks, which are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;li&gt;Angular&lt;/li&gt;
&lt;li&gt;Backbone&lt;/li&gt;
&lt;li&gt;Bootstrap&lt;/li&gt;
&lt;li&gt;Foundation&lt;/li&gt;
&lt;li&gt;Svelte&lt;/li&gt;
&lt;li&gt;Elm&lt;/li&gt;
&lt;li&gt;Ember&lt;/li&gt;
&lt;li&gt;jQuery (yes, jQuery)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here's the catch: all of them are used on the frontend in the same way, but it's the equivalent of googling &lt;em&gt;fruits&lt;/em&gt; and getting a list that says &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Banana&lt;/li&gt;
&lt;li&gt;Watermelon&lt;/li&gt;
&lt;li&gt;Tomato&lt;/li&gt;
&lt;li&gt;Cauliflower&lt;/li&gt;
&lt;li&gt;Strawberry&lt;/li&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;li&gt;Potato&lt;/li&gt;
&lt;li&gt;Sweet Potato&lt;/li&gt;
&lt;li&gt;Cucumber&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Get the point? Half of these aren't even fruits!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Svelte and Elm are compilers: you write code in their own Domain Specific Language (Svelte is pretty similar to JS, Elm is functional and actually quite nice on it's own, but too much of a toy to use in anything serious because it's a pain in the ass to interface with other JS libraries), and the compiler will compile it to JS. That's how these tout their &lt;em&gt;speed&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Backbone seems to be doing something completely different and minimalistic: it still implements a MVC, but in a radically different way to how everyone else seems to be doing it&lt;/li&gt;
&lt;li&gt;jQuery is raw DOM manipulation, just a bit simpler, and &lt;em&gt;very&lt;/em&gt; antiquated: it used to be all the rage back in the late 2000's. &lt;code&gt;$&lt;/code&gt; has now been relegated to the same scrap heap where PHP&lt;sup&gt;&lt;a href="#footnote-4"&gt;4&lt;/a&gt;&lt;/sup&gt; and Microsoft Clippy reside.&lt;/li&gt;
&lt;li&gt;Bootstrap and Foundation aren't even full-fledged DOM manipulators, they just provide a set of components that you have to link together manually. Bootstrap started off as a plain CSS tool, and their components also feel like simple CSS trinkets rather than actual, extendable resources&lt;/li&gt;
&lt;li&gt;Finally, React, Vue, Angular and Ember are all virtual DOM manipulators: they maintain a virtual DOM, diff it with the real DOM when the elements in question have changed and render it to the screen. They com&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is just the tip of the iceberg! WebDev today is a hodgepodge of different tools, different best practices and different, but very similar ways of solving the exact same problem! There is conceptually zero difference between what React, Vue, Angular and Ember do, but all of them have their own opinionated best practices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React uses JSX, which is an absolute eyesore: who at Facebook looked at HTML and JS and thought, 'let's convince them to have a baby!' Tywin Lannister would be proud.&lt;/li&gt;
&lt;li&gt;Angular and Vue use their own templating languages, which makes them not much different from react&lt;/li&gt;
&lt;li&gt;Ember.. I have no idea what ember does, but the only thing I've heard is that it has a very steep learning curve.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This gives rise to an entire army of touts whose livelihood is based on writing articles such as &lt;a href="https://blog.cloudboost.io/why-react-is-better-than-vue-js-and-when-9545049652d8"&gt;Why React is better than Vue&lt;/a&gt;&lt;sup&gt;&lt;a href="#footnote-5"&gt;5&lt;/a&gt;&lt;/sup&gt;, or &lt;a href="https://aniruddhadeb.com/articles/2022/rise-of-codefluencer.html"&gt;Why Frontend Development is a Mess&lt;/a&gt;&lt;sup&gt;&lt;a href="#footnote-6"&gt;6&lt;/a&gt;&lt;/sup&gt;. Every single article of theirs must include the obligatory Google Search Trends snap, showing how &lt;em&gt;Oh, the framework we're touting is the best!&lt;/em&gt; or how &lt;em&gt;Oh, look at this mess! Deplorable!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="search_trends" src="res/trends.png"&gt;&lt;/p&gt;
&lt;p&gt;Jokes aside, let's talk about NPM. Oh, NPM!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No wonder NPM is the largest package manager: it just shows that Frontend Developers are terrible at making stable, reliable software that everyone uses and are more interested at reinventing the wheel.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A reasonable conclusion I've come to is that the entire NPM ecosystem is focused on adding as many tools as they need to make frontend development as easy as possible, up to the point where all you need to type is a single character, and voilÃ ! A wild webapp magically appears!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sass, Less and SCSS all make their OWN DSL and implement their OWN compiler, rather than just submitting these feature requests to the core CSS spec and improving the already existing language. Do we really need more than three &lt;em&gt;stylesheet languages?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;I've already spoken about JSX, but you have so many other templating engines/DSL's: Mustache, handlebars, Nunjucks, Haml&lt;/li&gt;
&lt;li&gt;Let's not get started on the army of transpilers and tools for JavaScript: ASM, Babel, Opal, CoffeeScript, TypeScript. Why not change the language in the first place? And why are there &lt;em&gt;so many&lt;/em&gt; build tools for JS: ESLint, grunt, browserify, parcel, yarn, webpack and the list goes on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these are reinventing the wheel, just differently: there's a 58-sided wheel, a 60-sided wheel which is marginally smoother than the 58-sided wheel, and then the 67-sided wheel, which because of it's &lt;em&gt;odd-number of sides, is currently the best wheel library you can use!&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;When will JavaScript devs finally roll out a simple, circular wheel, and get the entire community to stick to it? Python tools such as pip, virtualenv, pyenv, wheel come to mind: simple, reliable and used by the entire community. It's a shame such a vibrant, hyped and far-reaching development platform is bogged down by the disunity of people who think their framework will the one to unify all.&lt;/p&gt;
&lt;h2&gt;The Rise of the CodeFluencers&lt;/h2&gt;
&lt;p&gt;This leads to a hude secondary market: this was going to be the main topic of this article, but I'm too exhausted at this point to write much. TL;DR: if there are 10 widely used tools used at different stages of the process (say React, Sass, Babel, Vite, Redux etc), each having say ten million people wanting to learn them, then you can sell a course for $10 for each of them (assuming you're a good JS Dev and know them all) and suddenly, you're a billionaire. &lt;/p&gt;
&lt;p&gt;Unfortunately, everyone has the same idea, so the market is now saturated with these cheap courses and hacky articles, all with absurd taglines promoting some ideal such as 'become a better developer', or even better, 'get that super-cool frontend job at XYZ, just like K who took our course! Only for $10'. It's a shame, because the official documentation for some of these libraries is absolutely immaculate. The only issue arises when there's a small nuance you haven't figured out (see &lt;sup&gt;&lt;a href="#footnote-2"&gt;2&lt;/a&gt;&lt;/sup&gt;), and with no hits on StackOverflow, the only article that claims to solve it is behind a paywall, or even worse, &lt;em&gt;you've exhausted your 2 free articles on Medium for this month&lt;/em&gt;, and can't read it. Medium merits it's own blogpost, but the long and short of it is that this entire thing is a mess, and people are making money off of it.&lt;/p&gt;
&lt;h2&gt;What Next?&lt;/h2&gt;
&lt;p&gt;I think that the apparent simplicity I spoke about, that all frontend devs are trying to reach via their libraries, is to abstract away the engineering complexities that newbie frontend devs would encounter when dealing with scale behind a black box, and ship a thousand such black boxes to solve all such possible problems that may come up. No wonder some of these frontend projects touch around a gigabyte on disk. This also puts 'Self-taught Frontend Developers' in a negative light: it's a bit like a mechanic having a robot that fixes their engine for them, and if there are newer engines with more complex problems, all the mechanic needs to do is &lt;code&gt;npm update&lt;/code&gt;, and they're good to go! There's a big difference between these self-taught mechanics using the npm robot, and actual mechanical engineers who've struggled through a thermodynamics class: one of them will be designing the next big engine, while the other will probably be fixing engines all their life.&lt;sup&gt;&lt;a href="#footnote-7"&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;Hyperlinking to footnotes was suggested by an anon reader of my blog, and it's a bit high-effort, but seems to have come out nicely!&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-1"&gt;1&lt;/sup&gt; A &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;Single Page Application&lt;/a&gt; is an application that doesn't have any redirects: instead, it dynamically rewrites the web page, making it feel more like a conventional desktop application&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-2"&gt;2&lt;/sup&gt; Not before banging my head with some stupid things: you can't modify a ref, and you have to mark things whose state changes as reactive, for the virtual DOM to pick up the updates and update the real DOM.&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-3"&gt;3&lt;/sup&gt; See &lt;a href="https://technostacks.com/blog/best-frontend-frameworks/"&gt;1&lt;/a&gt;, &lt;a href="https://www.simform.com/blog/best-frontend-frameworks/"&gt;2&lt;/a&gt;, &lt;a href="https://www.sam-solutions.com/blog/best-frontend-framework/"&gt;3&lt;/a&gt;, &lt;a href="https://www.knowledgehut.com/blog/web-development/front-end-development-frameworks"&gt;4&lt;/a&gt;, &lt;a href="https://www.enprowess.com/blogs/top-frontend-frameworks/"&gt;5&lt;/a&gt;, &lt;a href="https://www.toptal.com/javascript/choosing-best-front-end-framework"&gt;6&lt;/a&gt; (The last one is from toptal, and is actually good advice, but &lt;em&gt;why is it #6 on my google search result list then?&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-4"&gt;4&lt;/sup&gt; Yes, I know &lt;a href="https://w3techs.com/technologies/history_overview/programming_language"&gt;more than 75% of the web uses PHP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-5"&gt;5&lt;/sup&gt; Okay, this was actually a pretty nice article :P but you get my point&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-6"&gt;6&lt;/sup&gt; Humour is when the joke's on you but hits the other fellow first - before it boomerangs ~ Langston Hughes&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-7"&gt;7&lt;/sup&gt; Bad example, as we'll all probably be driving EV's soon&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>The Arch Linux Journey</title><link href="https://aniruddhadeb.com/articles/2022/arch-linux-1.html" rel="alternate"></link><published>2022-08-07T15:30:00+05:30</published><updated>2022-08-07T15:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-08-07:/articles/2022/arch-linux-1.html</id><summary type="html">&lt;p&gt;For the upcoming semesters, we have a ton of systems courses. So, I needed a linux box that I could hack around, preferably at the kernel level. I finally got around to installing Arch Linux on a Raspberry Pi&lt;sup&gt;1&lt;/sup&gt;: Here's how I did it.&lt;/p&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;For starters, I already â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the upcoming semesters, we have a ton of systems courses. So, I needed a linux box that I could hack around, preferably at the kernel level. I finally got around to installing Arch Linux on a Raspberry Pi&lt;sup&gt;1&lt;/sup&gt;: Here's how I did it.&lt;/p&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;For starters, I already use linux/unix systems quite a bit. The real need for a linux system became apparent last semester, when one of our courses needed a program that would run only on Windows/Ubuntu. I got around this by running a VM on my 6 year old, 128GB mac &lt;em&gt;sobs&lt;/em&gt;. While definetly a suboptimal solution, for the upcoming courses (networks, parallel programming, OS), a core linux machine would be a neccessity.&lt;/p&gt;
&lt;p&gt;Before you pick up your pitchforks, yes, RPi is ARM based: I know this is a completely different ballgame from CISC i386/x86-64 processors, which is also partly the reason I wanted linux on an ARM machine: we did ARM assembly in the previous course, so that'll make this easier? &lt;sub&gt;idk I'm bad at CS&lt;/sub&gt;&lt;/p&gt;
&lt;h2&gt;Baby Steps&lt;/h2&gt;
&lt;p&gt;&lt;img alt="arch_baby" src="res/bcd.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;So why arch?&lt;sup&gt;2&lt;/sup&gt; Well, the biggest reason is &lt;strong&gt;learning&lt;/strong&gt;: learning to setup arch and use it would teach me more about UNIX fundamentals than using a prebuilt OS. And in the span of less than half a day, I've used atleast 6 utilities I've never seen or heard of before. So yeah, if you enjoy the hike a steep learning curve gives you, arch is perfect.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;Installation was fairly straightforward: NOOBS doesn't ship with an option to get arch, so &lt;a href="https://github.com/procount/pinn"&gt;PINN&lt;/a&gt; was used. Remember to download it from GitHub rather than from SourceForge: SourceForge mirrors are garbage, while the GitHub one downloads in under a minute.&lt;/p&gt;
&lt;p&gt;After getting PINN, just point-and-click to install arch.&lt;/p&gt;
&lt;p&gt;And that's it!&lt;/p&gt;
&lt;h2&gt;Btw I use arch&lt;/h2&gt;
&lt;p&gt;Ok, I lied. Arch ships with nothing, and I mean &lt;em&gt;nothing&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No windowing server&lt;/li&gt;
&lt;li&gt;No desktop environment (by extension)&lt;/li&gt;
&lt;li&gt;No setup screen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these are forgiveable (and quite common on server distros), but then we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No man pages. Seriously?&lt;/li&gt;
&lt;li&gt;No &lt;code&gt;sudo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;No keychains set up&lt;/li&gt;
&lt;li&gt;No drivers for Bluetooth, or Wifi set up&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fortunately, the ARM arch ships with a few more things: &lt;code&gt;netctl&lt;/code&gt;, &lt;code&gt;X11&lt;/code&gt;, and wifi drivers. And a SSH server running by default. The best way of setting up is to connect to your router via ethernet, then do an &lt;code&gt;arp-scan --localnet&lt;/code&gt; (on mac, install with &lt;code&gt;brew install arp-scan&lt;/code&gt;) to find the ip, ssh on, and get rolling (default user &lt;code&gt;alarm&lt;/code&gt;, password &lt;code&gt;alarm&lt;/code&gt; and root password is just &lt;code&gt;root&lt;/code&gt;)&lt;/p&gt;
&lt;h3&gt;Connecting and basics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Plug in your Pi to ethernet, and use your WiFi router settings page to see all connected devices. From there, note down your pi's IP and ssh on to it. &lt;/li&gt;
&lt;li&gt;use &lt;code&gt;timedatectl&lt;/code&gt; to see if the system clock is accurate:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;timedatectl set-ntp true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;use &lt;code&gt;timedatectl status&lt;/code&gt; for information.
- Set up the timezone:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime&lt;/span&gt;
&lt;span class="err"&gt;hwclock --systohc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;generating locales: edit &lt;code&gt;/etc/locale.gen&lt;/code&gt; and uncomment &lt;code&gt;en_US.UTF-8&lt;/code&gt;. Generate locales by running &lt;code&gt;locale-gen&lt;/code&gt;. Then, create the &lt;code&gt;locale.conf&lt;/code&gt; file and set &lt;code&gt;LANG&lt;/code&gt; appropriately (I set it to &lt;code&gt;en_US.UTF-8&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Edit the hostname from &lt;code&gt;alarmpi&lt;/code&gt; to something better, like &lt;code&gt;senseipi&lt;/code&gt; :)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Setting up &lt;code&gt;pacman&lt;/code&gt; and certificates&lt;/h3&gt;
&lt;p&gt;Now that you're on the pi with a connection, the first thing to do is to setup &lt;code&gt;pacman&lt;/code&gt;. This needs certificates: since Arch is a rolling distro, there's a very rigorous signature process in place for packages, and the system by default won't install packages which are not signed by trusted certificates in the keychain. &lt;/p&gt;
&lt;p&gt;Setting this up on ARM is slightly different compared to a normal arch system (or so I found):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pacman-key --init&lt;/span&gt;
&lt;span class="err"&gt;pacman-key --populate archlinuxarm&lt;/span&gt;
&lt;span class="err"&gt;pacman-key --refresh-keys&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After that, &lt;code&gt;pacman -Syy&lt;/code&gt; and &lt;code&gt;pacman -S archlinux-keyring&lt;/code&gt;. Will install a couple dependencies as well.&lt;/p&gt;
&lt;p&gt;You're now ready to run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pacman -Syu&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to update and upgrade everything on your system.&lt;/p&gt;
&lt;h3&gt;Wifi setup&lt;/h3&gt;
&lt;p&gt;Just use &lt;code&gt;wifi-menu&lt;/code&gt;, don't bother with anything more complicated. You'll also need to create a service to start wifi automatically on boot, by doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;systemctl enable wpa_supplicant@wlan0&lt;/span&gt;
&lt;span class="err"&gt;systemctl start wpa_supplicant@wlan0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After this and rebooting, I was able to ssh onto my pi, by connecting it to my mobile hotspot. This is still my primary means of using my Pi. One important thing to note: &lt;strong&gt;Don't try switching to NetworkManager without a working display and ethernet connection&lt;/strong&gt;. I tried doing this, only to blow the network setup on my Pi, because once you set up the NetworkManager service, it would take over &lt;code&gt;wlan0&lt;/code&gt; on boot and because it didn't know the wifi configuration, it would never connect to the network, so I couldn't SSH/VNC onto it. After a lot of repeated tries, &lt;code&gt;wpa_supplicant&lt;/code&gt; finally launched before NetworkManager on one boot, allowing me to ssh on and disable NetworkManager for good.&lt;/p&gt;
&lt;h3&gt;Users, &lt;code&gt;sudo&lt;/code&gt; and User Groups&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create your new user&lt;/li&gt;
&lt;li&gt;ssh on as your new user, and su to root&lt;/li&gt;
&lt;li&gt;delete the old user&lt;/li&gt;
&lt;li&gt;install sudo: &lt;code&gt;pacman -S sudo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;visudo&lt;/code&gt; the sudoers file to give the wheel group access to sudo&lt;/li&gt;
&lt;li&gt;add your user to the wheel group&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;id &amp;lt;username&amp;gt;&lt;/code&gt; to verify you're added to the right groups&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Other software&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;utilities: &lt;code&gt;sudo pacman -S man-db man-pages nvim htop tree&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;run &lt;code&gt;mandb&lt;/code&gt; to generate the man database&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export EDITOR=nvim&lt;/code&gt; in your &lt;code&gt;.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;yay&lt;ul&gt;
&lt;li&gt;install git: &lt;code&gt;sudo pacman -S git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to /opt&lt;/li&gt;
&lt;li&gt;clone &lt;a href="https://aur.archlinux.org/yay.git"&gt;https://aur.archlinux.org/yay.git&lt;/a&gt; there&lt;ul&gt;
&lt;li&gt;needed to set a proxy for this: &lt;code&gt;git config --global http.proxy ""&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;chown to our user&lt;/li&gt;
&lt;li&gt;make the package with &lt;code&gt;makepkg -si&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;had to install base-devel for this: &lt;code&gt;sudo pacman -S base-devel&lt;/code&gt; (install everything, most of them are useful)&lt;ul&gt;
&lt;li&gt;go was not installing, surprisingly go-2:1.19-1 was updated on Aug 3 itself and I hadn't done &lt;code&gt;pacman -Syy&lt;/code&gt;Reiterated the importance of keeping my package lists updated in a rolling release distro.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;makepkg&lt;/code&gt; was surprisingly straightforward thereafter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;add colors:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo nvim /etc/pacman.conf&lt;/code&gt;, uncomment the Color line&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GUI stuff&lt;ul&gt;
&lt;li&gt;installing fonts&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yay -S ttf-roboto ttf-opensans ttf-roboto-mono ttf-ubuntu-font-family ttf-dejavu ttf-hack ttf-liberation&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;install Xorg stuff&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yay -S xorg-server xorg-xrefresh&lt;/code&gt; (install libglvnd)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yay -S xorg&lt;/code&gt; (install everything)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yay -S xterm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yay -S xfce4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yay -S arc-gtk-theme arc-icon-theme&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TigerVNC&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yay -S tigervnc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;edit your vnc config and set a vnc password with &lt;code&gt;vncpasswd&lt;/code&gt;, then run &lt;code&gt;vncserver&lt;/code&gt;. Also, add this as a system service so that it starts on boot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;To come&lt;/h2&gt;
&lt;p&gt;Congratulations: if you don't have a working system by now, atleasy you would have enough confidence to take your system in the direction you want to take it now. Here's a snap of how mine looks like after I was done with setup:&lt;/p&gt;
&lt;p&gt;&lt;img alt="arch_setup" src="res/arch_setup.png"&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/installation_guide"&gt;Arch Linux Installation guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/installation_guide"&gt;Arch Linux General Recommendations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/TheZoc/849a82d3eed219998cd82fb4040607ae"&gt;Gist on RPi Arch setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instructables.com/Arch-Linux-on-Raspberry-Pi/"&gt;Instructable on Arch on RPi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Too many arch linux forums threads to count.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; Finally, a tech article! Reading the previous articles, it personally seemed a bit sad that what started out as a STEM blog is now basically me masquerading as Kalpit Veerwal or some armchair IITian celebrity, sans the obnoxious YouTube channel (the most viewed article on this blog is my JEE journey :'( ) This sucks, but is easily changeable. Since I write about what I do, the solution is to just do more tech :P &lt;/p&gt;
&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; In the middle of intern interview season and wrapping up my SURA, only a masochist would do this to himself&lt;/p&gt;</content><category term="Programming"></category><category term="Arch"></category><category term="Programming"></category><category term="Linux"></category></entry><entry><title>Introducing the MLZoo</title><link href="https://aniruddhadeb.com/articles/2022/ml-zoo.html" rel="alternate"></link><published>2022-06-16T17:00:00+05:30</published><updated>2022-06-16T17:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-06-16:/articles/2022/ml-zoo.html</id><summary type="html">&lt;p&gt;After a few days of reading and furious coding, I'm happy to announce the creation of &lt;a href="https://github.com/Aniruddha-Deb/MLZoo"&gt;MLZoo&lt;/a&gt;: a set of ML algorithms in their natural habitat&lt;/p&gt;
&lt;p&gt;MLZoo is a set of jupyter notebooks which would contain implementations of several ML algorithms on real world datasets: so far, I've implemented different â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;After a few days of reading and furious coding, I'm happy to announce the creation of &lt;a href="https://github.com/Aniruddha-Deb/MLZoo"&gt;MLZoo&lt;/a&gt;: a set of ML algorithms in their natural habitat&lt;/p&gt;
&lt;p&gt;MLZoo is a set of jupyter notebooks which would contain implementations of several ML algorithms on real world datasets: so far, I've implemented different flavours of regression, and plan to add quite a few more algorithms over the summer.&lt;/p&gt;
&lt;p&gt;Do star, fork and contribute in any way possible! &lt;/p&gt;
&lt;p&gt;(Hopefully this doesn't end up like MathNotes :fingers_crossed:)&lt;/p&gt;
&lt;p&gt;NOTE: MLZoo has temporarily been taken private. This is because it overlaps with a certain course that I'm doing, and just to be on the safe side, I'll make it public once this is over.&lt;/p&gt;</content><category term="Programming"></category><category term="Python"></category><category term="ML"></category></entry><entry><title>Data Wrangling in Practice: Dataset Creation from Poorly Structured Sources</title><link href="https://aniruddhadeb.com/articles/2022/iit-course-planner-1.html" rel="alternate"></link><published>2022-03-02T01:36:00+05:30</published><updated>2022-03-02T01:36:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-03-02:/articles/2022/iit-course-planner-1.html</id><summary type="html">&lt;p&gt;I seldom get time to do anything other than course related activities nowadays, but in this midsem break, I did nothing other than roam around campus and laze in bed. And publish the first release of the &lt;a href="https://kaggle.com/aniruddhadeb/iitd-course-data"&gt;IIT Delhi Course Planner Dataset&lt;/a&gt; (Also available on &lt;a href="https://github.com/Aniruddha-Deb/IIT_course_planner"&gt;GitHub&lt;/a&gt;). This is a scraping â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I seldom get time to do anything other than course related activities nowadays, but in this midsem break, I did nothing other than roam around campus and laze in bed. And publish the first release of the &lt;a href="https://kaggle.com/aniruddhadeb/iitd-course-data"&gt;IIT Delhi Course Planner Dataset&lt;/a&gt; (Also available on &lt;a href="https://github.com/Aniruddha-Deb/IIT_course_planner"&gt;GitHub&lt;/a&gt;). This is a scraping of the &lt;a href="https://home.iitd.ac.in/uploads/Courses-of-Study_2020-2021.pdf"&gt;IIT Delhi Courses of Study 2020-21&lt;/a&gt;, a behemoth 373-page PDF, which contains the course structure and information of all the Undergraduate and Postgraduate courses offered at IIT Delhi, and then some more. In this article, I show how I went from an inaccessible PDF to a set of nicely formatted XML/CSV datasets that anyone can use to do course analysis on the courses at offer here.&lt;/p&gt;
&lt;h2&gt;Context (for those not at/from/new to IITD)&lt;/h2&gt;
&lt;p&gt;The Academic System at IITD is pretty similar to those followed in other IIT's (except Kanpur): grading is done on a grade point system (10 for an A, 9 for an A- and so on), and your CGPA (Cumulative Grade Point Average) is the average of all your grades across all your courses you have taken up to that point. &lt;/p&gt;
&lt;p&gt;Coming to Programmes: there are 13 Undergraduate Degree Programmes on offer at IIT Delhi (14 if you count Energy Engineering, introduced this year) which span four years and eight semesters, and 3 Dual Degree Programmes (Bachelors and Masters combined), which span 5 years and 10 semesters. Programmes are denoted by a two-letter code representing the departments offering the course, and a number representing the type of course (eg CS1 is B.Tech in Computer Science and Engineering (4y), CS5 is Dual Degree (B.Tech + M.Tech) in Computer Science and Engineering (5y)). Most 4 year degrees are suffixed with 1 (notable exceptions ME2 and EE3, because ME1 and EE1 are already offered by the departments), and the dual degree programmes are CS5, MT6 and CH7 (all greater than or equal to 5).&lt;/p&gt;
&lt;p&gt;Each programme has a number of courses that you NEED to do to graduate: these are referred to as your core courses. They're divided into two: institute core and department core. Institute core is a common set of courses people from every department do, mostly in their first year (exception CVL100 and SBL100), and department core is what makes up the bulk of the remaining three (two?) years of your degree. The rest of your degree is comprised of Humanities and Social Sciences (yes, sad), which you need to do 15 credits worth, and Electives, both departmental (picking electives from your department), and open (picking electives from any department&lt;sup&gt;2&lt;/sup&gt;). If you're in a Dual Degree, your M.Tech degree would have it's own program core (some extra high-level courses and a M.Tech Project) and program electives.&lt;/p&gt;
&lt;p&gt;Here's a relevant snap from the Courses of Study (henceforth referred to as CoS), showing how the courses shape up for MT1 (B.Tech in Mathematics and Computing) and MT6 (Dual Degree in Mathematics and Computing)&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img src="res/creds_mt1.png" style="width: 45%; vertical-align: text-top;"&gt;&lt;/img&gt;
&lt;img src="res/creds_mt6.png" style="width: 45%; vertical-align: text-top;"&gt;&lt;/img&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;We'll be using these abbreviations very commonly across the article (&lt;code&gt;bs&lt;/code&gt;,&lt;code&gt;eas&lt;/code&gt;,&lt;code&gt;huss&lt;/code&gt;,&lt;code&gt;dc&lt;/code&gt;,&lt;code&gt;de&lt;/code&gt;,&lt;code&gt;oc&lt;/code&gt;,&lt;code&gt;pc&lt;/code&gt;,&lt;code&gt;pe&lt;/code&gt;), so this is a good point to mark and come back to. If a lot of this is still unclear, the CoS makes it much clearer than I do. Do give the first few pages of it a read. It's not as boring as expected. Promise. &lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;I've wanted to do this from a long time, but never had the expertise or the effort to see this through. I've had some experience scraping PDF-Tabulated data using Tabula (my &lt;a href="https://www.kaggle.com/aniruddhadeb/jee-2019-data"&gt;JEE 2019 dataset&lt;/a&gt;), but never really gotten farther and analysed the data&lt;sup&gt;1&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The first course of action was to scrape as many courses out as I could from CoS, because that contains course overlap/prerequisite information. The general course description across departments is given from page 156 onwards of CoS, and the way of scraping this was interesting: since the data was unstructured, all I did was copy and paste all the text into sublime text, then use macros to filter out the data and get it into a nice XML format. This took me around two-three hours. I was then able to parse it down using BeautifulSoup into a pandas dataframe, so mission accomplished there. The schema is pretty simple, and here's an example of what a course looks like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;course&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;APL100&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Engineering Mechanics&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;credits&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/credits&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;credit-structure&amp;gt;&lt;/span&gt;3-1-0&lt;span class="nt"&gt;&amp;lt;/credit-structure&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Kinematics, Statics, Equations of Motion, Rigid body dynamics, 
  Introduction to variational mechanics.&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/course&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A question asked here: &lt;strong&gt;Why XML?&lt;/strong&gt; The major reason is that JSON does not play well with newlines, and a lot of the course descriptions had newline characters in them, and I didn't want to go through the mess of cleaning all that up, hence XML. I get that if I just wanted some lists and objects, I should have gone with JSON, but XML being tag-based is very easy to write using sublime multicursor, and also very forgiving with parsers like BeautifulSoup, allowing for messy data to exist and not outright breaking the parser.&lt;/p&gt;
&lt;p&gt;This dataset is what is currently used in &lt;a href="https://github.com/as1605/IITD-Bot"&gt;IITD-Bot's &lt;code&gt;info&lt;/code&gt; command&lt;/a&gt;, and it's nice to see it being used on the server :) &lt;/p&gt;
&lt;h2&gt;The Trickier Bits&lt;/h2&gt;
&lt;p&gt;We now come to the problem of scraping and formatting the individual course plans themselves: &lt;a href="https://tabula.technology/"&gt;Tabula&lt;/a&gt; (specifically &lt;a href="https://tabula-py.readthedocs.io/en/latest/"&gt;TabulaPy&lt;/a&gt;) is the best fit for stuff like this, but the problem here is that &lt;strong&gt;The table boundaries and dimensions across courses are not the same!&lt;/strong&gt; Here's an example, showing two programmes overlapping each other and how the content dimensions/boundaries are not the same across programmes (CS1 and MT1)&lt;/p&gt;
&lt;p&gt;&lt;img alt="CS1xMT1" src="res/overlap_cs1_mt1.png"&gt;&lt;/p&gt;
&lt;p&gt;Even for courses where there is significant overlap, the structures need not be same (consider EE1 and MT1, the first section lines up perfectly, but further sections are a mess: EE1 ends in half the page, while MT fills it up with it's electives)&lt;/p&gt;
&lt;p&gt;&lt;img alt="MT1xEE1" src="res/overlap_mt1_ee1.png"&gt;&lt;/p&gt;
&lt;p&gt;Another issue was that as previously mentioned, Dual Degree course structures have two parts to them: a B.Tech part and an M.Tech part, and scraping them along with the Bachelor degrees would lead to major issues &lt;/p&gt;
&lt;p&gt;&lt;img alt="CS5 example" src="res/cs5.png"&gt;&lt;/p&gt;
&lt;p&gt;As a result, the best option I could come up with was to simply use some python code to generate most of the course structure. The Institute core is common across all courses: the only things that change across courses are PL,DC,DE,credit structure and recommended structure. Out of these, credit structure and recommended structure can be scraped without much pain. PL,DC,DE need to be manually scraped using good 'ol &lt;code&gt;Cmd-C Cmd-V&lt;/code&gt; and edited and pasted using sublime text (multi cursors ftw here). I couldn't come up with a faster way than this due to the nonuniformity of the structure across pages, but it works.&lt;/p&gt;
&lt;p&gt;For dual degrees, I simply duplicated the corresponding single degree and used some helper code to generate the recommended structure, pasted that in and entered the rest using the same sublime ninja techniques as before&lt;/p&gt;
&lt;h2&gt;Course-Sem Mapping and Anonymizing Data&lt;/h2&gt;
&lt;p&gt;While we have the dependencies in place, the last piece of the puzzle is avoiding conflicts while scheduling courses. For this, we need to ask the following two questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is a particular course available in a particular semester?&lt;/li&gt;
&lt;li&gt;If it is, which slot is the course available in?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Answering these two will take us towards a validity checking algorithm for a given course structure. By course structure, we mean an arrangement of courses of the programme in semesters. A valid course structure is one that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Has no course taken whose prerequisites are not satisfied &lt;/li&gt;
&lt;li&gt;Has no course taken in a semester where it is not offered&lt;/li&gt;
&lt;li&gt;Has no course clashing with another course i.e. occuring in the same slot in the same semester as the other course&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For this, we need course slotting and semester data, which the courses of study does not offer. We turn to the eacademics portal of IIT Delhi, which offers a list of courses offered in a given semester, which contains slotting data. While the raw courses offered list can be downloaded in a variety of formats, it needs a &lt;em&gt;lot&lt;/em&gt; of preprocessing to get it fixed. So far, the best option is to download it in xlsx, use a python xlsx library to delete all the extraneous columns in the file and then save it as a CSV. &lt;/p&gt;
&lt;p&gt;We now come to the concern of Privacy. The course list has the names and email addresses of the professors offering the course, and making that data public is not something I should do. As a result, before making the dataset public, the professor data needs to be anonymized. I used faker for this, but was unhappy with how the emails and names don't quite correlate with each other, even while making user profiles. There may be two professors having the same name (eg &lt;a href="https://web.iitd.ac.in/~abhishek.dixit/home.html"&gt;here&lt;/a&gt; and &lt;a href="https://web.iitd.ac.in/~adixit/"&gt;here&lt;/a&gt;), so the key trick is to use the email address prefix, also called the kerberos ID (&lt;code&gt;&amp;lt;id&amp;gt;@&amp;lt;department&amp;gt;.iitd.ac.in&lt;/code&gt;), which is guaranteed to be unique. Once this is done, retain the mapping across sheets and also save a copy of the mapping as a csv (in a private place) so that we can dereference the professors if needed.&lt;/p&gt;
&lt;h2&gt;Final Analysis and Dependency Graph Generation&lt;/h2&gt;
&lt;p&gt;We are now ready to combine the course-offered slotting, the courses of study data (gives us prerequisites), and the course structure (gives us the courses to consider), and create a basic dependency graph.&lt;/p&gt;
&lt;p&gt;The first order of action is to load the CoS course data into XML, and generate a few extra colums so that we know which semster the course is offered in (here, a 3 implies offered in both semesters, a 2 in the even semester only, and a 1 in the odd semester only. 0 implies that it was not offered in either semster in this academic year)&lt;/p&gt;
&lt;p&gt;&lt;img alt="sems" src="res/cos_df_head.png"&gt;&lt;/p&gt;
&lt;p&gt;After this, we read in the course dependency XML files, and generate the dependency graphs using NetworkX and the data in the course dataframe. A generic NetworkX graph does not space the nodes out properly, which is why we use NetworkX and pydot (a python GraphViz API) to generate the final PNG files. The final result, is indeed quite pretty&lt;/p&gt;
&lt;p&gt;&lt;img alt="CS1" src="res/graphs/CS1.png"&gt;&lt;/p&gt;
&lt;h2&gt;What Next?&lt;/h2&gt;
&lt;p&gt;Right now, there are two major gripes relating to conditional support:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Handling complex conditionals for courses&lt;/strong&gt;: The CS1 course structure is a perfect example of this. One can choose either COL333/COL362 in their core, and the other as department elective. We need a way of representing this in the graph, as well as in the XML (what I had in mind was to use an &lt;code&gt;&amp;lt;or&amp;gt;...&amp;lt;/or&amp;gt;&lt;/code&gt; tag, this would work in any setting, and using dotted lines in the graph). The or tag would also be used in the CS1 PL courses (one of MTL103/4/5), because at the moment, the graph shows all three of them as requisite. There are a few other conditionals for CS1 regarding Minor, but we'll get to that later&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conditional expressions&lt;/strong&gt;: Prerequisites often have conditionals such as "ABC123 and any one of BCD142/BCD143/BCD144" or in the case of HUL courses, the condition is "Any two courses from HUL2XX category". Handling conditionals like this both in the dataset as well as in the resulting graph (using dotted arrows or other means) needs to be worked on.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The dataset also doesn't cover all facets of the courses of study:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Minor Dataset Addition&lt;/strong&gt;: Datasets for minors/department specializations need to be added&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Energy Sciences&lt;/strong&gt;: ES1 course data needs to be added. Would be easily fixed by shifting to CoS 21-22 but I'm not sure how many things that would break in the PDF scraping section&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I've hardly mentioned the problems in the existing dataset: there are still a lot of broken tags in the courses XML dataset that need to be ironed out, and not to mention the bugs that exist in the CoS itself (MT1 courses don't sum up to 63.5 credits because some 700 level courses mentioned in the schedule but not in text are missing, and these courses also don't have a description of their content or prerequisites anywhere in CoS).&lt;/p&gt;
&lt;p&gt;The good thing about stating problems out here is &lt;em&gt;We Need Contributors!&lt;/em&gt; If you think you can make a change and help fix those bugs, or even go ahead and do something completely different with all the useful data here, do fork the &lt;a href="https://github.com/Aniruddha-Deb/IIT_course_planner.git"&gt;GitHub Repo&lt;/a&gt; and submit a PR for your fixes.&lt;/p&gt;
&lt;p&gt;I will keep making more blogs as I (or others) continute to contribute and work towards making a concrete portal out of this. Let's see where this journey leads!&lt;/p&gt;
&lt;h2&gt;Appendix: Course Dependency Graphs&lt;/h2&gt;
&lt;p&gt;(Orange =&amp;gt; offered in both sems, green =&amp;gt; even sem only, blue =&amp;gt; odd sem only, gray =&amp;gt; no sem slotting info available)&lt;/p&gt;
&lt;p&gt;AM1: &lt;img alt="AM1" src="res/graphs/AM1.png"&gt;&lt;/p&gt;
&lt;p&gt;BB1: &lt;img alt="BB1" src="res/graphs/BB1.png"&gt;&lt;/p&gt;
&lt;p&gt;CE1: &lt;img alt="CE1" src="res/graphs/CE1.png"&gt;&lt;/p&gt;
&lt;p&gt;CH1: &lt;img alt="CH1" src="res/graphs/CH1.png"&gt;&lt;/p&gt;
&lt;p&gt;CH7: &lt;img alt="CH7" src="res/graphs/CH7.png"&gt;&lt;/p&gt;
&lt;p&gt;CS1: &lt;img alt="CS1" src="res/graphs/CS1.png"&gt;&lt;/p&gt;
&lt;p&gt;CS5: &lt;img alt="CS5" src="res/graphs/CS5.png"&gt;&lt;/p&gt;
&lt;p&gt;EE1: &lt;img alt="EE1" src="res/graphs/EE1.png"&gt;&lt;/p&gt;
&lt;p&gt;EE3: &lt;img alt="EE3" src="res/graphs/EE3.png"&gt;&lt;/p&gt;
&lt;p&gt;ME1: &lt;img alt="ME1" src="res/graphs/ME1.png"&gt;&lt;/p&gt;
&lt;p&gt;ME2: &lt;img alt="ME2" src="res/graphs/ME2.png"&gt;&lt;/p&gt;
&lt;p&gt;MS1: &lt;img alt="MS1" src="res/graphs/MS1.png"&gt;&lt;/p&gt;
&lt;p&gt;MT1: &lt;img alt="MT1" src="res/graphs/MT1.png"&gt;&lt;/p&gt;
&lt;p&gt;MT6: &lt;img alt="MT6" src="res/graphs/MT6.png"&gt;&lt;/p&gt;
&lt;p&gt;PH1: &lt;img alt="PH1" src="res/graphs/PH1.png"&gt;&lt;/p&gt;
&lt;p&gt;TT1: &lt;img alt="TT1" src="res/graphs/TT1.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;This is Part 1 of a series documenting the development of IIT Course Planner: a set of tools and utilities to help plan your course at IIT Delhi&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;The analysis I had in mind was to make a ranking of the various departments on offer, then use a standard matching algorithm to match users to departments (basically offer the highest-ranked course available to the user). The simpler first idea was to use a multiparametric regression model to fit ranks to courses. Neither of these ideas flew, because a) &lt;a href="https://arxiv.org/pdf/1904.06698.pdf"&gt;The JoSAA allocation algorithm is amazingly sophisticated&lt;/a&gt;, and b) the data does not map sex/caste to roll number, which would break any regression/ranking model I could think of. Still looking for a clever workaround for this one.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt;Most people use this to boost their CGPA &lt;sub&gt;coughs in RDL,ASL and MSL&lt;/sub&gt;.Welp, gotta keep that boat afloat, or rather &lt;em&gt;satti nahi thukni chahiye&lt;/em&gt;.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Data"></category></entry><entry><title>Setting up (and shifting to) Sublime Text 4</title><link href="https://aniruddhadeb.com/articles/2021/sublime-text-setup.html" rel="alternate"></link><published>2021-06-01T08:03:00+05:30</published><updated>2021-06-01T08:03:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2021-06-01:/articles/2021/sublime-text-setup.html</id><summary type="html">&lt;p&gt;After using vim for a &lt;em&gt;long&lt;/em&gt; time, I realized that vim would be very tricky to
use for larger projects; there are a few reasons behind this, which are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hard to set up and use autocomplete&lt;/strong&gt;: I've tried omnicomplete, but it just didn't cut the mustard. I very seldom need â€¦&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;After using vim for a &lt;em&gt;long&lt;/em&gt; time, I realized that vim would be very tricky to
use for larger projects; there are a few reasons behind this, which are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hard to set up and use autocomplete&lt;/strong&gt;: I've tried omnicomplete, but it just didn't cut the mustard. I very seldom need something like whole line completion and all the other gimmicky stuff that was in it. I heard that setting up other autocompletes on vim were really tricky, and that vim by virtue of being single-threaded wasn't great at this stuff. I had used VSCode once, and the only thing I really took away was how great intellisense is. I really didn't want to go back to VSCode, so sublime seemed like a good alternative&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Where are the directories?&lt;/strong&gt; There is no way to view folders in vim unless you have a folder viewing plugin. Once you have a good grip on the way of the keyboard, Vim is kind of pointless until you start adding plugins. You even need a plugin to add auto-completing brackets! I finally realized that vim would be hard to use realistically if I have to tackle a larger programming project, where I would need to see the folders and files and have autocomplete on hand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Neovim? Do I have to set that up?&lt;/strong&gt; NeoVim is the 'better' version of vim that everyone uses, because it's multithreaded and more of a community effort. however that has another bunch of setup for making it usable, and coc.nvim is the completion tool of choice there. Though I could have gone the nvim way, I decided that setting up sublime text would be effort better spent, since it's already usable and fast. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So here's the way I made sublime my own over a tuesday evening:&lt;/p&gt;
&lt;h3&gt;Update, Update, Update!&lt;/h3&gt;
&lt;p&gt;Everytime I opened up Sublime, I was greeted with the annoying update window&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Yes I didn't screenshot it on my mac, which is why it's a windows SS, thanks to Colonel Panic at StackOverflow for the image" src="res/sublime_update.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;I finally went ahead and updated it. Sublime text had come up with version 4 recently, and the only change was &lt;em&gt;drumrolls&lt;/em&gt; A new default color scheme! How original.&lt;sup&gt;2&lt;/sup&gt;. Well, it's still a great color scheme, even I was getting bored of monokai.&lt;/p&gt;
&lt;h3&gt;Installing the smaller plugins&lt;/h3&gt;
&lt;p&gt;There are 3 'small' plugins I installed (plugins that require minimal work to setup):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A file Icon - cool file icons in the sublime text sidebar&lt;/li&gt;
&lt;li&gt;Terminal - open a terminal with the current file with one keystroke (âŒ˜â‡§T)&lt;/li&gt;
&lt;li&gt;NeoVintageous - &lt;em&gt;much&lt;/em&gt; improved vim plugin; vintageous pales in comparision&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;all of these (except Terminal) required no setup; I just hit âŒ˜â‡§P -&amp;gt; install packages -&amp;gt; type the package name in, hit enter and done. Terminal required that I specify that I have iTerm2 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;terminal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;iTerm2-v3.sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;parameters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--open-in-tab&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Installing the larger autocomplete plugins&lt;/h3&gt;
&lt;p&gt;I mainly code in C/C++/Python nowadays, so I needed a Python autocomplete, as well as a C/C++ autocompleter. Jedi is what I used to use for python a long time back, and surprisingly it's still quite well maintained and documented. I installed Jedi via the package control. Jedi has some interesting settings regarding projects and virtual environments; I didn't get to try any of those out, but I did set it up on the default python interpreter on my system. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python_interpreter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/Sensei/.pyenv/versions/3.9.0/bin/python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python_package_paths&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;/Users/Sensei/.pyenv/versions/3.9.0/lib/python3.9/site-packages&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and that's it! Jedi now autocompletes both normal python and all packages that I install with pip (numpy, scipy etc). Great!&lt;/p&gt;
&lt;p&gt;I was left with setting up a C++ autocompleter, and this was a bit tricky. The first recommendation that I encountered was for ClangAutoComplete, but after downloading it, it stated that the plugin is still maintained, but not very actively. ClangAutoComplete instead recommended EasyClangComplete, so I uninstalled it and downloaded ECC. ECC had a few setup issues; everything is hunky-dory if you use CMake, but since I don't, I had to tweak the preferences a bit. I had already ranted about &lt;a href="https://aniruddhadeb.com/articles/2021/c-mac.html"&gt;How the C header locations on mac are screwed&lt;/a&gt;, and fortunately the ECC folks were kind enough to provide a recommended path list for mac.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;common_flags&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;-I/usr/include/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;-I/usr/local/include&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;-I/Library/Developer/CommandLineTools/usr/lib/clang/12.0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;-I/Library/Developer/CommandLineTools/usr/include/c++/v1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;lang_flags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-std=c99&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;CPP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-std=c++14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;OBJECTIVE_C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-std=c11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;OBJECTIVE_CPP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-std=c++14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;libclang_path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Library/Developer/CommandLineTools/usr/lib/&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Further updates&lt;/h3&gt;
&lt;p&gt;The next day, I went ahead and realized that terminal wouldn't cut it, and I needed a terminal integrated into sublime text. I went ahead and installed the Terminus plugin for that. Terminus by default hides some of it's keybindings, so I had to go and change the keybinding user preferences. Now &lt;code&gt;alt+`&lt;/code&gt; opens up a terminal where the default sublime terminal goes, and &lt;code&gt;ctrl+alt+T&lt;/code&gt; opens up a terminal in place of a text pane. The default user theme was too dark for my taste, so I changed it with the 3024-dark theme that terminus ships with. This config works perfectly: no need to split sublime into two with a terminal, or open iTerm every time I use sublime! Here's a screenshot (the project in question is &lt;a href="https://github.com/Aniruddha-Deb/PyGameOfLife"&gt;PyGameOfLife&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Current sublime setup" src="res/sublime_ss.png"&gt;&lt;/p&gt;
&lt;p&gt;That's about it; everything now works and works well! NeoVintageous is probably the thing that is the best; it is miles ahead of vintageous, and it works brilliantly here. I don't feel like I've left vim, until sublime writes methods for me, closes braces/tags for me and also autocompletes my 3 dimensional vector definition. Which is great. I'll post more updates here if I do install/delete some plugins, but I have a feeling sublime is here to stay.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;Yes I didn't screenshot it on my mac, which is why it's a windows SS, thanks to Colonel Panic at StackOverflow for the image&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt;They did change a lot of stuff; the rendering is now faster on newer devices, and a lot of updates would have gone into it behind the scenes, so this is just a joke :P gg @SublimeHQ, Sublime text 4 does look amazing :)&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Text Editor"></category></entry><entry><title>LaTeX primer</title><link href="https://aniruddhadeb.com/articles/2021/latex-primer.html" rel="alternate"></link><published>2021-03-21T21:36:00+05:30</published><updated>2021-03-21T21:36:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2021-03-21:/articles/2021/latex-primer.html</id><summary type="html">&lt;p&gt;This is a short &lt;em&gt;getting started&lt;/em&gt; article on LaTeX; Recently, one of our courses
involved a bit of LaTeX work, and this is meant to be a short introduction on 
how to use LaTeX to explain one's working.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;LaTeX (Pronounced &lt;em&gt;lay-tech&lt;/em&gt;, stylized $\LaTeX$), at it's core, is merely â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a short &lt;em&gt;getting started&lt;/em&gt; article on LaTeX; Recently, one of our courses
involved a bit of LaTeX work, and this is meant to be a short introduction on 
how to use LaTeX to explain one's working.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;LaTeX (Pronounced &lt;em&gt;lay-tech&lt;/em&gt;, stylized $\LaTeX$), at it's core, is merely a text formatting system. One of the main differences
between LaTeX and other programs such as MS word is that LaTeX is a WYSIWYM 
(What you see is what you mean) system, as compared to WYSIWYG (What you see 
is what you &lt;em&gt;get&lt;/em&gt;) systems. This means that you won't be able to see your changes
while editing, say LaTeX in your moodle explanation. &lt;/p&gt;
&lt;p&gt;To test small LaTeX snippets without installing anything, you can use 
&lt;a href="https://quicklatex.com"&gt;quicklatex.com&lt;/a&gt; or &lt;a href="http://texrendr.com"&gt;texrendr.com&lt;/a&gt;.
The former renders it using an actual LaTeX engine, while the latter uses 
MathJax (there are minor differences, which I'll get to later). For now, both
are equivalent, and you should be able to use both without problems. You could
also try testing with the &lt;a href="https://top.gg/bot/510789298321096704"&gt;TeXit discord bot&lt;/a&gt;, on
one of the many servers which have it. It also works if you Directly message it
your code, which is nice.&lt;/p&gt;
&lt;h2&gt;Basic commands&lt;/h2&gt;
&lt;p&gt;Getting started is quite easy: here's an example of some LaTeX code which does stuff&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\int&lt;/span&gt; &lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;dx&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\sqrt&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;1-x&lt;span class="nb"&gt;^&lt;/span&gt;2&lt;span class="nb"&gt;}}&lt;/span&gt; = &lt;span class="k"&gt;\sin&lt;/span&gt;&lt;span class="nb"&gt;^{&lt;/span&gt;-1&lt;span class="nb"&gt;}&lt;/span&gt;(x) + c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and here's the output it generates:&lt;/p&gt;
&lt;p&gt;$$\int \frac{dx}{\sqrt{1-x^2}} = \sin^{-1}(x) + c$$&lt;/p&gt;
&lt;p&gt;Let's go over what the code does, command by command:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;\&lt;/code&gt; (backslash) is used to represent a &lt;em&gt;command&lt;/em&gt;: prefixing a word with 
   a backslash identifies it as a command, and commands are used to either
   render specific symbols (&lt;code&gt;\int&lt;/code&gt;, &lt;code&gt;\alpha&lt;/code&gt;) or typeset text in a specific way
   (&lt;code&gt;\frac&lt;/code&gt;, &lt;code&gt;\sqrt&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\int&lt;/code&gt; renders an integral sign, and &lt;code&gt;\frac&lt;/code&gt; creates a fraction of the form
   &lt;code&gt;\frac{numerator}{denominator}&lt;/code&gt;. Braces are used in latex to demarcate parts
   of a command. They are optional, and in a pinch you could skip them
   altogether; for example, &lt;code&gt;\frac 1n&lt;/code&gt; renders as $\frac 1n$&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;\sqrt&lt;/code&gt; sign is self-explanatory. Note that $\sin$ is prefixed with a 
   backslash. There's a very minor difference here: &lt;code&gt;\sin&lt;/code&gt; would render $\sin$
   (upright), while &lt;code&gt;sin&lt;/code&gt; would render $sin$ (slanting). Hence, it's a good
   practice to prefix trig functions with a backslash. Raising -1 to the power
   requires explicit braces, as &lt;code&gt;\sin^-1&lt;/code&gt; would render $\sin^-1$ rather than
   $\sin^{-1}$, which is not what we need.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This small example covers most of what we'll use. The real power comes from
the fact that &lt;em&gt;by nesting these commands, we can create as complex an 
expression as we like&lt;/em&gt;. Here's an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\int&lt;/span&gt; &lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\sin&lt;/span&gt;&lt;span class="nb"&gt;^&lt;/span&gt;3&lt;span class="k"&gt;\frac\theta&lt;/span&gt; 2&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\cos\frac\theta&lt;/span&gt;2 &lt;span class="k"&gt;\sqrt&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\cos&lt;/span&gt;&lt;span class="nb"&gt;^&lt;/span&gt;3&lt;span class="k"&gt;\theta&lt;/span&gt; + &lt;span class="k"&gt;\cos&lt;/span&gt;&lt;span class="nb"&gt;^&lt;/span&gt;2&lt;span class="k"&gt;\theta&lt;/span&gt; + &lt;span class="k"&gt;\cos\theta&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt; d&lt;span class="k"&gt;\theta&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;gives us
$$\int \frac{\sin^3\frac\theta 2}{\cos\frac\theta2 \sqrt{\cos^3\theta + \cos^2\theta + \cos\theta}} d\theta$$&lt;/p&gt;
&lt;p&gt;Notice how this is only made up of the simple commands that we used (and &lt;code&gt;\theta&lt;/code&gt;
to render the $\theta$ symbol)&lt;/p&gt;
&lt;p&gt;There's a nice list of latex symbols &lt;a href="https://www.egr.msu.edu/~renjian/LaTeX-Math-Symbols.pdf"&gt;here&lt;/a&gt;.
If you ever get stuck, or come across a weird symbol not mentioned here, 
&lt;a href="https://detexify.kirelabs.org/classify.html"&gt;Detexify&lt;/a&gt; is a tool for converting
handwritten math symbols into LaTeX, so use that. &lt;/p&gt;
&lt;h2&gt;Environments&lt;/h2&gt;
&lt;p&gt;An environment is used to format a block of text in latex. Environments 
generally begin with a &lt;code&gt;\begin&lt;/code&gt; tag and end with a &lt;code&gt;\end&lt;/code&gt; tag. &lt;/p&gt;
&lt;p&gt;Let's say you have a set of linear equations and you want to align all of them
so that they look neat and tidy, something like the example below:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
5x + y - 3z &amp;amp;= 6 \\
2x + 3y + 4z &amp;amp;= 8 \\
x + 9y + 7z &amp;amp;= 3 
\end{align}
$$&lt;/p&gt;
&lt;p&gt;The way to do this is using the &lt;code&gt;align&lt;/code&gt; environment, The code to generate this
is below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;align&lt;span class="nb"&gt;}&lt;/span&gt;
5x + y - 3z &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt;= 6 &lt;span class="k"&gt;\\&lt;/span&gt;
2x + 3y + 4z &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt;= 8 &lt;span class="k"&gt;\\&lt;/span&gt;
x + 9y + 7z &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt;= 3 
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;align&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some key points here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;\begin{align}&lt;/code&gt; and &lt;code&gt;\end{align}&lt;/code&gt; commands demarcate the environment: 
   similar to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tags in HTML. There are different 
   environments, such as &lt;code&gt;center&lt;/code&gt; and &lt;code&gt;bmatrix&lt;/code&gt;, but we'll get to those in a 
   minute&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;\\&lt;/code&gt; command tells latex to end that equation and start the next equation
   on a new line.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;&amp;amp;&lt;/code&gt; character tells latex to align the commands at that character. 
   A small exercise for the reader would be to align the equations at the yth term
   (eg &lt;code&gt;5x + &amp;amp;y - 3z = 6&lt;/code&gt; and so on) and see what happens. Note that the meaning
   of &lt;code&gt;&amp;amp;&lt;/code&gt; changes depending on context, but in an align environment, this is 
   what it's used for.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another example: say you want to express this set of equations in a matrix. 
Something like this:&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix}
5 &amp;amp; 1 &amp;amp; -3 \\
2 &amp;amp; 3 &amp;amp; 4 \\
1 &amp;amp; 9 &amp;amp; 7 \\
\end{bmatrix}
\begin{bmatrix}x \\ y \\ z\end{bmatrix}
= 
\begin{bmatrix} 6 \\ 8 \\ 3 \end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;bmatrix&lt;/code&gt; environment for this. The code is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;bmatrix&lt;span class="nb"&gt;}&lt;/span&gt;
5 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 1 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; -3 &lt;span class="k"&gt;\\&lt;/span&gt;
2 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 3 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 4 &lt;span class="k"&gt;\\&lt;/span&gt;
1 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 9 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 7 &lt;span class="k"&gt;\\&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;bmatrix&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;bmatrix&lt;span class="nb"&gt;}&lt;/span&gt;x &lt;span class="k"&gt;\\&lt;/span&gt; y &lt;span class="k"&gt;\\&lt;/span&gt; z&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;bmatrix&lt;span class="nb"&gt;}&lt;/span&gt;
= 
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;bmatrix&lt;span class="nb"&gt;}&lt;/span&gt; 6 &lt;span class="k"&gt;\\&lt;/span&gt; 8 &lt;span class="k"&gt;\\&lt;/span&gt; 3 &lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;bmatrix&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice the different use of &lt;code&gt;&amp;amp;&lt;/code&gt; here.&lt;/p&gt;
&lt;p&gt;Let's say you want to solve this system of equations using cramer's rule, and 
want to write it as a determinant. Here's how that's done, using &lt;code&gt;array&lt;/code&gt;:
$$
\Delta = \left| \begin{array}{ccc}
5 &amp;amp; 1 &amp;amp; -3 \\
2 &amp;amp; 3 &amp;amp; 4 \\
1 &amp;amp; 9 &amp;amp; 7 \\
\end{array} \right|
$$&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\Delta&lt;/span&gt; = &lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;array&lt;span class="nb"&gt;}{&lt;/span&gt;|ccc|&lt;span class="nb"&gt;}&lt;/span&gt;
5 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 1 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; -3 &lt;span class="k"&gt;\\&lt;/span&gt;
2 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 3 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 4 &lt;span class="k"&gt;\\&lt;/span&gt;
1 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 9 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 7 &lt;span class="k"&gt;\\&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;array&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice how &lt;code&gt;array&lt;/code&gt; has an additional set of parameters here: &lt;code&gt;{|ccc|}&lt;/code&gt; denotes
that this array has three columns, and that we want vertical lines at the start
of the first column and the end of the last column. If we wanted something
like a table, then &lt;code&gt;{c|c|c}&lt;/code&gt; is what we would have used. Inserting horizontal
lines in an array can be done using &lt;code&gt;\hline&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Some more tips&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;If you want to add a small space between terms in math mode, prefix the space
   with a backslash. LaTeX ignores whitespace and a few special characters, so
   displaying them requires that we escape them with a backslash, similar to
   most other programming languages. For example, &lt;code&gt;\int x dx&lt;/code&gt; gives $\int x dx$, whereas 
   &lt;code&gt;\int x\ dx&lt;/code&gt; gives $\int x\ dx$. Similarly, for special characters, try 
   printing &lt;code&gt;5%&lt;/code&gt; in latex and be surprised :) how would you display the % symbol?&lt;/li&gt;
&lt;li&gt;If you come across an interesting LaTeX snippet online (rendered with MathJaX),
   right-click on it to open up the MathJaX context menu, and click on &lt;em&gt;show 
   math as -&amp;gt; TeX commands&lt;/em&gt; to see the code that went into creating that.
   This is a great way of learning LaTeX. You could &lt;a href="https://aniruddhadeb.com/articles/2020/hard-limits.html"&gt;skim through some of the
   math-heavy content in this blog to get a taste of that&lt;/a&gt;
   &lt;small&gt;&amp;lt;/self-promotion&gt;&lt;/small&gt;
   &lt;img alt="img" src="res/math_disp.png"&gt;&lt;/li&gt;
&lt;li&gt;Brackets are not auto-resizing in latex. Say you want to write the product 
   of two integrals, such as &lt;code&gt;(\int x\ dx)(\int x^2\ dx)&lt;/code&gt;.This gives
   us very puny brackets: $$(\int x\ dx)(\int x^2\ dx)$$ If we have to remedy
   this, we use the &lt;code&gt;\left(&lt;/code&gt; and &lt;code&gt;\right)&lt;/code&gt; commands to auto-resize the enclosing
   brackets to fit the content within: $$\left(\int x\ dx\right)\left(\int x^2\ dx\right)$$ This is
   much nicer, and works with other brackets as well&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Difference between LaTeX and MathJax&lt;/h2&gt;
&lt;p&gt;The pero few among you must have noticed that this was barely a LaTeX introduction
(sorry for the misnomer :P) There is quite a bit of difference between MathJaX
and LaTeX; LaTeX is an end-to-end typesetting system, while MathJaX is a javascript
library that displays math online. A typical LaTeX document begins with the
&lt;code&gt;\begin{document}&lt;/code&gt; environment, and a few imports before that. However, &lt;strong&gt;this
was meant to be a tutorial on merely typesetting math using a few LaTeX commands,
and I think it serves it's purpose&lt;/strong&gt;. There are quite a few links and resources
in the conclusion section, which you should check out for more info on LaTeX.&lt;/p&gt;
&lt;p&gt;Note that MathJaX requires you to enclose math within either &lt;code&gt;$ $&lt;/code&gt; or &lt;code&gt;\( \)&lt;/code&gt; 
for inline math and &lt;code&gt;$$ $$&lt;/code&gt; or &lt;code&gt;\[ \]&lt;/code&gt; for displayed math (centered, on a 
new line). &lt;strong&gt;Don't forget to do this, otherwise the math would not render&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Concluding notes &amp;amp; References&lt;/h2&gt;
&lt;p&gt;LaTeX is far larger than what I've covered in this article, but hopefully this
shows you that there exists an elegant way to typeset math. For more information,
check out the extensive LaTeX documentation on &lt;a href="https://www.overleaf.com/learn"&gt;Overleaf&lt;/a&gt;.
If you have any doubts, check out the TeX community over at 
&lt;a href="https://tex.stackexchange.com"&gt;tex.stackexchange.com&lt;/a&gt;, there's a high chance
that your doubt is already answered. &lt;/p&gt;
&lt;p&gt;Happy Math-ing!&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Mathematics"></category></entry><entry><title>C development on a Mac</title><link href="https://aniruddhadeb.com/articles/2021/c-mac.html" rel="alternate"></link><published>2021-03-18T11:46:00+05:30</published><updated>2021-03-18T11:46:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2021-03-18:/articles/2021/c-mac.html</id><summary type="html">&lt;p&gt;C development on a Mac has it's fair share of traps and pitfalls, even though
Mac is supposed to be POSIX compliant. I'll cover a few of them here, with the
hope that nobody repeats the same mistakes :)&lt;/p&gt;
&lt;h2&gt;XCode CLT Pitfalls&lt;/h2&gt;
&lt;p&gt;The first thing one does while starting out with â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;C development on a Mac has it's fair share of traps and pitfalls, even though
Mac is supposed to be POSIX compliant. I'll cover a few of them here, with the
hope that nobody repeats the same mistakes :)&lt;/p&gt;
&lt;h2&gt;XCode CLT Pitfalls&lt;/h2&gt;
&lt;p&gt;The first thing one does while starting out with C development is to install
a compiler. This is slightly more complicated than it looks on Mac: the simple
way is to go the way of installing XCode command line tools, but there's a few
things here to note:&lt;/p&gt;
&lt;h3&gt;You have to be an apple developer&lt;/h3&gt;
&lt;p&gt;This means that you can't have a C/C++ toolchain without being a part of
of their developer program. There is a (messy) way of working around this, by instead
installing and using GCC with HomeBrew, but I'll get to that in a minute. &lt;/p&gt;
&lt;h3&gt;XCode CLT uses the &lt;code&gt;clang&lt;/code&gt; toolchain&lt;/h3&gt;
&lt;p&gt;This is by far the most important pitfall, as XCode purposefully misaliases 
a lot of stuff. After installing XCode CLT (and provided that you don't have
GCC installed or aliased), try doing a &lt;code&gt;gcc -v&lt;/code&gt; or &lt;code&gt;g++ -v&lt;/code&gt;. You'd get&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Configured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/usr/include/c++/4.2.1
Apple clang version 12.0.0 (clang-1200.0.32.27)
Target: x86_64-apple-darwin19.6.0
Thread model: posix
InstalledDir: /Library/Developer/CommandLineTools/usr/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is quite misleading, as &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;clang&lt;/code&gt; are fundamentally different 
compilers. &lt;a href="https://stackoverflow.com/questions/25745759/clang-vs-gcc-vs-msvc-template-conversion-operator-which-compiler-is-right/25758367#25758367"&gt;Here's one example of that&lt;/a&gt;.
A more accessible example would be this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/++&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;try compiling this with &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;clang&lt;/code&gt;, and be surprised*.&lt;/p&gt;
&lt;h3&gt;Headers? What Headers?&lt;/h3&gt;
&lt;p&gt;Headers are also &lt;em&gt;very weirdly located&lt;/em&gt; in &lt;code&gt;/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include&lt;/code&gt;,
and these headers are also &lt;strong&gt;not&lt;/strong&gt; symlinked to &lt;code&gt;/usr/include&lt;/code&gt; by the installer.
This sucks, and I struggled with making vim autocomplete work because of this
reason; vim's path searches &lt;code&gt;/usr/include&lt;/code&gt; and not this weird obscure path.
Once I manually included it, it &lt;strike&gt;looked horrible and I needed to symlink it
to /usr/include&lt;/strike&gt; worked okayish.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="res/vim_autocomp.png"&gt;&lt;/p&gt;
&lt;p&gt;One note is that you could also use the path &lt;code&gt;/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include&lt;/code&gt;,
as &lt;code&gt;MacOSX.sdk&lt;/code&gt; is linked to the latest version of SDK installed. This does not
make the location of includes any less weird. &lt;/p&gt;
&lt;p&gt;Another thing to note is that other libraries install their headers in &lt;code&gt;/usr/local/include&lt;/code&gt;,
so this discrepancy is bad. This has also not been fixed in Big Sur: how hard
is it to keep a set of headers in &lt;code&gt;/usr/include&lt;/code&gt; rather than in this unsightly
place! I mean every UNIX system does this! Ugh&lt;/p&gt;
&lt;h3&gt;CTags&lt;/h3&gt;
&lt;p&gt;CLT also ships with the old ctags rather than exuberant ctags, which is basically
useless. Neither is there a simple way to distinguish between the ctags that
it ships and exuberant ctags until it fails hard when you go to make your tags
file, since they have the same &lt;code&gt;ctags&lt;/code&gt; command. The way of fixing this is to 
install the proper ctags with &lt;code&gt;brew install ctags&lt;/code&gt; and then add 
&lt;code&gt;alias ctags=/usr/local/include/ctags&lt;/code&gt; to your &lt;code&gt;.zshrc&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Using GCC&lt;/h2&gt;
&lt;p&gt;So you decide that the &lt;code&gt;clang&lt;/code&gt; toolchain is not working out for you (maybe because
it's slow or for other reasons), and you decide to switch to the &lt;code&gt;gcc&lt;/code&gt; toolchain
(by Toolchain, I refer to all associated tools, so that's &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;g++&lt;/code&gt;, &lt;code&gt;gdb&lt;/code&gt; etc).
Installing the tools are quite easy, and they just happen with 
&lt;code&gt;brew install gcc gdb&lt;/code&gt;. However, &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;g++&lt;/code&gt; are already taken by &lt;code&gt;clang&lt;/code&gt;,
so you'll have to export them in your &lt;code&gt;.zshrc&lt;/code&gt; again&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;gcc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/gcc-10
&lt;span class="nb"&gt;alias&lt;/span&gt; g++&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/g++-10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;GDB, however, is &lt;em&gt;very&lt;/em&gt; tricky to get working right; MacOS due to SIP and 
Gatekeeper, does not allow running processes to latch on to other processes.
For GDB to work, it would need to be signed. For this, you'll have to sign
it yourself with a certificate, and add that certificate to the trusted
keychain in your system. I &lt;em&gt;still&lt;/em&gt; could not get it to work after this (more
info &lt;a href="https://dev.to/jasonelwood/setup-gdb-on-macos-in-2020-489k"&gt;here&lt;/a&gt;), and 
just using &lt;code&gt;sudo&lt;/code&gt; was a hack that I used while I tried to get GDB to work. 
LLDB, however, is much better integrated with debugging, and I eventually
shifted over to using LLDB rather than GDB (aided by &lt;a href="https://lldb.llvm.org/use/map.html"&gt;this&lt;/a&gt;
resource). &lt;/p&gt;
&lt;p&gt;The GCC/G++ aliasing is highly recommended, and you could leave out GDB (which
is what I've done in my current setup)&lt;/p&gt;
&lt;h2&gt;Other stuff&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; seems to work without a hitch so far, which is a good thing. &lt;code&gt;cscope&lt;/code&gt; 
also had to be installed with brew, and cscope also works well now. I'll need 
to finish setting up my vim environment for C autocompletion and play around
more with CTags and cscope (maybe write about it in the next post :)) For 
now, this has unfortunately turned into more of a rant than a how-to, but I
still hoped it help some of you avoid these traps and pitfalls.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;*: GCC gives the output as 1, while clang gives it as 0&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="C"></category></entry><entry><title>Sorting Testbench in C</title><link href="https://aniruddhadeb.com/articles/2020/algorithms-in-c.html" rel="alternate"></link><published>2020-11-11T19:20:00+05:30</published><updated>2020-11-11T19:20:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-11-11:/articles/2020/algorithms-in-c.html</id><summary type="html">&lt;p&gt;I started reading CS theory in anticipation of my upcoming curriculum and I found
that CLRS starts the reader off with sort algorithms (technically they start with 
math and basic CS, but I've already covered that). I decided to make a Sorting 
testbench, whose requirements were pretty simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It should â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I started reading CS theory in anticipation of my upcoming curriculum and I found
that CLRS starts the reader off with sort algorithms (technically they start with 
math and basic CS, but I've already covered that). I decided to make a Sorting 
testbench, whose requirements were pretty simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It should be able to generate arrays of a given entropy: the entropy of an 
  array is defined as the number of swaps required to sort the array.&lt;/li&gt;
&lt;li&gt;It should be able to benchmark the time taken by each sort&lt;/li&gt;
&lt;li&gt;It should be able to plot the benchmark results in a single scatter plot, 
  using different colours for the different sorts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first implementation of this was done using Java and JavaFX (ps: setting up
JavaFX with Java 15 is a pain in the ass, but more on that in a later blog). 
The results were not too shabby, and I was able to accomplish a lot with 
very little code. However, I was unhappy with the performance: I believed that 
running the sorts on a JVM were not the way to go, and there were a lot of 
outliers in the data, where I believed the JVM paused for it's GC cycle and that
got recorded by the benchmarker. This was the reason I decided to switch to 
a language that was closer to the system, and that language was C.&lt;/p&gt;
&lt;p&gt;Before that, here are some graphs from the Java version. This graph shows the 
time taken in nanos (y axis) vs array size (x axis). The $O(n^2)$ characteristic is 
clearly visible.&lt;/p&gt;
&lt;p&gt;&lt;img alt="time taken vs array size" src="res/javasort_svt.png"&gt;&lt;/p&gt;
&lt;p&gt;Here's one more, showing the time taken vs array entropy, which is linear in 
nature.&lt;/p&gt;
&lt;p&gt;&lt;img alt="time taken vs array entropy" src="res/javasort_tve.png"&gt;&lt;/p&gt;
&lt;h2&gt;Moving to C&lt;/h2&gt;
&lt;p&gt;Moving to C was difficult. The things I had to implement manually were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ArrayList&lt;/li&gt;
&lt;li&gt;PriorityQueue (via a Heap)&lt;/li&gt;
&lt;li&gt;BitSet&lt;/li&gt;
&lt;li&gt;Random int generator&lt;/li&gt;
&lt;li&gt;Swap inserter&lt;/li&gt;
&lt;li&gt;Circle drawing/filling algorithm&lt;/li&gt;
&lt;li&gt;Dashed line drawing algorithm&lt;/li&gt;
&lt;li&gt;Graph scale derivation algorithm&lt;/li&gt;
&lt;li&gt;Sort algorithms&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;ArrayList&lt;/h3&gt;
&lt;p&gt;Implementing an ArrayList was quite easy. The only tricky parts were resizing the 
ArrayList if the index overshot the current size. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;_ArrayList_expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArrayList&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;MULTIPLIER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;realloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;ArrayList_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArrayList&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_ArrayList_expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ERR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;log_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Added element at %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;PriorityQueue&lt;/h3&gt;
&lt;p&gt;This was trickier. PriorityQueues are very well explained by &lt;a href="https://algs4.cs.princeton.edu/24pq/"&gt;Algorithms, 4th ed&lt;/a&gt;
with adequate code examples and all I did was implement them. The core concepts
are the same as that of a heap: data is stored in a binary tree represented as an 
array, where the parent node of node $n$ is $\lfloor n/2 \rfloor$. This binary 
heap has an $O(\log n)$ access and removal time. The elements are inserted in 
any order and when they are removed, they are removed in sorted order. The link
does a better job of explaining it than I do, but here's how I implemented the 
primary methods in C&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;IntPQ_insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntPQ&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;MULTIPLIER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;realloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;emap_lb&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;emap_lb&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;emap_size&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;set_bit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;emap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;emap_lb&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// swim element up&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;IntPQ_remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntPQ&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Stack is empty&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// sink first element&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;BitSet&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;set_bit&lt;/code&gt; function in the previous code sample must have raised some questions. 
The PriorityQueue has a Bitset that facilitates $O(1)$ checking for elements in the array. Generally, a 
HashTable would be better suited, but I didn't get around to implementing one 
of those. A BitSet implementation is well described 
&lt;a href="https://stackoverflow.com/questions/4372515/how-to-implement-a-bitset-in-c"&gt;here&lt;/a&gt;
and I did something similar here, so no worries there. It's not very memory efficient, 
but it's good enough for the range of integers I generate.&lt;/p&gt;
&lt;h3&gt;Random Number Generator&lt;/h3&gt;
&lt;p&gt;C comes with a built-in random number generator, implemented with the &lt;code&gt;rand()&lt;/code&gt; 
and &lt;code&gt;srand()&lt;/code&gt; functions. However, the implementation of those functions varies
wildly from platform to platform, which I documented in 
&lt;a href="https://stackoverflow.com/questions/64619808/clang-poor-rand-implementation"&gt;this question&lt;/a&gt;
and the algorithm is also well documented in &lt;a href="https://medium.com/macoclock/are-random-number-on-mac-truly-random-c70e65630ce"&gt;this medium post&lt;/a&gt;.
&lt;code&gt;rand()&lt;/code&gt; on mac is taken from BSD, which says in it's own documentation that 
it's a bad random number generator. The solution is to use &lt;code&gt;random()&lt;/code&gt; and &lt;code&gt;srandom()&lt;/code&gt;
on mac, which is comparatively better. The maximum value of the random number 
generated using this method is $2^{31} - 1$. Using this, generating random 
number within a given range is simple, and can be done using the following 
snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;gen_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(((&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;RANDOM_MAX&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ub&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;lb&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using this along with the PriorityQueue, we can generate an array of sorted 
random numbers, into which swaps are then inserted.&lt;/p&gt;
&lt;h3&gt;Swap Inserter&lt;/h3&gt;
&lt;p&gt;A swap or inversion is defined as a pair of integers at indices $i$ and $j$ 
such that $i &amp;lt; j$ and $A[i] &amp;gt; A[j]$, assuming the array is to be sorted in 
ascending order. An array of length $n$ sorted in descending order has $\frac{n(n-1)}{2}$
inversions. If we have to insert $k$ inversions into a sorted array, take the 
first $m$ integers such that $m(m-1)/2 &amp;lt; k$. Reverse the order of these first 
$m$ integers so that they're in descending order. We now have to insert 
$k - m(m-1)/2$ swaps in the leftover array. To do this, take the last element 
in the array (which is the largest) and move it back by $k - m(m-1)/2$ steps, 
thereby inserting those many number of swaps.&lt;/p&gt;
&lt;h3&gt;Circle drawing &amp;amp; filling algorithm&lt;/h3&gt;
&lt;p&gt;Now that the integer generation side of things is done, we can move on to the 
graphics side of things. I use SDL for all my graphics work with C and SDL 
does not have a &lt;code&gt;SDL_RenderDrawCircle&lt;/code&gt; or &lt;code&gt;SDL_RenderFillCircle&lt;/code&gt; method. Since 
circles are a must have primitive, I implemented my own circle drawing and 
filling algorithm. This is based on the &lt;a href="https://en.wikipedia.org/wiki/Midpoint_circle_algorithm"&gt;midpoint circle algorithm&lt;/a&gt; and draws 
(and fills) non-antialiased circles.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;render_circ_pts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_Renderer&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;render_circ_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_Renderer&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;xch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// renders every point only once, so rendering with alpha &amp;lt; 0xFF is not an issue. &lt;/span&gt;
    &lt;span class="c1"&gt;// also note the +1 for x2; SDL does not draw the last point in a line&lt;/span&gt;
    &lt;span class="n"&gt;SDL_RenderDrawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;SDL_RenderDrawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xch&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;SDL_RenderDrawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;SDL_RenderDrawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;render_circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_Renderer&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1-2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;xch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;render_circ_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;render_circ_pts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;xch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;xch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;SDL_RenderDrawCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_Renderer&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;render_circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;SDL_RenderFillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_Renderer&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;render_circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the entire algorithm, capable of drawing both filled and unfilled circles. 
it's easy to draw filled circles as shown by the algorithm here as well as in 
Wikipedia, but drawing filled circles is trickier, because you don't want to 
go over a single point multiple times. This raises problems if your alpha is 
less than 1. To counter this, you only draw lines when the x (or the y) changes
and if x is not equal to y. Here's what the result would look like if you went 
over lines multiple times:&lt;/p&gt;
&lt;p&gt;&lt;img alt="multiple rendering" src="res/circle_fill_mult.png"&gt;&lt;/p&gt;
&lt;p&gt;Here's what it looks like if you go over each pixel once&lt;/p&gt;
&lt;p&gt;&lt;img alt="single rendering" src="res/circle_fill_sing.png"&gt;&lt;/p&gt;
&lt;p&gt;Much better!&lt;/p&gt;
&lt;h3&gt;Dashed Line Drawing Algorithm&lt;/h3&gt;
&lt;p&gt;This is an implementation of the Bresenham algorithm for drawing lines. I needed 
to draw only horizontal and vertical dashed lines to make the graph gridlines, 
but I decided to make a full-fledged implementation of Bresenham's algorithm 
to draw dashed lines. Again, this is an algorithm that SDL does not ship with; it 
can only make solid lines and I had to implement this myself. Bresenham's 
algorithm is decently simple and can be found in any graphics programming book. 
The main concept behind the algorithm is making a choice between plotting 
$(x+1, y+1)$ or $(x+1, y)$ for a line with a slope between 0 and 1. Mirroring / 
flipping the algorithm gives you the line in the eight other octants. &lt;/p&gt;
&lt;p&gt;This implementation for all 8 octants took quite a bit of head scratching as 
most of the algorithms online used to work only in the first quadrant, or they 
had different algorithms for other quadrants with repeated code, which was 
messy. The key here is to realize that the increment can be either positive 
or negative, but the error term will always be positive. The comments should 
clarify this algorithm, as I wrote them to help me understand what's happening
where and when.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Bresenham line algorithm&lt;/span&gt;
&lt;span class="c1"&gt;// similar to SDL_RenderDrawLine: draws x0, y0 and does not draw x1, y1 (x0 &amp;lt;= L &amp;lt; x1)&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SDL_RenderDrawDashedLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_Renderer&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dashlen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;blanklen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// dirx, diry - direction of line&lt;/span&gt;
    &lt;span class="c1"&gt;// the direction being iterated over is 1 or -1, and the other one is 0&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dirx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;diry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// incx, incy - increment of line&lt;/span&gt;
    &lt;span class="c1"&gt;// the direction being iterated over is set to the same as dirx, while &lt;/span&gt;
    &lt;span class="c1"&gt;// the other one is 1, -1 or 0 depending on line direction.&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;incx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;incy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// first find the variable we will be iterating over - X or Y&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;longest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;shortest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;longest&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;shortest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// We&amp;#39;ll iterate over y, so swap longest and shortest and then set dir* &lt;/span&gt;
        &lt;span class="c1"&gt;// and inc* appropriately&lt;/span&gt;
        &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;longest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;shortest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;dirx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;incx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dx&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;incx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;diry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;diry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;incy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;diry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Iterating over x&lt;/span&gt;
        &lt;span class="n"&gt;diry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;incy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dy&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;incy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;dirx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;dirx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;incx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dirx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// main drawing loop&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;longest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dashlen&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;blanklen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dashlen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;shortest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;shortest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;longest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dirx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;diry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;longest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;incx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;incy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This produces some pretty good results, and I can live with the distances not 
exactly adhering to Pythagoras theorem, as highlighted by the rectangular rather 
than radial boundaries for the dashes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="dashed line" src="res/dotted_line.png"&gt;&lt;/p&gt;
&lt;h3&gt;Graph Scale Derivation Algorithm&lt;/h3&gt;
&lt;p&gt;After making the primitive drawing algorithms, we can move on to drawing the 
graph. Determining the scale of the graph is the only mathematical and challenging 
part of drawing the graph, because the rest is mostly drudgework. I used 
&lt;a href="https://stackoverflow.com/questions/326679/choosing-an-attractive-linear-scale-for-a-graphs-y-axis"&gt;this StackOverFlow question&lt;/a&gt;
as a base and developed my algorithm using that. The only difference is that 
I floor the value while calculating lower bound rather than rounding it. The 
following code should make the algorithm clear&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;round_tr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mf"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.75&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c1"&gt;// in the range determination function. Do similarily for y&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xMin&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;xMax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xMax&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;xMin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;gd&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;xtickrange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;round_tr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;numxticks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;gd&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;xlbound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gd&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;xtickrange&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;xMin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gd&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;xtickrange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Sort Algorithms&lt;/h3&gt;
&lt;p&gt;After the amount of stuff we have gone through, the sort algorithms now seem 
trivial and easy. I just implemented some $O(n^2)$ algorithms to start off 
with: Selection sort, bubble sort and insertion sort. I also created a &lt;code&gt;Sort&lt;/code&gt; 
structure containing a function pointer and a string, which I would use to 
link the sort with a name. Here are the sorts I started off with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;selection_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;bubble_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;insertion_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's the timing and plotting main function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;srandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;ArrayList&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_ArrayList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;ArrayList_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_Sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Selection Sort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;selection_sort&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;ArrayList_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_Sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Insertion Sort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;insertion_sort&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;ArrayList_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_Sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bubble Sort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;bubble_sort&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;ArrayList_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_Sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Merge Sort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;merge_sort&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="n"&gt;ArrayList&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dataList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_ArrayList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Sort&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;ArrayList_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_DataSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Creating random array of size %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ranarr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen_ints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LBOUND&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UBOUND&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;allocating array of size %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ranarr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Sort&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArrayList_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;clock_t&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;clock_t&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;time_spent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1000000.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;CLOCKS_PER_SEC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;is_sorted_asc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;log_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sort %d failed&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;log_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sort %d passed&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;DataSet_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;new_Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time_spent&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ranarr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;plotAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dataList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Sorts - Time (us) vs Array Size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;destroy_Sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;destroy_DataSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;destroy_ArrayList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;destroy_ArrayList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This didn't work the first time and threw a segfault in my face :_( How typical 
of C. I did debug it, and I'm pretty pleased with the results.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Plotter example" src="res/plotter_example.png"&gt;&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;There are a lot of things that I have to improve here, some of which include&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Antialiasing circles and lines&lt;/li&gt;
&lt;li&gt;More sorts - $O(n\log(n))$ and $O(n)$ sorts&lt;/li&gt;
&lt;li&gt;Resizeable graphics&lt;/li&gt;
&lt;li&gt;More customizable layouts&lt;/li&gt;
&lt;li&gt;More flexible graphing - lines, histograms etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I could have left the graphing to R or Python and just exported a CSV, but 
where's the fun in that. &lt;/p&gt;
&lt;p&gt;This project taught me more about graphics than it did about sorts and will continue to teach me more 
as I keep working on it. For more updates, check out the repository &lt;a href="https://github.com/Aniruddha-Deb/Algorithms"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="C"></category><category term="Algorithms"></category></entry><entry><title>IIT Department Finder Launch (plus personal website domain)</title><link href="https://aniruddhadeb.com/articles/2020/iit-dep-finder.html" rel="alternate"></link><published>2020-10-28T20:39:00+05:30</published><updated>2020-10-28T20:39:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-10-28:/articles/2020/iit-dep-finder.html</id><summary type="html">&lt;p&gt;For IIT admissions, I had created a small command line tool called &lt;code&gt;iit_dep_finder.py&lt;/code&gt; 
to check the departments I would get, given a particular rank. Once the round 
one allocation results came out, I decided to create a web version, for others 
to use as well. This article chronicles the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;For IIT admissions, I had created a small command line tool called &lt;code&gt;iit_dep_finder.py&lt;/code&gt; 
to check the departments I would get, given a particular rank. Once the round 
one allocation results came out, I decided to create a web version, for others 
to use as well. This article chronicles the steps I took, and while I did get 
the department finder up and running, I also did a lot of other stuff in the 
process (including changing the domain name, in case you haven't noticed :). 
It's a long and uncensored article, so be warned.&lt;/p&gt;
&lt;h2&gt;Index:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Flask Backend app Development&lt;/li&gt;
&lt;li&gt;Frontend Development&lt;/li&gt;
&lt;li&gt;NGINX and GUnicorn local setup&lt;/li&gt;
&lt;li&gt;Lightsail (VPS) setup and deployment&lt;/li&gt;
&lt;li&gt;Domain acquisition and Setup&lt;/li&gt;
&lt;li&gt;Enabling SSL and Security&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Flask App Development&lt;/h2&gt;
&lt;p&gt;Developing the Flask app was probably the most rewarding part of the process, 
considering that the rest of it was DevOps, which is not exactly my cup of 
tea. I started out by downloading the data from 
&lt;a href="https://josaa.nic.in/Result/Result/currentorcr.aspx"&gt;https://josaa.nic.in/Result/Result/currentorcr.aspx&lt;/a&gt;
as a set of HTML files, to retain their tabular format. The data was then 
scraped with BeautifulSoup and LXML into a CSV intermediate using the following
snippet of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;main_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;table&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;border_table_at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;table_rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;main_table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;table_rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;td&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Female-only (including Supernumerary)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; (including Supernumerary)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The CSV file was then cleaned up a bit manually, such as removing commas at the
end of the line and changing a few typos and values. After this, I created the 
SQLite database and added a table, whose schema was as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;orcr_2020_r1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;institute&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;department&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;quota&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;OPR&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;OPR_prep&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;CPR&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;CPR_prep&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This was enough to store the required data. Notice the &lt;code&gt;OPR\_prep&lt;/code&gt; and &lt;code&gt;CPR\_prep&lt;/code&gt; 
fields, which are there for &lt;a href="https://www.iitism.ac.in/assets/pdfs/rules/pcr.pdf"&gt;Preparatory Course ranklists&lt;/a&gt;.
The ranks for these ranklists have a 'P' appended to the number. Since we want 
to store the number as an integer for sorting purposes, the 'P' needs to be 
abstracted into this boolean-esque field. After the table was created, it was 
a matter of inserting all the records in the CSV file into the table. The CSV 
file was used as a sort of 'staging location' for easily editing any errors in 
the data or tweaking formatting. &lt;/p&gt;
&lt;p&gt;Once the data creation methodology and tools were done, I moved on to developing
the flask backend. There's nothing spectacular here, it was just querying the 
database based on the JSON data it received from the frontend and returning 
the results as a JSON encoded string. This part was probably the simplest, 
because the rest was pretty tricky.&lt;/p&gt;
&lt;h2&gt;Frontend Development&lt;/h2&gt;
&lt;p&gt;I'm finally able to understand why Javascript developers use such humongous 
frontend development frameworks like Angular and React: Frontend development
without those is a huge pain in the ass&lt;/p&gt;
&lt;p&gt;&lt;img alt="Commitstrip comic" src="https://www.commitstrip.com/wp-content/uploads/2018/01/Strip-Les-bonnes-r%C3%A9solutions-650-finalenglish.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This is a close second for the most disliked part of this entire development 
cycle: writing HTML and CSS gets extremely repetitive. Since I was not using 
any framework, all the CSS (including the little dropdown transitions for 
advanced options) were written by hand. The JavaScript backend was slightly 
better, but JS does indeed feel like a hacky kludge of a language rather than
something you can write an entire frontend app with (like google sheets), or 
maybe that's because I'm an amateur at the language.&lt;/p&gt;
&lt;p&gt;Once the frontend was done, it didn't look too nasty. I still have to optimize 
the frontend for mobile devices, but since I used &lt;code&gt;div&lt;/code&gt;'s for the layout, I don't 
think there's going to be much to do.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Frontend preview" src="res/iit_dep_finder_frontend.gif"&gt;&lt;/p&gt;
&lt;h2&gt;NGINX and GUnicorn local setup&lt;/h2&gt;
&lt;p&gt;This is where the 'Flask 101' tutorials generally stop. Flask uses Werkzeug to
serve it's files in the development stage, and you cannot carry that forward
to production. Flask is merely a microframework to do the routing and keep 
the application logic in the backend. You need an application server to act as 
an interface for Flask and a web server to serve the static files, because 
the application server is not optimized to do that. I went with NGINX because 
it's light and smaller than apache, and GUnicorn because it's pretty well 
documented. &lt;/p&gt;
&lt;p&gt;Before deploying the app on a VPS, I had to setup the same environment on my 
local machine. I was following this brilliant &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04"&gt;DigitalOcean tutorial&lt;/a&gt;
but it proved to be tedious, because I'm using a mac, and UNIX-y
stuff like &lt;code&gt;systemctl&lt;/code&gt; and &lt;code&gt;launchd&lt;/code&gt; don't play well (actually they don't play
at all) on a mac. I then had to switch gears a bit and follow some part of 
&lt;a href="http://cheng.logdown.com/posts/2015/01/27/deploy-django-nginx-gunicorn-on-mac-osx"&gt;Cheng's blog&lt;/a&gt;
on setting up a similar development setup on Mac OS X. The long and short of it 
is that NGINX on Mac doesn't ship with the &lt;code&gt;sites-available&lt;/code&gt; and &lt;code&gt;sites-enabled&lt;/code&gt;
folders, so you will have to create them manually and add the &lt;code&gt;sites-enabled&lt;/code&gt; one
to &lt;code&gt;nginx.conf&lt;/code&gt;. Once that is done, I made the &lt;code&gt;iit_dep_finder.conf&lt;/code&gt; config 
file in &lt;code&gt;sites-available&lt;/code&gt; and linked it to &lt;code&gt;sites-enabled&lt;/code&gt;. One point of difference
is the redirection of the API commands to the server; on the Mac machine, 
GUnicorn runs on port 9000, whereas on the Ubuntu server, I can create a service 
which has it's own socket, with the &lt;code&gt;unix:&lt;/code&gt; prefix. This difference is 
reflected in the server, where I made a custom &lt;code&gt;gunicorn_prod.conf.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I had a lot of troubles with routing: the NGINX config files are not exactly 
very intuititve, and finally going to the docs and learning the difference 
between &lt;code&gt;root&lt;/code&gt; and &lt;code&gt;alias&lt;/code&gt; fixed it. &lt;code&gt;root&lt;/code&gt; appends everything in the location
to the specified path, whereas &lt;code&gt;alias&lt;/code&gt; appends only the content after the 
location to the specified path. &lt;/p&gt;
&lt;p&gt;Once routing was fixed on the Mac, I did a test deployment to a Ubuntu machine
I had hooked up to my local network, which was a success. I was then ready to 
move to the next part&lt;/p&gt;
&lt;h2&gt;Lightsail (VPS) Setup and Deployment&lt;/h2&gt;
&lt;p&gt;This part ran in parallel with the development for a few days: turns out that 
Amazon needs you to fill in your payment details along with doing a phone 
number verification before your account setup is complete and you can use any
of their services. This is really misleading, when they advertise a 'free month'.
It's free only in the sense that they're not drawing any blood, but the needle 
will be firmly inserted and kept in your flesh, ready to draw blood once the 
month is over. Amazon is not the only provider to use this strategy: all SaaS/PaaS/Services
companies are doing this now. This will turn into a full fledged rant if I 
continue, so more on this in a later blog post maybe.&lt;/p&gt;
&lt;p&gt;After going back and forth with Amazon support over a couple days, my account 
was finally given a stamp of approval and allowed to partake in the holy services
of AWS. I created the cheapest LightSail instance (with a free month :P) and 
&lt;strong&gt;assigned a static IP to it&lt;/strong&gt;. This step is important, and Amazon does not 
do it automatically. After that, download the default SSH key and use it to 
SSH into the server from your terminal. You can now proceed to start installing
stuff: &lt;code&gt;apt&lt;/code&gt; works here, so does &lt;code&gt;snap&lt;/code&gt;. The setup was pretty similar to the 
stuff I did on the local ubuntu machine, and once it was done, I could access
the site by entering the static IP in my web browser.&lt;/p&gt;
&lt;h2&gt;Domain Acquisition and Setup&lt;/h2&gt;
&lt;p&gt;This was decently tricky for me, as I knew nothing about DNS and domain routing 
and related concepts. I purchased a domain off GoDaddy, and it was not a good 
experience. GoDaddy provides pretty cheap domains compared to the competition, 
and they try to poke money out of you in every other way. Still, the domain 
setup and update times were pretty good, and I had linked my primary domain to 
my server in under 2 hours. Not bad for a n00b like me.&lt;/p&gt;
&lt;p&gt;The following day, I read more about DNS records, what A, CNAME and TXT records
are. I then went ahead and created a small sitemap for my website, since I 
would also host my blog on the website&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aniruddhadeb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Blog&lt;/span&gt; &lt;span class="n"&gt;linked&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;GitHub&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt; &lt;span class="n"&gt;websites&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;GitHub&lt;/span&gt;

&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aniruddhadeb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;webapps&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;single&lt;/span&gt; &lt;span class="n"&gt;webapp&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IIT_dep_finder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The URL for this project would then be &lt;code&gt;http://apps.aniruddhadeb.com/IIT_dep_finder&lt;/code&gt;. 
I then had to add a CNAME to my DNS record with the &lt;code&gt;apps&lt;/code&gt; prefix and redirect
it to the LightSail static IP. Following this, I linked up a custom domain with
GitHub Pages, the process for which is well documented &lt;a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site"&gt;here&lt;/a&gt;.
This was all on the domain side of things, and I had to configure my NGINX server
to serve from &lt;code&gt;/IIT_dep_finder&lt;/code&gt; instead of from the root, which was frustruating 
because I'm not that good with the NGINX config. Practice makes perfect, as they 
say, and I'm a greenfoot when it comes to full stack development.&lt;/p&gt;
&lt;p&gt;When all was said and done, I had a running website, with my blog on the main 
page and IIT dep finder on the URL above. All was good! or was it?&lt;/p&gt;
&lt;h2&gt;Enabling SSL and Security&lt;/h2&gt;
&lt;p&gt;This takes the cake for the most frustruating part of development. Not because 
acquiring and setting up an SSL certificate was hard (Thank you to &lt;code&gt;certbot&lt;/code&gt;!), 
but because &lt;strong&gt;Amazon has their own fucking firewall in front of the LightSail 
instance&lt;/strong&gt;, and it took me 3 hours to figure that out. Important disclaimer for
all out there on LightSail: &lt;strong&gt;If you create a default ubuntu instance, ONLY 
ports &lt;code&gt;22&lt;/code&gt; and &lt;code&gt;80&lt;/code&gt; are enabled by default, which is why my server was getting 
NO HTTPS requests on &lt;code&gt;443&lt;/code&gt;&lt;/strong&gt;. Setting up certbot was easy, as shown in the 
DigitalOcean tutorial above. CertBot takes your domain and hooks you up with an 
SSL certificate, which you have to renew every 90 days by typing in &lt;code&gt;certbot renew&lt;/code&gt;.
Certbot also takes care of adding the certificate to your NGINX config automatically
so you don't have to do anything. However, when I tried hitting the link via 
&lt;code&gt;https://&lt;/code&gt; instead of &lt;code&gt;http://&lt;/code&gt;, the web browser would time out. I tried all 
of the follwing, in order after that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chrome inspector, to see if the request is going through. Request was going through&lt;/li&gt;
&lt;li&gt;Change NGINX config to listen on port 80 and serve pages. Worked on port 80&lt;/li&gt;
&lt;li&gt;Duplicated the NGINX config and ripped the SSL stuff, to go back to normal. Worked&lt;/li&gt;
&lt;li&gt;Tried restoring the SSL config lines one line at a time. Did not work&lt;/li&gt;
&lt;li&gt;Tailed the logs. Nothing coming in.&lt;/li&gt;
&lt;li&gt;Realized that there might be a firewall. Checked &lt;code&gt;sudo ufw status&lt;/code&gt;. Firewall 
  was inactive&lt;/li&gt;
&lt;li&gt;Created a firewall and allowed selective ports through. No change, https:// 
  requests still timed out&lt;/li&gt;
&lt;li&gt;Realized that LightSail might have it's own firewall. Logged in to lightsail
  and saw the firewall settings. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="motherfucker" src="https://i.gifer.com/2Jc.gif"&gt;&lt;/p&gt;
&lt;p&gt;Needless to say, I took the rest of the day off after that.&lt;/p&gt;
&lt;h2&gt;Conclusion and next steps&lt;/h2&gt;
&lt;p&gt;While I have a website that is fortunately up and running well, there are still
a lot of things left to do. Some of those include:
- Registering on search engines
- SEO with sitemaps and &lt;code&gt;robots.txt&lt;/code&gt;
- Adding Google Analytics
- Adding some ads?
- Improvements on the app itself: more cutoff data and smarter suggestions&lt;/p&gt;
&lt;p&gt;All of these things will be tackled one by one, but developing and setting up
my first full stack app was a challenging experience and certainly one of the
trickier projects I have undertaken so far.&lt;/p&gt;
&lt;p&gt;The WebApp is live at &lt;a href="https://apps.aniruddhadeb.com/IIT_dep_finder"&gt;https://apps.aniruddhadeb.com/IIT_dep_finder&lt;/a&gt;.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Python"></category><category term="Web Development"></category></entry><entry><title>Setting up my Mac (again)</title><link href="https://aniruddhadeb.com/articles/2020/mac-system-setup.html" rel="alternate"></link><published>2020-10-14T22:48:00+05:30</published><updated>2020-10-14T22:48:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-10-14:/articles/2020/mac-system-setup.html</id><summary type="html">&lt;p&gt;This was also published on &lt;a href="https://github.com/Aniruddha-Deb/SystemSetup"&gt;GitHub&lt;/a&gt;. 
The GitHub version is more up-to-date, and I won't be updating this one as 
frequently.&lt;/p&gt;
&lt;h1&gt;System Setup Log&lt;/h1&gt;
&lt;p&gt;My MacBook battery started to swell around a year back, and the machine 
became unusable 6 months ago and was put into temporary hibernation. Post my â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This was also published on &lt;a href="https://github.com/Aniruddha-Deb/SystemSetup"&gt;GitHub&lt;/a&gt;. 
The GitHub version is more up-to-date, and I won't be updating this one as 
frequently.&lt;/p&gt;
&lt;h1&gt;System Setup Log&lt;/h1&gt;
&lt;p&gt;My MacBook battery started to swell around a year back, and the machine 
became unusable 6 months ago and was put into temporary hibernation. Post my 
exams, I did a battery replacement and the computer was out of the hospital 
today, with a fresh operating system and a formatted disk. The last time I set 
this machine up, I did a halfhearted job of logging the process. This time, I've
done it properly :)&lt;/p&gt;
&lt;h2&gt;The Procedure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;User Settings&lt;ul&gt;
&lt;li&gt;System came with my home directory set as 'aniruddadeb' and User name as 
  'Anirudda Deb'&lt;/li&gt;
&lt;li&gt;Create a new admin account, log out of current account and into admin account&lt;/li&gt;
&lt;li&gt;In admin account, rename home directory to 'Sensei' (or whatever name), 
  and then in Preferences-&amp;gt;Users and Groups, unlock and ctrl-click on your 
  account for 'advanced settings'&lt;/li&gt;
&lt;li&gt;In advanced settings, change the name to your name and name of the home 
  directory to the name of your home directory. Make sure user name is same 
  as that of home directory.&lt;/li&gt;
&lt;li&gt;Restart, log back in and delete admin account.&lt;/li&gt;
&lt;li&gt;Set the computer HostName, LocalHostName and ComputerName to MacBook-Pro:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo scutil --set HostName MacBook-Pro  
sudo scutil --set LocalHostName MacBook-Pro  
sudo scutil --set ComputerName MacBook-Pro  
dscacheutil -flushcache  
&amp;lt;restart&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;System Prefs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Resolution of 1440x900 (Displays)&lt;/li&gt;
&lt;li&gt;Uncheck natural scroll direction (Trackpad-&amp;gt;Scroll and Zoom)&lt;/li&gt;
&lt;li&gt;Use F1, F2 as function keys (Keyboard)&lt;/li&gt;
&lt;li&gt;Don't show input menu in menu bar (Keyboard-&amp;gt;Input Sources)&lt;/li&gt;
&lt;li&gt;Dark Mode&lt;br&gt;
&lt;img alt="dark side meme" src="res/darkside.jpeg"&gt;&lt;/li&gt;
&lt;li&gt;Change computer name to MacBook-Pro (Sharing)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google Chrome:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download, drag and drop&lt;/li&gt;
&lt;li&gt;Sign in and sync stuff&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sublime Text&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download, drag and drop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Content&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transfer personal files from HDD&lt;/li&gt;
&lt;li&gt;Screen background to &lt;code&gt;hackerfx_img.jpg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Things 3&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install from Mac App Store&lt;/li&gt;
&lt;li&gt;Sign in and sync tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;iTerm 2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download, drag and drop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By now, the system should be looking pretty good. Catalina uses &lt;code&gt;zsh&lt;/code&gt; rather than 
bash, and clang rather than gcc, so porting some stuff over will be tricky, but 
we'll get to that in a minute.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git&lt;ul&gt;
&lt;li&gt;download mac installer from &lt;code&gt;git-scm.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ctrl-click and click 'open' (security won't let you click to open)&lt;/li&gt;
&lt;li&gt;follow installer guidelines
? Will xcode command line tools eat this up?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;\&amp;lt;DON'T DO THIS!&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;ul&gt;
&lt;li&gt;Download latest stable installer from web&lt;/li&gt;
&lt;li&gt;Double click and install &lt;br&gt;
! Don't do this because this does not install python properly; you have to 
  hack around it and do a ton of exports and stuff. I had to uninstall
  python after this, using instructions from &lt;a href="https://stackoverflow.com/questions/3819449/how-to-uninstall-python-2-7-on-a-mac-os-x-10-6-4/3819829#381982"&gt;here&lt;/a&gt;9
  and &lt;a href="https://superuser.com/questions/276840/uninstalling-python-3-on-a-mac"&gt;here&lt;/a&gt;. 
  Best way to install is to use &lt;code&gt;brew&lt;/code&gt; (this keeps the python updated) and 
  &lt;code&gt;pyenv&lt;/code&gt;, so first install &lt;code&gt;brew&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;\&amp;lt;/DON'T DO THIS!&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;XCode Command Line Tools&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC, &lt;code&gt;clang&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt; etc etc&lt;/li&gt;
&lt;li&gt;Download from developer.apple.com, mount, use .pkg installer&lt;/li&gt;
&lt;li&gt;It's a 400 MB download and takes 2.54 GB of space on the system.&lt;/li&gt;
&lt;li&gt;This doesn't eat up git (&lt;code&gt;git --version&lt;/code&gt; still gives git 2.27, so yay!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Homebrew&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Needed for practically everything :P&lt;/li&gt;
&lt;li&gt;visit brew.sh and copy-paste the installation command&lt;/li&gt;
&lt;li&gt;Again, a huge download here (350 MB)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;pyenv&lt;/code&gt; to download and install python, as shown in the article https://opensource.com/article/19/5/python-3-default-mac&lt;/li&gt;
&lt;li&gt;In short, do the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew install pyenv
pyenv install &lt;span class="m"&gt;3&lt;/span&gt;.9.0 &lt;span class="c1"&gt;# replace with latest python version&lt;/span&gt;
pyenv global &lt;span class="m"&gt;3&lt;/span&gt;.9.0 &lt;span class="c1"&gt;# set 3.9.0 as global version&lt;/span&gt;
pyenv version &lt;span class="c1"&gt;# double check version&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;if command -v pyenv 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then\n  eval &amp;quot;$(pyenv init -)&amp;quot;\nfi&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc &lt;span class="c1"&gt;# voodoo magic that allows pyenv to work&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and now do &lt;code&gt;python -V&lt;/code&gt; and &lt;code&gt;pip -V&lt;/code&gt; to verify that python 3.9.0 is loaded&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Vim&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Copy &lt;code&gt;.vim&lt;/code&gt; and &lt;code&gt;.vimrc&lt;/code&gt; from previous system&lt;/li&gt;
&lt;li&gt;check if clipboard copy/paste is enabled: &lt;code&gt;vim --version | grep clipboard&lt;/code&gt;, 
  a + sign appears if clipboard is enabled&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ZSH&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edit &lt;code&gt;.zprofile&lt;/code&gt; and add &lt;code&gt;export CLICOLOR=1&lt;/code&gt; for coloured output from commands&lt;/li&gt;
&lt;li&gt;add prompt tweaks &lt;code&gt;PS1='%F{green}%n@%m:%f %F{blue}%~%f %% '&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;iTerm2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tweak profile; first, create a new profile&lt;/li&gt;
&lt;li&gt;Change background color to &lt;code&gt;333333&lt;/code&gt;, foreground to &lt;code&gt;dddddd&lt;/code&gt; and other colors
  to pastel colours&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mail&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Log in to google&lt;/li&gt;
&lt;li&gt;Configure signatures, calendars, mail folders etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Projects&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is the meaty part. Start with the blog:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone --select-branch --branch &lt;span class="nb"&gt;source&lt;/span&gt; https://github.com/Aniruddha-Deb/aniruddha-deb.github.io 
mv aniruddha-deb.github.io blog
&lt;span class="nb"&gt;cd&lt;/span&gt; blog
virtualenv venv
&lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;venv&amp;quot;&lt;/span&gt; &amp;gt; .gitignore
pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;then whip up this article. I ran into a small hiccup while using &lt;code&gt;make html&lt;/code&gt;: 
the version of Pelican that &lt;code&gt;pip&lt;/code&gt; installed was 4.5.0, and that broke with the 
old Flex theme. I had made some modifications to the theme (MathJax) and didn't 
want to lose them by upgrading. So, I downgraded pelican to 4.2.0 and then made
the files. Takeaway is use &lt;code&gt;make html DEBUG=1&lt;/code&gt; for debugger output. Do a &lt;code&gt;make serve&lt;/code&gt;
to check out formatting, after which do &lt;code&gt;make github&lt;/code&gt; to push to github pages, which is what
you're reading now (this article has been made from the mac :)&lt;/p&gt;
&lt;p&gt;for further updates, refer to the repository linked above.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>Cleared OCAJP with 94% - My Experience</title><link href="https://aniruddhadeb.com/articles/2018/ocajp.html" rel="alternate"></link><published>2018-06-06T22:05:00+05:30</published><updated>2018-06-06T22:05:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2018-06-06:/articles/2018/ocajp.html</id><summary type="html">&lt;p&gt;How I prepared and cleared the OCA examination in my summer holidays&lt;/p&gt;</summary><content type="html">&lt;p&gt;This was originally posted on &lt;a href="https://coderanch.com/t/695020/certification/Cleared-OCAJP-Experience"&gt;CodeRanch&lt;/a&gt;:&lt;/p&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;I'm a 15 year old student who has just cleared his secondary education. I have a knack for computers and am currently building my online profile (&lt;a href="https://github.com/Aniruddha-Deb"&gt;github&lt;/a&gt;, &lt;a href="aniruddha-deb.github.io"&gt;blog&lt;/a&gt;, etc.) I already had ~2 years of experience in java and had been eyeing the Oracle certification for quite some time. Eventually, in the summer vacations, I decided to go all in, bought a few books and sat down and studied for the exam. &lt;/p&gt;
&lt;h3&gt;Process&lt;/h3&gt;
&lt;p&gt;The books that I used for the certification were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OCA Java SE 8 Programmer I - Mala Gupta&lt;/li&gt;
&lt;li&gt;OCA/OCP Java 8 practice tests - Selikoff and Boyarsky&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I spent around 3 weeks studying for the exam with an average time of ~1.5 hours per day. I would go through the chapters and topics in Mala Gupta and do the respective questions for those topics from the practice tests book. I also wrote a lot of practice programs to wrap my head around some new concepts (Java 8 Date/Time API for instance). Most of the content was easy as I had already studied it in school and had prior programming experience. Personally for me, the hard parts were the new Java 8 features and interfaces in Java 8 (this may vary from person to person). My advice would be to spend extra time on the harder parts and comparatively less time on the easier parts (looping and decisions was easy - I went through those in a day each). &lt;/p&gt;
&lt;p&gt;Most of my practice programs were written in Eclipse (even though most books ask you to NOT do this). I found eclipse's autocompilation features handy for spotting errors. I then got a chance to tweak the code to see if the error reappears in real time, something that iterative compilation will never be able to do. That did help me learn faster. (again, my methods may not necessarily resonate with someone else's) &lt;/p&gt;
&lt;h3&gt;Before giving the exam&lt;/h3&gt;
&lt;p&gt;Once I had finished the syllabus, I went through the two practice tests that I had - one from Mala Gupta and one from Selikoff and Boyarsky. I scored 85-86% on both tests. I also gave the free enthuware test containing 25 questions and scored 80% in that. I did not pay for the full enthuware mock test set as I felt pretty comfortable with my performance. &lt;/p&gt;
&lt;h3&gt;Giving the exam&lt;/h3&gt;
&lt;p&gt;There was a pearson VUE Centre right next to where I live (less than a kilometre away), which simplified travel quite a bit. Time management is not a problem in this exam. I repeat that - time management is NOT a problem. I finished all the questions in around one hour and 15 minutes and spent the rest of the time checking the answers. You will not be hard pressed for time in this exam, so take your time and think through every question calmly and carefully. Do not submit before time. &lt;/p&gt;
&lt;h3&gt;After the exam&lt;/h3&gt;
&lt;p&gt;Amazingly, I did not get my results in 30 minutes. It took close to one and a half hours for my results to come, and around one and a half days for my certificate to be generated. This is something oracle can definetly work on. &lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;If you're a young guy (like me) reading this, my advice would be to give this exam only if you are confident of your capabilities in Java and are passionate about a future in computers. You will also spend a significant amount of your vacation time in studying for this exam. in addition to being slightly tricky, this exam is also expensive and will have to be funded by your parents. Also, there are no short term benefits to clearing this exam: the benefits will only show 10 years later when you turn up for a job interview and proudly proclaim you cleared the OCA at the age of 15. If you're okay with the above, then best of luck for the exam! &lt;/p&gt;
&lt;p&gt;p.s: all the code that I wrote for the exam is available &lt;a href="https://github.com/Aniruddha-Deb/OCAPrep"&gt;here&lt;/a&gt;. May come in handy to other aspirants. &lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;</content><category term="Programming"></category></entry><entry><title>Python Crash Course</title><link href="https://aniruddhadeb.com/articles/2017/python-crash-course.html" rel="alternate"></link><published>2017-12-22T10:30:00+05:30</published><updated>2017-12-22T10:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2017-12-22:/articles/2017/python-crash-course.html</id><summary type="html">&lt;p&gt;My initial experience with learning Python and using it to create a GTD app&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I felt the need of creating a to-do app based on the getting things done principle (link here). I had been using MyLifeOrganized in a virtual machine on my mac, but it just wasn't cutting it. Things 3 and OmniFocus for Mac were too pricey and other web-based todo apps like Trello and Todoist didn't suit me very much. As a result, I decided to jump into some code and create a custom to-do mac app.&lt;/p&gt;
&lt;p&gt;My basic requirements were very humble: I need a task list in which I can create, read, update and delete tasks easily. I eventually decided to go with a unix-like command line application. Unix apps are usually made in C or Shell Script. My C is pathetic at the very least and I find shell script to be.. Queer. Java was too heavyweight a language to code a simple shell utility in, so I chose to go with Python.&lt;/p&gt;
&lt;p&gt;I had minimal experience with python in the past. I barely knew the basic language constructs and features. Luckily, python has a very shallow learning curve. About two hours with google and my python concepts were acceptable enough to start coding. Initially, python felt very much like shell script, just slightly more verbose. The lack of semicolons in python still irritates a Java programmer like me and the absence of braces makes the code feel very different compared to Java. After a few days of coding, these features started to grow on me. &lt;/p&gt;
&lt;p&gt;The first draft of GTD.py was a disaster. I used a text file to store all the application data and there was a ton of File I/O involved. Combine that with me using the google python fire library like an amateur and things quickly went downhill. Every time the code ran, it threw a horrendous looking python exception at my face (coming from java, python exceptions are much more beautiful compared to terrible.java.Stack.traces). Python looked like a terrible choice of language, as I could have a similar Java program up and running in about 10 minutes.&lt;/p&gt;
&lt;p&gt;Eventually, though, my comfort with the language grew. I ditched the text based approach and decided to use an SQLite database to store the information. I also discarded python fire and chose to use argparse. These two libraries gave me a decent challenge to build the app.&lt;/p&gt;
&lt;p&gt;The second draft came out much better than the first. The program is now usable (still needs a little refactoring). At the time of writing, I am still getting used to python programming conventions (reserved_chars as opposed to reservedChars) and the strange looking import statements. The language is still much less verbose as compared to Java and with enough practice, I may end up being more productive in Python. There's still a long way to go - I barely know the standard libraries and the functions. I also need to get to know the python runtime well enough before I start coding serious application critical components in python. The initial impression of python as a language for me was decently good. Would be interesting to see where I stand in about two to three months with the language.&lt;/p&gt;
&lt;p&gt;Check out the GTD.py code &lt;a href="https://github.com/Aniruddha-Deb/GTD.py"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Good luck to all those starting their python journey!&lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;</content><category term="Programming"></category></entry></feed>