<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Aniruddha Deb</title><link href="https://aniruddhadeb.com/" rel="alternate"></link><link href="https://aniruddhadeb.com/feeds/all.atom.xml" rel="self"></link><id>https://aniruddhadeb.com/</id><updated>2023-07-07T15:30:00+05:30</updated><entry><title>Intern Ashes</title><link href="https://aniruddhadeb.com/articles/2023/intern-ashes.html" rel="alternate"></link><published>2023-07-07T15:30:00+05:30</published><updated>2023-07-07T15:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2023-07-07:/articles/2023/intern-ashes.html</id><summary type="html">&lt;p&gt;&lt;img alt="Gardens of Versailles" src="/articles/2023/res/versailles.jpg"&gt;&lt;/p&gt;
&lt;p&gt;[If you haven't read the previous article in this series, check out 
&lt;a href="https://aniruddhadeb.com/articles/2023/intern-ignition.html"&gt;Intern Ignition&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;In the weekends of my internship, and in the days that followed, I got to tour 
Europe a bit. What follows is a small travelogue of my experiences in these
two months&lt;sup&gt;&lt;a href='#footnote-1'&gt;1&lt;/a&gt;&lt;/sup&gt;, &lt;/p&gt;
&lt;p&gt;&lt;link rel="stylesheet" type="text/css" href="/articles/2023/res/center_captions.css"&gt;&lt;/p&gt;
&lt;h2&gt;Stroopwaffel&lt;/h2&gt;
&lt;p&gt;Optiver gave …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Gardens of Versailles" src="/articles/2023/res/versailles.jpg"&gt;&lt;/p&gt;
&lt;p&gt;[If you haven't read the previous article in this series, check out 
&lt;a href="https://aniruddhadeb.com/articles/2023/intern-ignition.html"&gt;Intern Ignition&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;In the weekends of my internship, and in the days that followed, I got to tour 
Europe a bit. What follows is a small travelogue of my experiences in these
two months&lt;sup&gt;&lt;a href='#footnote-1'&gt;1&lt;/a&gt;&lt;/sup&gt;, &lt;/p&gt;
&lt;p&gt;&lt;link rel="stylesheet" type="text/css" href="/articles/2023/res/center_captions.css"&gt;&lt;/p&gt;
&lt;h2&gt;Stroopwaffel&lt;/h2&gt;
&lt;p&gt;Optiver gave us a goodie bag when we arrived, and among other things, it 
contained a box of Stroopwaffel!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gardens of Versailles" src="/articles/2023/res/stroopwaffel.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Stroopwaffel are really thin waffles filled with caramel, and they taste
amazing! The bag was also filled with other things to see and do in Amsterdam, 
and in typical college student fashion, I did none of those. &lt;/p&gt;
&lt;h3&gt;No Tulips&lt;/h3&gt;
&lt;p&gt;All but one of my IITD batchmates got away to see the Tulips when they landed,
and for good reason: Sunday was the last day Keukenhof would be open! 
Unfortunately my flight was delayed by an hour and even ignoring the jetlag and 
fatigue, it was not something I wanted to do after a 9-hour flight.&lt;/p&gt;
&lt;p&gt;The first thing that hits you is that Amsterdam is windy. I don't mean 'stiff breeze'
windy, I mean upturn-your-umbrella windy. And chilly. The only way to stay warm 
is to have a good jacket or stay in the sunlight. Which there's a lot of, 
considering sunset happens at 9:30-10:00 PM in the summers.&lt;/p&gt;
&lt;p&gt;The first thing I did was walk down for lunch. Europe is beautiful as long as
your eyes don't look at the ground: beautiful trees, lot of greenery, very
walkable roads with wide sidewalks for both cycles and people and large
well-marked crosswalks. Looking down, you're greeted with the umpteen butts of
cigarettes people stamp out. It's truly a luxury to be able to smoke: if
breathing the air doesn't eventually kill you, why don't you do it a favour and
speeden up the process?&lt;/p&gt;
&lt;p&gt;Another beautiful thing about Europe is the road rules. The first three crossings
I waited at all had the cars come to a stop and gesture me to cross. It was only
at the fourth crossing, a small cycle-lane that this sweet old grandma slowed 
down and said in English, "You have the way!". Wow, I didn't know that! Thank
you, kind granny!&lt;/p&gt;
&lt;p&gt;Only after getting back to my room and googling did I realize that pedestrians
have the way everywhere: pedestrians &amp;gt; cycles &amp;gt; cars in Amsterdam. Amazing. The
only bad thing about this is that I would have to unlearn this in India, and not
doing so would be fatal. Quite literally.&lt;/p&gt;
&lt;p&gt;But enough about rules. Let's go somewhere!&lt;/p&gt;
&lt;h3&gt;Den Haag&lt;/h3&gt;
&lt;p&gt;The first weekend getaway was The Hague (&lt;em&gt;Den Haag&lt;/em&gt; in Dutch), and it seemed
like a quieter, less crowded version of Amsterdam. The Netherlands is a tiny 
country, and insanely well-connected by rail: you can go from one end to
another in less than 2 hours, and the trains themselves are incredible. &lt;/p&gt;
&lt;p&gt;After arriving, We grabbed an early-morning sausage roll from the Albert Heijn
at the station and strolled aimlessly through the streets early in the morning,
deciding where to go. The first stop was Madurodam. How tourist-y!&lt;/p&gt;
&lt;p&gt;&lt;img alt="madurodam" src="/articles/2023/res/madurodam.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I would have assumed Madurodam is an amusement park, if not for the infographic
about it being a war memorial at the start. It was made in memory of &lt;a href="https://en.wikipedia.org/wiki/George_Maduro"&gt;George
Maduro&lt;/a&gt;, a Dutch war hero. It's an 
amazing park, and even at 9 AM in the morning, it was overrun by Gujarati 
tourists. An interesting distinction I noticed was that the Gujarati
tourists would take pictures of anything and everything, including themselves
while the European tourists were just chilling with their partners and children.&lt;/p&gt;
&lt;p&gt;Madurodam also reminded me of the Doraemon episode where Suneo went to Holland
on a tour, and boasted about it to everyone. He also unfortunately lost his
camcorder there. Nobita goes to Doraemon and says that he wants a Holland tour
too. Doraemon comes up with a gadget that shows them scenes of any place in the
world live, and he invites all his friends to his home. As Doraemon shows them
the scenes in Holland (Madurodam, canals etc), Suniyo sulks while Nobita is
very happy. Soon, they come across a bench with a camcorder on it and they zoom
in, and it turns out it's Suneo's camcorder. Suneo leaps at the camcorder, only
to punch a hole through Nobita's sliding door and break the gadget, and not get
his camcorder back. &lt;strike&gt;If you know this episode's name and have a link to it, 
please let me know; Google is clueless and ChatGPT hallucinates&lt;/strike&gt;&lt;/p&gt;
&lt;p&gt;EDIT: This is Season 6, Episode 34 (No. 778), &lt;a href="https://anime.stackexchange.com/questions/68178/doraemon-episode-where-suneo-goes-to-holland-on-tour"&gt;The Sight Seeing Window&lt;/a&gt;.
The original Japanese version is &lt;a href="https://archive.org/details/doraemon-1979-994-stories/Doraemon+(1979)+-+JP+RAW/TV+Anime/Doraemon+(1979)+-+Story+0778+(EX-CS2).mp4"&gt;here&lt;/a&gt;, 
while a dubbed Hindi version can be found &lt;a href="https://www.dailymotion.com/video/x8mau7o"&gt;here&lt;/a&gt; :)&lt;/p&gt;
&lt;p&gt;The next stop after Madurodam was the Beach! We didn't step into the water because
it was super cold for May, and the beach was mostly empty as well. We walked 
around (under?) the pier, took some pictures and enjoyed the breeze. &lt;/p&gt;
&lt;p&gt;&lt;img alt="beach" src="/articles/2023/res/hague_beach.jpg"&gt;
&lt;em&gt;Cold water, colder wind&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Next stop after that was Escher in het Paleis (Escher in the Palace). An 
interesting thing about European culture is that they believe you when you tell 
them you're students: I wasn't asked to prove this explicitly (ok, maybe at the
Antwerp museum and the Vatican Museum). Everywhere else, it was basically a free
pass. Back on topic: Escher in the Palace was definetly the highlight of this
trip, and probably the best museum experience I've had. It was slow-moving, 
you could take your time with the portraits, get as close as you wanted to and
most of them were originals! My first brush with Escher was on the screensavers
of the nook I used to own back when I was a kid, and it was amazing to finally
see all of his work up close.&lt;/p&gt;
&lt;p&gt;&lt;img alt="eye" src="/articles/2023/res/escher_eye.jpg"&gt;
&lt;em&gt;Eye (M.C. Escher, 1946)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ants" src="/articles/2023/res/escher_ants.jpg"&gt;
&lt;em&gt;Mobius strip II (M.C. Escher, 1963)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ants" src="/articles/2023/res/escher_fishes.jpg"&gt;
&lt;em&gt;Circle limit III (M.C. Escher, 1959). Inspired by the structure of &lt;a href="https://personal.math.ubc.ca/~cass/coxeter/r.html"&gt;Coxeter Groups&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Soon after, we dropped down to the city center for lunch and took the train to 
our next stop that evening&lt;/p&gt;
&lt;h3&gt;Rotterdam&lt;/h3&gt;
&lt;p&gt;Rotterdam is the more modern cousin of Amsterdam, who always wears trackpants
and mirrored sunglasses. Rotterdam is filled with skyscrapers that you need to 
crane your neck to look at, and amazing bridges. It's a shame, then, that their
metro system doesn't support using credit cards, and that you need to buy a 
ticket using WiFi. Since we had exhausted our mobile data and my battery was 
near-dead, we totally did not travel on that tram without a ticket. Believe me.&lt;/p&gt;
&lt;p&gt;&lt;img alt="erasmus bridge" src="/articles/2023/res/rotterdam.jpg"&gt;
&lt;em&gt;Erasmus bridge&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="euromast" src="/articles/2023/res/euromast.jpg"&gt;
&lt;em&gt;Euromast&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The only places we got a chance to visit here were Erasmusbrug and Euromast. We 
dropped down to a bar just below Erasmusbrug and asked them for a glass of tap 
water, and they obliged :) refreshed, we then walked across Erasmusbrug and 
back. There was a small section of the bridge that was filled with locks: couples
would add a lock to a rung to signify their love wouldn't break until the lock
did. Cute concept &amp;lt;3&lt;/p&gt;
&lt;p&gt;After walking back, we took the tram to Euromast. There were two tickets: one 
that took you to the observation deck, and one that would seat you in a torus and 
take you all the way up the mast. Going up to the observation deck is good enough,
because there's a huge line that loops all the way around for going up.&lt;/p&gt;
&lt;p&gt;&lt;img alt="rotterdam" src="/articles/2023/res/euromast_view.jpg"&gt;
&lt;em&gt;The view from the observation deck&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After Euromast, since everything was closing down, we sat in the park next to 
it in the setting sun for 30 minutes, enjoying the breeze and nature. Soon after,
we boarded the train back to Amsterdam.&lt;/p&gt;
&lt;h3&gt;Zandvoort&lt;/h3&gt;
&lt;p&gt;After the Belgium weekend, sometime in June when the sun was more abundant with 
it's gifts, we visited Zandvoort beach to surf. With high hopes, we entered the
surf shack to rent some equipment, only to find out that their instructor had
just come out of the water because of no waves. We were advised to pass till 
there were more waves or come back on a later day :(&lt;/p&gt;
&lt;p&gt;So we did the next best thing: went and waded in the water :) after half an 
hour of wading in the waves (the water was too shallow to swim), we came out 
and lay on the beach, soaking in the sun&lt;sup&gt;&lt;a href='#footnote-2'&gt;2&lt;/a&gt;&lt;/sup&gt;.
Then we had some ice-cream, dried up and set off for the circuit. The circuit 
had a Classic Car Grand Prix underway, and the roars of the engines could be 
heard all the way from the beach. Since it was almost over, we managed to get
in without tickets (like the amateur backpackers we were), and when we reached,
it was truly a sight to see and hear. What followed was ten minutes of our
ears being ripped off our head. Classic cars = Big roaring V12's and V10's = 
Lots of sound. It was pure petrolhead bliss to sit there and hear those beasts
roar around the circuit.&lt;/p&gt;
&lt;p&gt;The post-race podium featured a procession of the cars that participated, and 
there were also some classic beauties parked around the paddock.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Lancia" src="/articles/2023/res/lancia.jpg"&gt;
&lt;em&gt;Henri Toivonen's Lancia 037&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ferrari" src="/articles/2023/res/wolfgang_trips_ferrari.jpg"&gt;
&lt;em&gt;Wolfgang von Trips' Ferrari 156 'sharknose'&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We then took the train back to Haarlem, then the bus from Haarlem back to 
Amsterdam. I had marinated some Chicken with the hopes of making Tandoori, and
the other folks bought some pizza/pasta from the nearby store. We then chilled
in my room, watching F1 Qualifying and cooking / eating Tandoori Chicken.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tandoori" src="/articles/2023/res/tandoori_chicken.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Amsterdam&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Amsterdam" src="/articles/2023/res/amsterdam.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Amsterdam itself is an amazing city, and like every city-dweller, I didn't visit
the tourist spots in the city itself. I've heard that the Rijksmuseum is very
good, as is the Van Gogh Museum. Several other interns also went to the Heineken
Experience, but I don't drink so that was off the cards.&lt;/p&gt;
&lt;p&gt;My routine in Amsterdam mostly boiled down to cycling to work, working, cycling
back and then going for a stroll along the canal nearby. I stayed at 
Wibautstraat, and I would walk a kilometre or two along the canal most days, 
enjoying the breeze and the scenic beauty.&lt;/p&gt;
&lt;p&gt;The parks are also great places to visit, and most weekends were 
spent either staying in and working on something fun, cooking and enjoying
the sun in the park nearby. We also took a Mokumboot on the canals one day with
a bunch of snacks for a couple of hours, and it was great.&lt;/p&gt;
&lt;h2&gt;Waffles&lt;/h2&gt;
&lt;p&gt;&lt;img alt="waffles" src="/articles/2023/res/waffles.jpg"&gt;&lt;/p&gt;
&lt;p&gt;We visited Belgium on one of the weekends: the plan was to stay over at Antwerp
for a night, but our BnB host had a water infiltration and we got to know of
this only after we had already boarded the bus to Antwerp. In typical undergrad
fashion, we decided to take things as they come and deal with this later.&lt;/p&gt;
&lt;p&gt;The Bus dropped us off close to the city center, and the first thing we did 
was grab some waffles and stroll along the coast. We came across a small fort 
on the coast. Then realizing the Museum Aan de Stroom was close by, we continued
to walk along that street, reaching MAS in 10 minutes. &lt;/p&gt;
&lt;p&gt;&lt;img alt="mas" src="/articles/2023/res/mas.jpg"&gt;
&lt;em&gt;Museum aan de Stroom&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The MAS is beautifully constructed; the windows are along the staircase / floors
internally that take you up the building, and every floor is dedicated to one 
aspect of Antwerp: the port, the people, Belgium, and so on. It feels very much
like a classical museum, but this also makes it a bit boring to be inside of. 
The MAS is capped off with an observation deck, which gives you a 360-degree 
view of Antwerp.&lt;/p&gt;
&lt;p&gt;&lt;img alt="antwerp" src="/articles/2023/res/antwerp.jpg"&gt;
&lt;em&gt;Antwerp from the top of MAS&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We left MAS and then decided to visit the Port authority building. Not 
realizing that it's huge, and that it's farther than it looks, our strategy of
walking in the direction of the building was a) exhausting, and b) frusturating. 
We finally opened Google maps to see that it was a decently long walk (~3 km) 
to the building. Not giving up, we started walking and finally made it!&lt;/p&gt;
&lt;p&gt;Only to find out that it's closed on Saturdays. It's anyway a government
building, so they wouldn't have let us in. Sour grapes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Port Authority Building" src="/articles/2023/res/zaha_hadidplein.jpg"&gt;
&lt;em&gt;Port Authority Building. Designed by Zaha Hadid.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After this walk, we had little time to spend, and the prospects of rooming up
with the other group visiting Brussels were also growing slim, so we decided to
take the afternoon bus back to Amsterdam. We then came back to the city centre
and looked around the Cathedral and Grotemarkt.&lt;/p&gt;
&lt;p&gt;&lt;img alt="grotemarkt" src="/articles/2023/res/grotemarkt.jpg"&gt;
&lt;em&gt;Grotemarkt&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This was followed by Lunch and some Belgian chocolate shopping, after which we
took the subway to the bus stop and took the bus back to Amsterdam.&lt;/p&gt;
&lt;h1&gt;Post Internship&lt;/h1&gt;
&lt;p&gt;I had booked my return flight on sixth noon, which gave me four and a half days 
to backpack across Europe. This was as close to &lt;em&gt;Zindagi na Milegi Dobara&lt;/em&gt; as 
I'll get to in my life: being a young twentysomething in Europe, with enough 
money to backpack across it, and having friends to do it with won't happen
every year, after all :)&lt;/p&gt;
&lt;p&gt;I had to take care of my luggage first. Fortunately, Schiphol Airport will store 
your luggage for you at a reasonable cost of €9 per 24 hours per bag. After 
lugging my one suitcase down to the luggage hold with a friend, all we had to 
do was board the night bus to Paris!&lt;/p&gt;
&lt;h2&gt;Crepes&lt;/h2&gt;
&lt;p&gt;&lt;img alt="crepe" src="/articles/2023/res/crepe.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Paris smells sweetly smoky. It's the same smell as the scented cigarettes
everyone smokes so fashionably, just softer. Paris Bercy-Seine bus stop, 
however, smells of pee as well. It's worse than an Indian train station when 
it comes to sanitation. It was also raining when we arrived at 6 AM, and having
to wait there for an hour and twenty minutes for a friend to arrive was &lt;em&gt;the 
most romantic introduction to the city of romance a romantic could dream about&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;After regrouping, we went to the Metro. I won't launch into a full-fledged rant 
about the metro (have saved that for later), but Paris uses these arcane ticket-
checking machines that won't accept your card. We took a day-pass for the metro,
and then had breakfast at McDonalds (the quantity wasn't great).&lt;/p&gt;
&lt;p&gt;Since it was still drizzling, the first plan of action was to get out at Charles
de Gaulle and roam around Central Paris a bit. We visited the Tuilleries Gardens
first, then since the Louvre was close by, we saw it from the outside.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Louvre" src="/articles/2023/res/louvre.jpg"&gt;
&lt;em&gt;Louvre from outside. The line to go in had a one hour delay, and needed tickets.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I don't remember what the plan after that was, but our bags were too heavy and 
the rain was as well, so we went to the nearest metro station and checked in 
our luggage at the hotel. The hotel was in a nice spot, so we left and strolled
through the streets of Paris. They were quite narrow, and uphill at times. With
the help of Google maps, we finally managed to come to this beautiful building&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pantheon" src="/articles/2023/res/pantheon.jpg"&gt;
&lt;em&gt;Pantheon&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After that we dropped down to a Japanese place nearby for lunch, and then 
went back to strolling. We walked across some bridges on the Seine, and then 
past the Notre-Dame, which was still being reconstructed. Then we went to the 
Palais Garnier via metro.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Garnier Palace" src="/articles/2023/res/palais_garnier.jpg"&gt;
&lt;em&gt;Palais Garnier, Ballroom&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The Palais Garnier was... Palatial, for lack of a better adjective. It adjoined
the Opera, and had these amazing balconies where people were mostly clicking
pictures. There was also an Opera Exhibit nearby, where they showed costumes 
that the actors at the Opera wore. It's a very short trip around the palace,
and well worth the time we spent.&lt;/p&gt;
&lt;h3&gt;Ver-sai&lt;/h3&gt;
&lt;p&gt;The first thing we had done after arriving was book tickets to the Palace of 
Versailles for 4:30 PM, and after getting out of the Palais Garnier and going to 
the station in a rush, we scrambled to find and board the train to Versailles.
Surprisingly it wasn't very crowded, and we made it in time.&lt;/p&gt;
&lt;p&gt;Upon reaching the train station at Versailles, the palace itself isn't very far.
It's about a 10-minute walk. Going in was seamless, although the crowds are 
quite thick. What followed was a walkthrough of the palace which was completed
in around half an hour. People were also shuffling forward at a decently fast
pace, not stopping for too long to examine the art, but I did manage to get some 
pictures of the ceilings.&lt;/p&gt;
&lt;p&gt;&lt;img alt="mural" src="/articles/2023/res/versailles_ceiling.jpg"&gt;
&lt;em&gt;Mural on the ceiling&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The hall of mirrors was probably the only thing I really remember. Not only 
because of the historical significance of the room, but also because the 
mirrors seemed slightly oxidized and not too bright.&lt;/p&gt;
&lt;p&gt;&lt;img alt="mirrors" src="/articles/2023/res/mirrors.jpg"&gt;
&lt;em&gt;Can confirm, the hall of mirrors does have mirrors&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We soon got out, and wanted to see the Gardens of Versailles. First of all, the
ticket to the palace does not give you entry to the gardens: those need a 
separate €10 ticket. Secondly, we came out around 5:05 PM, and when we got in 
the queue, the attendant repeately told us that the gardens close at 5:30, and 
that taking the ticket was not worth it. Quite a few people left the queue at 
that point, but we stuck around because we weren't going to come back.&lt;/p&gt;
&lt;p&gt;Was it worth it?&lt;/p&gt;
&lt;p&gt;&lt;img alt="gardens" src="/articles/2023/res/gardens.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Hell yes. We speedran the gardens, which were probably more impressive than the
palace itself. They're absolutely enormous, occupying about twice or thrice the 
area of the palace (if you couldn't make out from the picture above). They're
also immaculately maintained. There was also a fountain show, but it ended soon 
after we reached. After taking some more pictures, we left for the station, 
making it out of the gardens on time. A short dinner at the KFC near the station 
followed, after which we took the train back to Paris.&lt;/p&gt;
&lt;h3&gt;Pah-ree at night&lt;/h3&gt;
&lt;p&gt;We soon got off the train at Paris and had to take a metro with a 
switch-over to reach our hotel. Paris has the worst metro system of any city I
have been to. It's a bunch of matchboxes on tyres (yes, rubber tyres) hurtling
at insane speeds through metre-wide tracks strewn across the city like a kitty
that clawed through it's ball of yarn. You can't even go from one matchbox to
the other, because the carriages are not connected internally. Buses and trams
were also closed when we were in the city because of the riots, and the entire
populace decided to use the metro on Saturday Night. It was breathtaking, as in
my breath was literally taken away after being squeezed among people. Peak
Delhi Metro rush has got nothing on this.&lt;/p&gt;
&lt;p&gt;We finally made it to the Eiffel Tower in one piece. There was a woman who had
married the Eiffel Tower&lt;sup&gt;&lt;a href='#footnote-3'&gt;3&lt;/a&gt;&lt;/sup&gt;, and it's easy
to see why. It's truly a thing of beauty, especially at night when it's lit up.
It lights up slowly at sunset, going from a dull red to a bright yellow, almost
as if the cast iron beams were put in an induction furnace. And if it couldn't
get any better, It bursts into sparkles at 11 PM in the night,&lt;/p&gt;
&lt;p&gt;The Eiffel tower viewing was followed by Crepes at a store nearby: The crepe
maker took his time with the crepes, pouring the dough only when they were 
ordered and never making them en masse. He used a thin squeegee, the kind used 
to wash windows to make them. While the crepes were amazing, I still think my 
mother makes better and flatter &lt;em&gt;dosas&lt;/em&gt; with her &lt;em&gt;ultana&lt;/em&gt; than the crepe maker
made with his sophisticated tooling :)&lt;/p&gt;
&lt;p&gt;The following day, we had to set off to the airport for our flight to Napoli. 
Breakfast at the hotel was just 3 euros, but it was the best croissant I've 
eaten in my life. It was super soft, and the pastry was not flaky at all. It was 
also very hollow on the inside, so you could tear it in half and stuff it with 
butter and jam. It's a shame I realized on the last day just how good Parisian
Croissants are, and I would've loved to try out a &lt;em&gt;boulangerie&lt;/em&gt; if I had more 
time&lt;sup&gt;&lt;a href='#footnote-4'&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;To Paris, with Love&lt;/h3&gt;
&lt;p&gt;I did notice a few things while in Paris: The person from whom we brought the 
Eiffel tower souvenir was Black, the person whose cart we approached first 
to grab a crepe was Turkish, and the person serving breakfast at our hotel was
Indian. This makes Paris seem like a very diverse city, but when you notice
that every single person selling Eiffel tower souvenirs was black and every
single cart-owner was Turkish, things look a bit darker (no pun intended). It's 
the sort of thing that won't strike you, until you have friends and family tell 
you that Paris was being rocked by the most violent riots since 2005, after 
a policeman shot dead a boy of color for a traffic offence. Then, the invisible
walls between people become all too clear, and the homogenity breaks down. I 
was fortunately unaffected by the riots, but I pray that things change for the 
better as soon as possible, and that the people of the city of love learn 
to love each other for who they are rather than how they look.&lt;/p&gt;
&lt;h2&gt;Pasta&lt;/h2&gt;
&lt;p&gt;&lt;img alt="pasta" src="/articles/2023/res/pasta.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Soon after Paris, we flew down to Napoli. We had booked a room here for three
nights, and I was looking forward to warmer climates and more beaches.&lt;/p&gt;
&lt;h3&gt;Napoli&lt;/h3&gt;
&lt;p&gt;The area around Napoli Centrale is very well-maintained. It's only when you
walk down a few steps do you come to the suburbs, and find the dumpsters piled 
full of trash, plaster peeling off buildings and both the police and the army 
stationed opposite the bus stop across the street. Yikes.&lt;/p&gt;
&lt;p&gt;Napoli reminded me of North Delhi. Kind people, not-so-great infra, and
crossing roads by waving your hand in front of cars (A skill I've mastered). 
There's a little spark of life behind every street corner: the children playing,
the old men and women sitting at the cafe, the wives drying clothes on the 
small balconies. It almost felt like I was transported back.&lt;/p&gt;
&lt;p&gt;Public transportation in Napoli is a mess, the steets are wide, car-centric and
prone to traffic jams, so we walked 2.5 kilometers to get to the bay. We then
dropped down to a pizza joint nearby to grab some Pizza, and this was the best
pizza I've ever eaten, no question. It felt homely, lively, not overloaded with
cheese or toppings and with just enough crunch on the base. I finished that
pizza entirely, having skipped lunch.&lt;/p&gt;
&lt;h3&gt;Pompeii&lt;/h3&gt;
&lt;p&gt;The plan for the next day was to head to Pompeii in the morning, and the beach
in the afternoon. We took the train to Pompeii from Napoli, and after a short 
walk reached the ruins. Do book your tickets in advance, as there are a lot of 
tour guides asking for high prices. And don't buy any hats or trinkets; they're 
very overpriced. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Pompeii" src="/articles/2023/res/pompeii_bath.jpg"&gt;
&lt;em&gt;Pompeii. I guess people... bathed here?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Walking through the ruins reminded me of Ozymandias: Here stood a nation, once 
the ruler of most of Europe, and all that remains around are ruins. Ruins that
were buried as a consequence of the wrath of nature, not even ruins that fell
into ruin via conquest. Sure, I guess people bathed here and slept there 2000 
years ago, but there was no sense of grandeur looking at them. Or maybe I'm 
not an archaeology / history buff. There were very pretty flowers at a few spots
though, and there was a lovely courtyard garden in one of the uptown villas.
Roman homies had amazing cribs.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pano" src="/articles/2023/res/roman_crib.jpg"&gt;
&lt;em&gt;One of the cleaner panos, if you can ignore my finger&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Meta&lt;/h3&gt;
&lt;p&gt;After Pompeii, the plan was to hop down to Sorrento and take the bus that 
goes along the Amalfi coast, covering all the coastal towns. After getting on 
the train, Vedang said that if we got off at Meta, had lunch and then took 
the bus from Meta itself to Positano rather than going all the way to Sorrento,
we'd be good.&lt;/p&gt;
&lt;p&gt;So we got off at Meta, and started looking for a place to eat. Google Maps led 
us to a supermarket, and we wanted to eat at a proper place. The only issue 
is that in a small sleepy hill-town, most of the places are not open for lunch.
Walking along, we came across a futsal-bar which had a bunch of kids inside,
probably celebrating someone's birthday.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Us:&lt;/em&gt; Are you open for Lunch?&lt;br&gt;
&lt;em&gt;Person:&lt;/em&gt; I don't think so&lt;br&gt;
&lt;br&gt;
&lt;em&gt;awkward silence&lt;/em&gt;&lt;br&gt;
&lt;br&gt;
&lt;em&gt;Person:&lt;/em&gt; Hold on I'll call the owner
&lt;br&gt;
&lt;em&gt;more waiting in awkward silence&lt;/em&gt;&lt;br&gt;
&lt;br&gt;
&lt;em&gt;Grandpa:&lt;/em&gt; O come-a in! come-a in!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We were ushered in by Grandpa (who probably owned the place) and asked to make 
ourselves comfortable. He informed us that they only had pasta for lunch, as the 
oven was off. Soon, Granddaughter (I assume) came to take our orders, and we 
ordered two pastas. We were given some bread and breadsticks to start, and soon 
the drinks (two coca-colas) arrived too, so we weren't left hungry for long.
They even offered to let us take the bread on the way!&lt;/p&gt;
&lt;p&gt;What followed though was the best pasta I've eaten in my life. Undoubtedly.
Perfectly cooked and perfectly seasoned. In the middle of a small town, when
they're supposed to be closed, they invited us in and served lunch. I come from
a land that believes in &lt;em&gt;Athithi Devo Bhava&lt;/em&gt;, but even our restaurants wouldn't
go this far. Truly amazing, and if you do visit Meta ever, check out 
&lt;a href="https://www.coventgardenpub.net/"&gt;Covent Garden Pub&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;Sorrento&lt;/h3&gt;
&lt;p&gt;After paying for the meal and taking the train down to Sorrento, we finally 
arrived around 2 PM. We then had two options: visit Bagni Regina Giovanna 
(The secret bathing place of Queen Joanna I of Naples, basically a natural
cove) which would take up to three hours, or we wait an hour for the bus that
takes us to Positano. The bus that would take us up to Regina Giovanna would
also take 45 minutes, so we decided to walk.&lt;/p&gt;
&lt;p&gt;And so we set off uphill. The views were breathtaking and many a photo was taken,
but after walking uphill for 1.5 km, we were drenched in sweat. The walk after 
that point went something like this&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Vedang:&lt;/em&gt; 👍&lt;br&gt;
&lt;em&gt;Me:&lt;/em&gt; 🚶&lt;br&gt;
&lt;em&gt;Vedang:&lt;/em&gt; 👍👍&lt;br&gt;
&lt;em&gt;Me:&lt;/em&gt; 🚶&lt;br&gt;
&lt;em&gt;Vedang:&lt;/em&gt; 👍👍👍&lt;br&gt;
&lt;em&gt;Me:&lt;/em&gt; What are you doing&lt;br&gt;
&lt;em&gt;Vedang:&lt;/em&gt; Asking for a lift&lt;br&gt;
&lt;em&gt;Me:&lt;/em&gt; lmao do you think someone will give us a lift here? It's all tourist
buses and cars&lt;br&gt;
&lt;em&gt;Vedang:&lt;/em&gt; Yeah if I get one you can walk &lt;em&gt;chuckles&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Me:&lt;/em&gt; &lt;em&gt;chuckles&lt;/em&gt;&lt;br&gt;
&lt;br&gt;
&lt;em&gt;Us:&lt;/em&gt; 🚶🚶&lt;br&gt;
&lt;br&gt;
&lt;em&gt;A car pulls up&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Stranger:&lt;/em&gt; Do you want a lift?&lt;br&gt;
&lt;em&gt;Us:&lt;/em&gt; :o :o&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Long story short: Someone gave us a lift to Bagni Regina Giovanna. Goodwill,
unlike lightning, struck the same spot twice in the span of 24 hours. I have no
words to describe what happened after. A twisting series of steps led to a
beach which truly took my breath away. I'll let the pictures do the talking.&lt;/p&gt;
&lt;p&gt;&lt;img alt="rg1" src="/articles/2023/res/regina_giovanna_adjacent.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="rg2" src="/articles/2023/res/regina_giovanna_cove.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="rg3" src="/articles/2023/res/regina_giovanna_outside.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Positano&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Positano bites deep. It is a dream place that isn't quite real when you are 
there and becomes beckoningly real after you have gone.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;~ John Steinbeck&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After getting out of Bagni Regina Giovanna at around 4, we had two options: 
Go to Positano, or go back to Naples. Going to Positano was what we wanted 
to do, but the bus and train schedules were not in our favour. Dejected, we 
went to a shop near the beach and got some energy drinks to rehydrate.&lt;/p&gt;
&lt;p&gt;Until a bus dropped by, and we hurriedly rushed on to it. The bus took us back 
down to the station, and we had reached just in time to make the bus to 
Positano. The only issue was that there were 5 buses all around. Walking around
and asking the bus drivers which one went to Positano, one of them said 
'This one'. We hurriedly hopped on, and this dream place suddenly became all 
too real.&lt;/p&gt;
&lt;p&gt;&lt;img alt="positano_towns" src="/articles/2023/res/positano_towns.jpg"&gt;&lt;/p&gt;
&lt;p&gt;There are no roads in Positano. It is a mishmash of small buildings tied 
together by steps, cobbled paths and the millions of dollars of the super-rich 
who come to vacation here. We did see a superyacht or two around the bay, and 
a huge number of people. Very few backpackers. It seems like the vacation spot 
of choice for those who own a private yacht, or those who are in their 
mid-thirties and are going on a moderately affluent vacation. Places to live 
are quite expensive, as is food. In spite of the prices, the beach here is as 
crowded as it gets. Surprising.&lt;/p&gt;
&lt;p&gt;The scarcity and remoteness does ensure one thing: The water in Positano is
clear blue. Clear, like freshly-made crystal glass. I would provide a hex code
being a programmer, but no hex code can come close to expressing how blue the
water really is. It's something you'd have to see for yourself. Hopefully some
of these pictures capture it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="rg2" src="/articles/2023/res/positano_water.jpg"&gt;&lt;/p&gt;
&lt;p&gt;After frolicking on the beach, we had to get back. Taking the bus would mean 
that we would have to wait for thirty minutes, and also climb all the way back 
up the hill. Instead, we took the ferry. And that completes the gauntlet of 
&lt;strike&gt;infinity stones&lt;/strike&gt; means of travel, all in the span of a week: 
car, bus, train, boat, plane. The ferry ride was well worth it, even though we 
reached Sorrento by around 7:30 PM and had to take the train that was a bit 
late. The seas were as blue as the water on the beach, and with the wind 
running through your hair and the sun shining on your face, there is little else
that can make you as relaxed and happy as a ferry ride.&lt;/p&gt;
&lt;p&gt;&lt;img alt="positano" src="/articles/2023/res/positano.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="rg3" src="/articles/2023/res/positano_2.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Roma&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Rome" src="/articles/2023/res/rome.jpg"&gt;
&lt;em&gt;Sistine Chapel, as seen from Castel Sant'Angelo&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The next day was to be spent in Rome, with plans of seeing the Vatican and 
other things nearby. We travelled down to Rome quite early with one of the
Italo high-speed trains, zipping through the Roman countryside at 300 km/h.&lt;/p&gt;
&lt;p&gt;&lt;img alt="countryside" src="/articles/2023/res/countryside.jpg"&gt;
&lt;em&gt;Roman countryside&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first thing we did was have breakfast at Roma Termini, and regroup with a 
friend who was at Rome. We then took the metro down to Vatican. After
bargaining with a tour guide for only skip-the-queue entry tickets to the
museum and sistine chapel (the ones on the website were all sold out), we
finally got some for a decent price with a student discount. The tickets were
for 1:30, and we had to regroup at their office for entry.&lt;/p&gt;
&lt;p&gt;After that, St. Peter's square was a short hop away. It's much bigger than what
&lt;em&gt;Angels and Demons&lt;/em&gt; would lead you to believe, and it took a long time to 
circumnavigate the entire square. The catacombs are adjacent to the square and 
after asking two very serious swiss guards about them, we were told it was 
invite-only. &lt;/p&gt;
&lt;p&gt;Soon after making some more plans, we hopped out of the Vatican, and decided to 
walk down to Castel Sant'Angelo. There was a Gelato store near the Vatican, and
for €3 we got the most gigantic two scoops of Gelato I've ever had. It was so
comically big that the cone almost disappeared under it, and I had to
constantly lick the edges to keep the melting Gelato from dripping down.
Mmmmmmmm.&lt;/p&gt;
&lt;p&gt;Castel Sant'Angelo was a proper Renaissance castle, originally made as a tomb 
for Emperor Hadrian. Also made famous by Angels and Demons, and the path to 
Illumination. The castle itself was okay, but the real takeaways were the memories
we made with our friends roaming the place :) It had an observation deck from
where you could see most of Rome, and also get very good views of the Sistine
Chapel (see the title picture)&lt;/p&gt;
&lt;p&gt;After Castel Sant'Angelo, we went for Lunch. I don't know if we ate in the 
Vatican or in Rome, but we were stuck with a huge tax overhead and a very large
bill, so we probably ate in the Vatican. Also, word of advice from a friend: an
&lt;em&gt;Aperol Spritz&lt;/em&gt; sucks. It looks and tastes like cough syrup.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: There are no restaurants in the Vatican, so we did eat in Rome.&lt;/p&gt;
&lt;p&gt;&lt;img alt="sistine chapel" src="/articles/2023/res/sistine_chapel_streets.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I don't have many pictures of the inside of the Vatican Museum, but what I saw
truly moved me. Every single surface was either gilded, marbled or intricately
painted. Marble statues from thousands of years ago were strewn across the entire
museum like pots and plates in a kitchen. It was not the detail in the art there 
that took my breath away (It was the most detailed, intricate art I've seen), 
but rather the sheer magnitude of art. Room after room, Chamber after Chamber 
filled with priceless artifacts and wall-to-wall frescoes and paintings. It is 
said that the Holy See was the most powerful entity in the middle ages, and 
I wouldn't doubt it. No wonder the western world fought crusades for Jerusalem
and conquered more than half of the planet. If the sheer opulence and the
magnitude of wealth here wouldn't convince Christians that their religion is
better than others, it would definetly convince a heathen that the Christian
god is wealthier than their god. &lt;/p&gt;
&lt;p&gt;&lt;img alt="milvian bridge" src="/articles/2023/res/milvian_bridge.jpg"&gt;
&lt;em&gt;Battle of the Milvian Bridge&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ceiling" src="/articles/2023/res/ceiling.jpg"&gt;
&lt;em&gt;If you told me this was Gold, I'd believe you&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I doubt the tacky paragraph and pictures above capture the essence of the
Vatican. It's something that has to be seen to be believed. Each of the
ceilings would have taken atleast a thousand man-hours to construct, and after
a point my neck would hurt from continuously staring up. There was so much
sensory overload that even the extraordinary became commonplace. So much that I
stopped taking pictures after the first few frescoes, and just shuffled through
the halls, agape at the scenes surrounding me. Versailles looked like a summer
fair in comparision to the Vatican Museum.&lt;/p&gt;
&lt;p&gt;Finally, after going through the myriad chambers and ensemble of museums, we
made it to the Sistine Chapel. No photography was allowed, but everyone knows
what The Agony and The Ecstasy looks like. My only misconception was that I 
thought it would fill up the entire ceiling. Not so. It was this tiny painting
right in the centre amidst this huge ceiling filled with other paintings, so 
it was a bit underwhelming to see. Religious significance aside, The chapel
felt a bit overhyped to me, mostly because of the poor lighting and the huge
throng inside. I think some of the museums were more ornate and more intricate 
than the Chapel, but I may be wrong.&lt;/p&gt;
&lt;p&gt;After this whirlwind experience, we were back where we started. There wasn't 
enough time to visit another place, so we decided to take a bus to a park 
that was near Termini. We ambled in the park for around half an hour, wondering
about where life was to take us after the internship and what awaited us when 
we returned back to College for our final year. The time passed quicker than I 
wanted it to, and in the blink of an eye, we were seated in the train back to
Napoli.&lt;/p&gt;
&lt;h3&gt;Warm weather, warmer people&lt;/h3&gt;
&lt;p&gt;Just like that, the vacation was over, and we had our flight scheduled to
Netherlands the following day. The stay was quite comfortable: our BnB had an 
amazing shower, was very well-stocked with neccessities and nothing really felt
lacking. It's the spark of life that sets Italy apart: people care. Even if
they don't, people exist. The occasional broken turnstile was replaced by a
Guard, the checkout at the cornerstore was operated by a Granny, the shops are
run by people who see tourists daily and speak English, and an attendant would
help you if you couldn't book tickets at the kiosk. There is just enough chaos
to make life interesting, but not uncomfortable. Again, I've not stayed there
at length so this may be the idealistic tourist in me speaking, but I would if
given the chance.&lt;/p&gt;
&lt;p&gt;Since we had an early flight, we packed up, left the keys to the room on the 
table and went out to the airport. Only to be greeted with a &lt;a href="https://www.reuters.com/business/environment/storm-disrupts-air-train-traffic-netherlands-2023-07-05/"&gt;red alert warning for the Netherlands&lt;/a&gt;
because of Storm Poly.&lt;/p&gt;
&lt;p&gt;I'd like to dock points from Napoli Airport here: our flight timings came and 
went, without any information about what was happening to our flight. The flight
crew came to the gate, and then were told that the flight was delayed. Resigned
to the fate of nature, they sat some distance from us and ordered their lunch.
It was both hilarious and sad to see. Fortunately, looking at the Schiphol app,
all the AirFrance-KLM flights were postponed to after 5 PM, and all other flights 
(including EasyJet and other budget carries) were cancelled. Guess which airplane
a backpacking college student was flying on?&lt;/p&gt;
&lt;p&gt;KLM. Not EasyJet.&lt;/p&gt;
&lt;p&gt;Thank god. I bought the expensive ticket on the advice of Vedang (after his 
EasyJet out of Geneva was cancelled), and I have never been happier to buy a
more expensive ticket than I was once we touched down at Schiphol safe and
sound, as my flight back to India was scheduled just the following day.&lt;/p&gt;
&lt;p&gt;All was still not well, as we were made to stand in queues for multiple hours 
and once we boarded the flight, we sat on the runway for a good forty-five 
minutes before going airborne. Missed out on a proper lunch, and had to make do 
with the snacks onboard the flight.&lt;/p&gt;
&lt;h2&gt;The Last Supper&lt;/h2&gt;
&lt;p&gt;After landing in the Netherlands and hauling my luggage down to the room (which 
was tiny), my roomie went to Centraal. I had decided that I'd stuff myself full
after the long morning and skipping lunch. There weren't many good options to
eat living near the airport, but there was a Correndon hotel down the road from
where I put up near Schiphol, with very decent reviews on Google, and a quoted
price of €10-€20. I decided to walk down in my jeans and black hoodie. This
place had a 747 before the entrance, and after giving it a good look I swaggered
through the revolving doors, super hungry. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Me:&lt;/em&gt; Hi, I'd like a table for one&lt;br&gt;
&lt;em&gt;Desk:&lt;/em&gt; Sure, would you like me to bill it to your room&lt;br&gt;
&lt;em&gt;Me, living in the Ibis down the road:&lt;/em&gt; No, I'd pay by card&lt;br&gt;
&lt;em&gt;Desk:&lt;/em&gt; Okay, that would come to €33.98&lt;br&gt;
&lt;br&gt;
&lt;em&gt;Me, in my mind:&lt;/em&gt; OMGWTFML can't back down now&lt;br&gt;
&lt;br&gt;
&lt;em&gt;Me:&lt;/em&gt; &lt;em&gt;Gulps&lt;/em&gt; Sure, here you go&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And just like that, I spent &amp;gt;60% of what I spent to live for a night here, on
food. Surrounded by all these old, fancy business execs whose companies were
paying for their food and lodging, and me in my hoodie and jeans :P You're only
young and dumb once, I guess.&lt;/p&gt;
&lt;p&gt;But hey, atleast the food was good. And it was an all-you-can-eat. I'd like to 
say no regrets, but that was the most money I've ever spent for a single meal
on myself.&lt;/p&gt;
&lt;p&gt;&lt;img alt="correndon chocolate fountain" src="/articles/2023/res/correndon.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Chicken Curry&lt;/h2&gt;
&lt;p&gt;My flight back was uneventful, but the drive from Mumbai to Pune in the lashing
rain at 3 AM in the night was something to remember. The comforts of home are
so numerous so as to be unenumerable, and I enjoyed the two and a half weeks at
home doing absolutely nothing but waking up late and having good food. Oh, and
trekking to Visapur fort with my friends!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That's been it. I know this is not the latest edition of Conde Nast Traveller,
so I'll refrain from writing a cheesy editor's note, but I'm quite pleased with
how this article turned out. This is one of, if not the biggest article I've 
written (6000+ words!). After reconsidering fleshing out the different sections multiple
times, I'm glad I took the effort to finally do so. However, this will be my 
first and last travelogue, because it takes a disproportionate amount of effort
to both recollect and document every single minutiae of your trip
&lt;a href="https://www.team-bhp.com/forum/travelogues/87398-yetiblog-weddings-drivings-france-germany-italy-croatia-slovenia-2.html"&gt;Sam Kapasi style&lt;/a&gt;,
and I don't want to do this while on the trip.&lt;/p&gt;
&lt;p&gt;Touring the world while young is a good way to break your assumptions, curb
your impulsivity and increase your tolerance. And travelling doesn't imply
zipping around town in an air-conditioned bus, stopping at only the tourist
attractions. Travelling implies using the public transport, drinking water from
the public fountains and finding your own path amongst the crowds thronging the
streets. If you do this, you'll soon realize that the world around is not as
everyone's Instagram stories tell you: there's a lot more to it than pretty
lights and beautiful sights. &lt;/p&gt;
&lt;p&gt;Bon Voyage!&lt;/p&gt;
&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;The previous article is private for good reasons: I'm not
allowed to speak much about my work during the internship due to various IP
clauses, but if you want a general vibe, or want to know about the kind of 
work we did, you can check out &lt;a href="https://optiver.com/working-at-optiver/career-hub/chinmays-journey-as-a-tech-intern/"&gt;Chinmay's Official Interview&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you really want to give the previous article a read, please reach out to me.
No guarantees on providing access though!&lt;/p&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;&lt;sup id='footnote-1'&gt;1&lt;/sup&gt; Because I'm a Luddite from the 90's who doesn't 
post his whereabouts 24/7 on Instagram&lt;/p&gt;
&lt;p&gt;&lt;sup id='footnote-2'&gt;2&lt;/sup&gt; We did some other things as well, but I'll omit
them for now. Those who know, know ;)&lt;/p&gt;
&lt;p&gt;&lt;sup id='footnote-3'&gt;3&lt;/sup&gt; Apparently she divorced them (it?) and is now
&lt;a href="https://www.snopes.com/news/2023/07/15/woman-married-eiffel-tower/"&gt;happily married to a fence&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup id='footnote-4'&gt;4&lt;/sup&gt; And if they spoke English.&lt;/p&gt;</content><category term="General"></category><category term="Intern"></category></entry><entry><title>Testing Encrypted Posts</title><link href="https://aniruddhadeb.com/articles/2023/testing-encrypted-posts.html" rel="alternate"></link><published>2023-06-09T23:51:00+05:30</published><updated>2023-06-09T23:51:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2023-06-09:/articles/2023/testing-encrypted-posts.html</id><summary type="html">&lt;div id="pec-encrypted-content" style="display:none"&gt;XLdcRwnoJeuZn1hiwnBrJA==;fZjECmMXdiyHk9x8QYKgl+lvMASQV2JUUgDwpk3lWc4rHdldkbGDlC7rpfwn2ZvHwhG0SJ0HWcCmWf6+jhppt/lL3q/QYS9ur+7lfoq6aNGbGaNuepGbGhitM76PQ2+Dhg3aIPXGTLvcDt04DpAUlTDxtdpUJGlhnkvmI2aPWcaB/8WeaarpTLFN3Jmp8WmCrSAObr/egqMjEVxLP6W/VvnSZdoa/vUC2hCaXn+9eYVfidtQo9kcRpdvpAFt5l+MO7PvL0IhMEWkvTXUAOqL5jsZSB+Yzmnk2KXEJDiZOLGwyu5h58MVwgvWz0qjpaFlJy5vD/lBTt+lS++ofeXo9dXOnyRJHF03q9tq7p4sIYPhEizkLKGY82mRZnIh4S8s8XqZ0L3WIk4OsZU1F1cZ8s2LSxDBVXcs8tjIyViE6z1e79TagKadkokGjrAM0KCtW+QbYbAOQFkzF8XtTv5BRw==;^&lt;/div&gt;
&lt;div id="pec-decrypted-content"&gt;
    &lt;h4&gt;&lt;i&gt;&lt;/i&gt;&lt;/h4&gt;
&lt;/div&gt;

&lt;form id="pec-decrypt-form"&gt;
    &lt;label for="pec-content-password"&gt;Password&lt;/label&gt;
    &lt;input type="password" id="pec-content-password" placeholder="Password" /&gt;
    &lt;button type="button" id="pec-decrypt-content"&gt;Decrypt&lt;/button&gt;
&lt;/form&gt;


&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/cipher-core.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/pad-nopadding.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/md5.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/aes.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    (function () {
        var strip_padding = function (padded_content, padding_char) {
            /*
             * Strips the padding character from decrypted content.
             */
            for (var i = padded_content.length; i &gt; 0; i--) {
                if (padded_content[i - 1] !== padding_char) {
                    return padded_content.slice …&lt;/script&gt;</summary><content type="html">&lt;div id="pec-encrypted-content" style="display:none"&gt;XLdcRwnoJeuZn1hiwnBrJA==;fZjECmMXdiyHk9x8QYKgl+lvMASQV2JUUgDwpk3lWc4rHdldkbGDlC7rpfwn2ZvHwhG0SJ0HWcCmWf6+jhppt/lL3q/QYS9ur+7lfoq6aNGbGaNuepGbGhitM76PQ2+Dhg3aIPXGTLvcDt04DpAUlTDxtdpUJGlhnkvmI2aPWcaB/8WeaarpTLFN3Jmp8WmCrSAObr/egqMjEVxLP6W/VvnSZdoa/vUC2hCaXn+9eYVfidtQo9kcRpdvpAFt5l+MO7PvL0IhMEWkvTXUAOqL5jsZSB+Yzmnk2KXEJDiZOLGwyu5h58MVwgvWz0qjpaFlJy5vD/lBTt+lS++ofeXo9dXOnyRJHF03q9tq7p4sIYPhEizkLKGY82mRZnIh4S8s8XqZ0L3WIk4OsZU1F1cZ8s2LSxDBVXcs8tjIyViE6z1e79TagKadkokGjrAM0KCtW+QbYbAOQFkzF8XtTv5BRw==;^&lt;/div&gt;
&lt;div id="pec-decrypted-content"&gt;
    &lt;h4&gt;&lt;i&gt;&lt;/i&gt;&lt;/h4&gt;
&lt;/div&gt;

&lt;form id="pec-decrypt-form"&gt;
    &lt;label for="pec-content-password"&gt;Password&lt;/label&gt;
    &lt;input type="password" id="pec-content-password" placeholder="Password" /&gt;
    &lt;button type="button" id="pec-decrypt-content"&gt;Decrypt&lt;/button&gt;
&lt;/form&gt;


&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/cipher-core.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/pad-nopadding.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/md5.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/aes.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    (function () {
        var strip_padding = function (padded_content, padding_char) {
            /*
             * Strips the padding character from decrypted content.
             */
            for (var i = padded_content.length; i &gt; 0; i--) {
                if (padded_content[i - 1] !== padding_char) {
                    return padded_content.slice(0, i);
                }
            }
        };

        var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) {
            /*
             * Decrypts the content from the ciphertext bundle.
             */
            var key = CryptoJS.MD5(password),
                iv = CryptoJS.enc.Base64.parse(iv_b64),
                ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64),
                bundle = {
                    key: key,
                    iv: iv,
                    ciphertext: ciphertext
                };

            var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding });

            try {
                return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char);
            }
            catch (err) {
                // encoding failed; wrong password
                return false;
            }
        };


        document.addEventListener('DOMContentLoaded', function () {
            var decrypt_btn = document.getElementById('pec-decrypt-content'),
                password_input = document.getElementById('pec-content-password'),
                encrypted_content = document.getElementById('pec-encrypted-content'),
                decrypted_content = document.getElementById('pec-decrypted-content'),
                decrypt_form = document.getElementById('pec-decrypt-form');

            var decrypt_document = function (event) {
                // grab the ciphertext bundle
                var parts = encrypted_content.innerHTML.split(';');

                // decrypt it
                var content = decrypt_content(
                    password_input.value,
                    parts[0],
                    parts[1],
                    parts[2]
                );

                if (content) {
                    // success; display the decrypted content
                    decrypted_content.innerHTML = content;
                    decrypt_form.parentNode.removeChild(decrypt_form);
                    encrypted_content.parentNode.removeChild(encrypted_content);

                    // any post processing on the decrypted content should be done here
                }
                else {
                    // ¯\_(ツ)_/¯
                    password_input.value = '';
                }
                event.preventDefault();
                return false;
            }
            
            decrypt_btn.addEventListener('click', decrypt_document);
            decrypt_form.addEventListener('submit', decrypt_document);
        });
    })();
&lt;/script&gt;</content><category term="Posts"></category><category term="test"></category></entry><entry><title>My (updated) DL workflow for 2023</title><link href="https://aniruddhadeb.com/articles/2023/updated-dl-workflow-2023.html" rel="alternate"></link><published>2023-06-04T01:00:00+05:30</published><updated>2023-06-04T01:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2023-06-04:/articles/2023/updated-dl-workflow-2023.html</id><summary type="html">&lt;p&gt;Remember last semester, where I said this?&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img width="600px" src="/articles/2022/res/cs_degree.png"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;That went pretty well. Much better than I expected it to go :) I also used the 
HPC DL environment a lot, across 4 courses that I did (COL380, COL772, COL775 
and COD310). It was so used that at a point I had four …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Remember last semester, where I said this?&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img width="600px" src="/articles/2022/res/cs_degree.png"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;That went pretty well. Much better than I expected it to go :) I also used the 
HPC DL environment a lot, across 4 courses that I did (COL380, COL772, COL775 
and COD310). It was so used that at a point I had four different GPU's allocated
just for running tasks for these different courses.&lt;/p&gt;
&lt;p&gt;A lot could be done better, though. Since I have my summer ahead of me, I
decided to clean house for the next semester&lt;/p&gt;
&lt;h2&gt;The secret life of software&lt;/h2&gt;
&lt;p&gt;After an OS course that delved deep into the linux kernel, I'm qualified to 
talk about this. For software-specific stuff, the relevant linux directories
are structured as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Root - primary hierarchy&lt;/span&gt;
&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;bin&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# where your executables go&lt;/span&gt;
&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;include&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# where header files go&lt;/span&gt;
&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;lib&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# where libraries go&lt;/span&gt;
&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;home&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# home directories of users&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;aniruddha&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# home directories of users&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;.local&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# User-specific tertiary hierarchy&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;bin
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;include
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;lib
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;.conda
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;envs
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;dl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# a single environment folder&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;bin
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;include
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;lib
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;.config&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# directory containing config files&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;.bashrc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# sourced on every login shell&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;scratch&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/scratch/aniruddha&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# HPC specific scratch directory&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;usr&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Unix System Resources - Secondary Hierarchy, read only stuff for users&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;bin
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;include
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;lib
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Tertiary hierarchy - has it&amp;#39;s own bin, include, lib, etc&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;share&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Architecture Independent (shared) data&lt;/span&gt;
&lt;span class="sb"&gt;`&lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;opt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Optional software&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;PATH&lt;/code&gt; variable's contents now make a lot more sense. An &lt;code&gt;echo $PATH&lt;/code&gt; on a
unix box will usually have all the &lt;code&gt;bin&lt;/code&gt; directories shown above, and doing a
&lt;code&gt;echo $LD_LIBRARY_PATH&lt;/code&gt; will have all the &lt;code&gt;lib&lt;/code&gt; directories above. It's simple,
intuitive and has been working for half a century now. More details can be found
&lt;a href="https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's say that we don't have super-user privileges. This brings two challenges:
- &lt;strong&gt;The only directory above that we can write to is our home directory&lt;/strong&gt;.
  That's it. Any software/libraries/headers that we need to install need to be
  installed in &lt;code&gt;.local&lt;/code&gt; and added to path/symlinked through
- If a binary already exists in &lt;code&gt;/bin&lt;/code&gt; or &lt;code&gt;/usr/bin&lt;/code&gt;, that would be registered
  by the system, especially if it needed an older version. This is visible
  in HPC, which has super-old versions of &lt;code&gt;git&lt;/code&gt; (1.8x) and &lt;code&gt;conda&lt;/code&gt; (5.x).&lt;/p&gt;
&lt;p&gt;Even when it comes to modules, HPC doesn't have the latest &lt;code&gt;gcc&lt;/code&gt; (stuck at 9)
or modern build tools, such as &lt;code&gt;cmake&lt;/code&gt; or &lt;code&gt;ninja&lt;/code&gt;. There is no clean way to 
even install these. The &lt;a href="https://supercomputing.iitd.ac.in/?soft"&gt;HPC website&lt;/a&gt; 
mentions two options that you can take in this event:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the software in your own account (&lt;code&gt;$HOME&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Request installation, via your supervisor.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2 would be a good option if it didn't have a turnaround time of over a month,
so the only sane thing to do is 1.&lt;/p&gt;
&lt;h2&gt;Install software locally&lt;/h2&gt;
&lt;p&gt;This is easier than it sounds. HPC runs CentOS 7, which uses &lt;code&gt;yum&lt;/code&gt; as it's 
package manager, so installing software should be as easy as doing &lt;code&gt;yum install 
&amp;lt;packagename&amp;gt; --local&lt;/code&gt;, right?&lt;/p&gt;
&lt;p&gt;Nope.&lt;/p&gt;
&lt;p&gt;yum doesn't support doing this natively. &lt;a href="https://stackoverflow.com/questions/36651091/how-to-install-packages-in-linux-centos-without-root-user-with-automatic-depen"&gt;After some research&lt;/a&gt;, 
you can get yum to install things locally, but it's not worth the effort. &lt;code&gt;dnf&lt;/code&gt;
isn't installed, neither is any other package manager, so this turns up a dead
end.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Aside: Package Managers&lt;/h4&gt;
&lt;p&gt;What I had been doing so far was to build software from source if needed, and
then pass the installation directory using a flag in the &lt;code&gt;make install&lt;/code&gt; step.
This is &lt;em&gt;(a)&lt;/em&gt; super hard and &lt;em&gt;(b)&lt;/em&gt; unsustainable. (a) because you'd need to 
take into account all of the package's dependencies, and (b) because you'd 
need to update the package if a newer version came around. &lt;/p&gt;
&lt;p&gt;Package managers take away all of this pain by handling the dependency 
management and updates on their own. So what we're really looking for is &lt;strong&gt;a 
package manager that manages it's repository of packages in .local and, ipso 
facto, can be run without superuser privileges.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;(Mini)Conda to the rescue&lt;/h2&gt;
&lt;p&gt;The second answer in the StackExchange thread linked above recommended using
&lt;code&gt;conda&lt;/code&gt; as a package manager, and that's what was finally done. However, the 
&lt;code&gt;conda&lt;/code&gt; version as mentioned above is outdated, and since we want to use the
most up to date versions of packages, that would defeat the purpose.&lt;/p&gt;
&lt;p&gt;To fix this, I installed miniconda locally in &lt;code&gt;$HOME/.local/opt/miniconda3&lt;/code&gt;, 
following the good directory structure above. &lt;code&gt;miniconda3&lt;/code&gt; is an open-source 
conda variant and picks up right where &lt;code&gt;conda&lt;/code&gt; left off: it has access to all 
my old environments, and also uses the preferences in my &lt;code&gt;.condarc&lt;/code&gt; to make
new environments in &lt;code&gt;scratch/conda_data/envs&lt;/code&gt;, so that others can also use 
them.&lt;/p&gt;
&lt;p&gt;What about keeping miniconda up to date? &lt;em&gt;Miniconda updates itself, so we don't 
need to do anything!&lt;/em&gt; conda also launches the &lt;code&gt;base&lt;/code&gt; environment by default, so 
all we need to do is prepend the base conda environment's &lt;code&gt;bin&lt;/code&gt; to our &lt;code&gt;PATH&lt;/code&gt;,
and we can use &lt;code&gt;conda&lt;/code&gt; to manage our executables!&lt;/p&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;Let's update git, gcc, g++ and get cmake and node&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;conda&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;conda-forge&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;gcc&lt;span class="w"&gt; &lt;/span&gt;gxx&lt;span class="w"&gt; &lt;/span&gt;cmake&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nodejs&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;18&lt;/span&gt;.5.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's also install neovim. Unfortunately there isn't a conda package for this
(there was one, but that was for neovim python bindings), so I had to manually
download the appimage from &lt;a href="https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.tar.gz"&gt;here&lt;/a&gt; 
and move the files to the right locations. Once that was done, I installed packer
to the right place, and copied my config over. Everything worked as expected 
after that.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/Neovim?ref_src=twsrc%5Etfw"&gt;@neovim&lt;/a&gt; is goated. &lt;a href="https://twitter.com/code?ref_src=twsrc%5Etfw"&gt;@code&lt;/a&gt; is bloated.&lt;/p&gt;&amp;mdash; Aniruddha Deb (@hairband_dude) &lt;a href="https://twitter.com/hairband_dude/status/1665143467079507968?ref_src=twsrc%5Etfw"&gt;June 3, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;After that, I made an environment for PyTorch 2. It's a bit too late now to
test out &lt;code&gt;torch.compile&lt;/code&gt;, but I will tomorrow on a couple of models. I also 
wanted to develop &lt;a href="https://github.com/Aniruddha-Deb/pajamas"&gt;pajamas&lt;/a&gt; further,
which I'll probably do sooner or later.&lt;/p&gt;
&lt;p&gt;And with that, I'm ready to become a researcher for the next two semesters :)&lt;/p&gt;
&lt;h2&gt;Other things&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://aniruddhadeb.com/articles/2022/intern-inferno.html#intern-inferno"&gt;Amsterdam is Beautiful&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="random bridge sunset" src="res/amsterdam.jpg"&gt;&lt;/p&gt;
&lt;p&gt;So is Rotterdam&lt;/p&gt;
&lt;p&gt;&lt;img alt="erasmus bridge" src="res/rotterdam.jpg"&gt;&lt;/p&gt;
&lt;p&gt;So is Antwerp&lt;/p&gt;
&lt;p&gt;&lt;img alt="grote markt" src="res/antwerp.jpg"&gt;&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Machine Learning"></category><category term="Deep Learning"></category></entry><entry><title>MRCU comic</title><link href="https://aniruddhadeb.com/articles/2023/rcu-comic.html" rel="alternate"></link><published>2023-03-19T23:30:00+05:30</published><updated>2023-03-19T23:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2023-03-19:/articles/2023/rcu-comic.html</id><content type="html">&lt;p&gt;&lt;img alt="From my notes" src="/articles/2023/res/RCU.jpeg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Drawn from &lt;a href="https://en.wikipedia.org/wiki/Read-copy-update"&gt;Wikipedia's&lt;/a&gt; amazing RCU explanation.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Operating Systems"></category></entry><entry><title>The Properly Illustrated Transformer</title><link href="https://aniruddhadeb.com/articles/2023/properly-illustrated-transformer.html" rel="alternate"></link><published>2023-03-08T00:12:00+05:30</published><updated>2023-03-08T00:12:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2023-03-08:/articles/2023/properly-illustrated-transformer.html</id><summary type="html">&lt;p&gt;&lt;img alt="That's a f@!#ton of dropouts" src="/articles/2023/res/transformer_no_ws.svg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The title is (obviously) a shout out to &lt;a href="https://jalammar.github.io/illustrated-transformer/"&gt;Jay Alammar's Blog&lt;/a&gt;,
which is probably the best source to learn about transformers, followed by
&lt;a href="http://nlp.seas.harvard.edu/annotated-transformer/"&gt;The Annotated Transformer&lt;/a&gt;.
Both of them are unclear about the nuances though (where the dropouts are mostly),
     and so I made this to clear that up.&lt;/p&gt;
&lt;p&gt;PS …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="That's a f@!#ton of dropouts" src="/articles/2023/res/transformer_no_ws.svg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The title is (obviously) a shout out to &lt;a href="https://jalammar.github.io/illustrated-transformer/"&gt;Jay Alammar's Blog&lt;/a&gt;,
which is probably the best source to learn about transformers, followed by
&lt;a href="http://nlp.seas.harvard.edu/annotated-transformer/"&gt;The Annotated Transformer&lt;/a&gt;.
Both of them are unclear about the nuances though (where the dropouts are mostly),
     and so I made this to clear that up.&lt;/p&gt;
&lt;p&gt;PS: Yes, this is just the encoder stack. I'll probably make the decoder stack
in a part 2?&lt;/p&gt;</content><category term="Machine Learning"></category><category term="Machine Learning"></category><category term="Transformers"></category></entry><entry><title>Mac Setup v2</title><link href="https://aniruddhadeb.com/articles/2023/mac-setup-2.html" rel="alternate"></link><published>2023-03-06T12:00:00+05:30</published><updated>2023-03-06T12:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2023-03-06:/articles/2023/mac-setup-2.html</id><summary type="html">&lt;p&gt;My 2015 MBP 13" was giving me some pain over this entire semester, lagging a lot
and being very slow overall. I recently upgraded to a 16" MBP, and there have
been no complaints so far :) the notch is simply not there if you have a black
desktop background, so …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My 2015 MBP 13" was giving me some pain over this entire semester, lagging a lot
and being very slow overall. I recently upgraded to a 16" MBP, and there have
been no complaints so far :) the notch is simply not there if you have a black
desktop background, so +1 to apple for that. Although face ID would have been
nice to have.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Basic intro Screen&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dark Mode&lt;br&gt;
&lt;img alt="dark side meme" src="/articles/2020/res/darkside.jpeg"&gt;&lt;/li&gt;
&lt;li&gt;Don't set up Siri, or Stage Manager&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Home Directory and Username renaming&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MacOS uses a lowercase first letter, even if you've input an uppercase
one while making your username. The way to change this is a bit complicated,
but follow the instructions &lt;a href="https://support.apple.com/en-in/HT201548"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System &lt;strike&gt;Preferences&lt;/strike&gt; Settings&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Turn off autocorrect&lt;/li&gt;
&lt;li&gt;Function keys are function keys, and not 'do weird stuff' keys&lt;/li&gt;
&lt;li&gt;Don't switch to a workspace which has an open window of the application&lt;/li&gt;
&lt;li&gt;Make 10 workspaces and activate all the ^(n) hotkeys to switch to them&lt;/li&gt;
&lt;li&gt;Change the date/time format to &lt;code&gt;Day HH:MM:SS&lt;/code&gt; in control center&lt;/li&gt;
&lt;li&gt;Remove some stuff from control center, put keyboard brightness there&lt;/li&gt;
&lt;li&gt;Turn off the 'quick note' bottom right hot corner&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accounts&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bsw.iitd.ac.in/email.php"&gt;IITD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Applications&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XCode CLT&lt;/li&gt;
&lt;li&gt;Firefox&lt;/li&gt;
&lt;li&gt;VS Code (don't use this much)&lt;/li&gt;
&lt;li&gt;Kitty (with the &lt;a href="https://github.com/DinkDonk/kitty-icon/blob/main/kitty-dark.icns"&gt;cuter icon&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Calibre&lt;/li&gt;
&lt;li&gt;TG Pro&lt;/li&gt;
&lt;li&gt;The Unarchiver&lt;/li&gt;
&lt;li&gt;Shottr&lt;/li&gt;
&lt;li&gt;Hidden Bar&lt;/li&gt;
&lt;li&gt;TinkerTool&lt;ul&gt;
&lt;li&gt;Hide dock, and delay in showing it&lt;/li&gt;
&lt;li&gt;Remove 'recent apps' section in Dock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rectangle&lt;/li&gt;
&lt;li&gt;Bandwidth+&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://brew.sh/"&gt;Brew&lt;/a&gt; Packages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Neovim&lt;/li&gt;
&lt;li&gt;htop&lt;/li&gt;
&lt;li&gt;gcc&lt;/li&gt;
&lt;li&gt;openmpi&lt;/li&gt;
&lt;li&gt;miniforge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kitty Setup&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download the &lt;a href="https://github.com/ryanoasis/nerd-fonts/releases/tag/v2.3.3"&gt;Meslo&lt;/a&gt;
zipfile from here, and install all the fonts.&lt;/li&gt;
&lt;li&gt;Copy over the &lt;code&gt;kitty.conf&lt;/code&gt; from my previous machine. Works out of the box
(just darkened the background a bit more, as the new mac has a brighter
 display)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh"&gt;Oh my zsh&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://github.com/romkatv/powerlevel10k"&gt;Powerlevel10k&lt;/a&gt; after this&lt;/li&gt;
&lt;li&gt;Follow the setup guide for Powerlevel10k according to liking. I use a one-
line prompt, with no repeats&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Firefox setup&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Default browser&lt;/li&gt;
&lt;li&gt;Login to firefox account to sync plugins&lt;ul&gt;
&lt;li&gt;TabbyCat&lt;/li&gt;
&lt;li&gt;uBlock Origin&lt;/li&gt;
&lt;li&gt;Tampermonkey&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Get &lt;a href="https://github.com/Aniruddha-Deb/UserScripts"&gt;UserScripts&lt;/a&gt; and load
into Tampermonkey&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spaces Renamer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Probably the hardest part of the setup. &lt;/li&gt;
&lt;li&gt;TL;DR follow the procedure &lt;a href="https://github.com/dado3212/spaces-renamer/issues/75#issuecomment-1201511482"&gt;here&lt;/a&gt;.
Requires &lt;a href="https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection"&gt;disabling SIP&lt;/a&gt;
and library validation, and then loading in spaces renamer. You'll be asked
to download rosetta at this point as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Neovim setup&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://nodejs.org/en/download/"&gt;node&lt;/a&gt; for CoC&lt;/li&gt;
&lt;li&gt;Lift and Shift nvim config directory from previous machine&lt;/li&gt;
&lt;li&gt;Install &lt;a href="https://github.com/wbthomason/packer.nvim"&gt;packer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do &lt;code&gt;:PackerInstall&lt;/code&gt; to install plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blog Setup&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clone the blog git repo&lt;/li&gt;
&lt;li&gt;Instead of using a &lt;code&gt;venv&lt;/code&gt;, I used a conda-managed environment this time.
Worked out better. Created an &lt;code&gt;environment.yml&lt;/code&gt; for the blog.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ML Setup&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a Conda environment for ML stuff&lt;/li&gt;
&lt;li&gt;Install:&lt;ul&gt;
&lt;li&gt;torch, torchvision, torchaudio&lt;/li&gt;
&lt;li&gt;numpy, pandas, scikit-learn, xgboost&lt;/li&gt;
&lt;li&gt;matplotlib, bokeh&lt;/li&gt;
&lt;li&gt;jupyterlab, ipywidgets&lt;/li&gt;
&lt;li&gt;jupyterlab-vim&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, you should have a stable system. Move over data from the previous
machine (Documents, Pictures, Videos etc.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Set Desktop Background&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step back and enjoy :)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="hehe" src="res/desktop.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="nvim+kitty" src="res/blog.png"&gt;&lt;/p&gt;
&lt;h2&gt;One More Thing&lt;/h2&gt;
&lt;p&gt;There's a difference between &lt;code&gt;.zshenv&lt;/code&gt;, &lt;code&gt;.zprofile&lt;/code&gt;, &lt;code&gt;.zshrc&lt;/code&gt; and other flavours
of zsh conf files, details of which I learnt from &lt;a href="https://unix.stackexchange.com/questions/71253/what-should-shouldnt-go-in-zshenv-zshrc-zlogin-zprofile-zlogout"&gt;here&lt;/a&gt;.
You'd want to alias &lt;code&gt;gcc&lt;/code&gt; to &lt;code&gt;gcc-12&lt;/code&gt; and &lt;code&gt;g++&lt;/code&gt; to &lt;code&gt;g++-12&lt;/code&gt; (they dubiously
use clang), and &lt;code&gt;vim&lt;/code&gt; to &lt;code&gt;nvim&lt;/code&gt; in &lt;code&gt;.zshenv&lt;/code&gt; (otherwise makefiles won't pick up
on the change. Also, uncomment the lines in .zshrc which export &lt;code&gt;$EDITOR&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, name your programming folder &lt;code&gt;Developer&lt;/code&gt; to get a nice directory icon.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;EDIT (9 Mar): Moved from CoC to &lt;code&gt;nvim-lspconfig&lt;/code&gt; and &lt;code&gt;cmp-nvim&lt;/code&gt;, and to 
treesitter-based syntax highlighting. Feels marginally better, and got the
chance to hack at my vim config after a long time.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>Batch Normalization</title><link href="https://aniruddhadeb.com/articles/2023/batch-normalization.html" rel="alternate"></link><published>2023-02-16T16:00:00+05:30</published><updated>2023-02-16T16:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2023-02-16:/articles/2023/batch-normalization.html</id><summary type="html">&lt;p&gt;$$
\require{physics}
\newcommand{B}{\mathcal{B}}$$&lt;/p&gt;
&lt;p&gt;Batch Normalization was proposed by &lt;a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43442.pdf"&gt;Ioffe and Szegedy&lt;/a&gt;
in 2015, and it spawned several normalization techniques that are used in SOTA
models today (layer norm, weight norm, etc). Batch normalization normalizes
the output of each layer based on the mean and variance of the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;$$
\require{physics}
\newcommand{B}{\mathcal{B}}$$&lt;/p&gt;
&lt;p&gt;Batch Normalization was proposed by &lt;a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43442.pdf"&gt;Ioffe and Szegedy&lt;/a&gt;
in 2015, and it spawned several normalization techniques that are used in SOTA
models today (layer norm, weight norm, etc). Batch normalization normalizes
the output of each layer based on the mean and variance of the examples in the
current batch. Formally, if $\B = {x_1, \ldots, x_m}$ is our batch, then 
batch norm does the following transformation:&lt;/p&gt;
&lt;p&gt;$$\begin{align}
\mu_{\B} &amp;amp;= \frac{1}{m} \sum_i x_i \\
\sigma_{\B}^2 &amp;amp;= \left( \frac{1}{m} \sum_i x_i^2 \right) - \mu_{\B}^2 \\
\hat{x}_i &amp;amp;= \frac{x_i - \mu_{\B}}{\sqrt{\sigma^2_{\B} + \epsilon}} \\
y_i &amp;amp;= \gamma \hat{x}_i + \beta 
\end{align}$$&lt;/p&gt;
&lt;h3&gt;Why?&lt;/h3&gt;
&lt;p&gt;When networks are trained, the partial derivative of a parameter obtained 
during backprop gives us the gradient &lt;em&gt;assuming all other parameters remain
constant&lt;/em&gt;. This is not true, as the parameters simultaneously change. This 
causes the input distribution to a layer in a deep neural network to change
significantly from update to update, and this is called &lt;em&gt;Internal Covariate 
Shift&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Mathematically, if we have a simple linear model $y = w_l w_{l-1} \ldots w_1 x$, and
we update each parameter via the partial derivative of that parameter, then we
get $\hat{y} = (w_l - \epsilon g_l) \ldots (w_1 - \epsilon g_1) x$. Note how even the
second order terms ($\epsilon^2 (\prod_{i=l}^3 w_i)g_2 g_1$) may become very large,
making learning harder.&lt;/p&gt;
&lt;p&gt;Batch norm aims to reduce internal covariate shift by normalizing the layers.
This centers them and reduces variance due to noisy parameter updates, while not
taking any information away (the model is still free to learn whatever mean
and variance it chooses to learn by updating $\gamma$ and $\beta$.)&lt;/p&gt;
&lt;h3&gt;Backprop&lt;/h3&gt;
&lt;p&gt;Before manually doing the backprop, a computation graph really helps here.&lt;/p&gt;
&lt;p&gt;&lt;img alt="comp_graph" src="res/batch_norm_graph.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This is a small computation graph that uses just three examples, but it's
sufficient to show which variables are dependent on each other, and how. This
allows us to go ahead and obtain all the partial derivatives via chain rule:&lt;/p&gt;
&lt;p&gt;$$\begin{align}
\pdv{l}{\gamma} &amp;amp;= \sum_i \pdv{l}{y_i} \hat{x}_i \\
\pdv{l}{\beta} &amp;amp;= \sum_i \pdv{l}{y_i} \\
\pdv{l}{\hat{x}_i} &amp;amp;= \pdv{l}{y_i} \gamma \\
\end{align}$$&lt;/p&gt;
&lt;p&gt;The next three are a bit tricky. To check the derivation, just follow the edges
of the computation graph.
$$\begin{align}
\pdv{l}{\mu_{\B}} &amp;amp;= \sum_i \pdv{l}{x_i} \pdv{x_i}{\mu_{\B}} \\
                  &amp;amp;= \sum_i \pdv{l}{x_i} \cdot \frac{-1}{\sqrt{\sigma^2_{\B} + \epsilon}} \\
\pdv{l}{\sigma^2_{\B}} &amp;amp;= \sum_i \pdv{l}{x_i} \pdv{x_i}{\sigma^2_{\B}} \\
                       &amp;amp;= \sum_i \pdv{l}{x_i} \cdot \frac{-1}{2} \cdot \frac{(x_i - \mu_{\B})}{\left(\sigma^2_{\B} + \epsilon\right)^{3/2}} \\
\pdv{l}{x_i} &amp;amp;= \pdv{l}{\hat{x}_i}\pdv{\hat{x}_i}{x_i} + \pdv{l}{\sigma^2_{\B}}\pdv{\sigma^2_{\B}}{x_i} + \pdv{l}{\mu_{\B}}\pdv{\mu_{\B}}{x_i} \\
             &amp;amp;= \pdv{l}{\hat{x}_i}\frac{1}{\sqrt{\sigma_{\B}^2 + \epsilon}} + \pdv{l}{\sigma^2_{\B}}\frac{2(x_i-\mu_{\B})}{m} + \pdv{l}{\mu_{\B}}\frac{1}{m} 
\end{align}$$&lt;/p&gt;
&lt;p&gt;This is what the paper mentions as well. With a few modifications, the derivatives
here can be vectorized: &lt;strike&gt;$\pdv{l}{\alpha}$ would become $\grad_\alpha l$, and
the other derivatives would become jacobians. The division would become pointwise,
and so would the multiplication at some places.&lt;/strike&gt; EDIT: I realized that
it's easier to do this in a component-wise fashion: $x_i$ would become $x_i^{(j)}$,
the $j$th component of the $i$th example in the batch. This is also how
&lt;a href="https://en.wikipedia.org/wiki/Batch_normalization"&gt;Wikipedia&lt;/a&gt; does it.&lt;/p&gt;
&lt;h3&gt;Deeper Intuition&lt;/h3&gt;
&lt;p&gt;This very nice paper by &lt;a href="https://arxiv.org/pdf/1805.10694.pdf"&gt;Kohler et al&lt;/a&gt; shows
that Batch Normalization (and friends) may be thought of as a &lt;em&gt;reparameterization
of the weight space&lt;/em&gt;. In matrix notation, The normalization operation amounts
to computing the following:&lt;/p&gt;
&lt;p&gt;$$\text{BN}(x^TW) = \gamma \frac{x^TW - \text{E}(x^TW)}{\text{Var}(x^TW)^{1/2}} + \beta$$&lt;/p&gt;
&lt;p&gt;Assuming $x$ is zero-mean, we can rewrite the variance as&lt;/p&gt;
&lt;p&gt;$$\begin{align}
\text{Var}(x^TW) &amp;amp;= \text{E}\left((x^TW)^2\right) \\
                 &amp;amp;= \text{E}(W^Txx^TW) \\
                 &amp;amp;= W^T \text{E}(xx^T) W \\
                 &amp;amp;= W^T S W
\end{align}$$&lt;/p&gt;
&lt;p&gt;where S is the covariance matrix of $x$. If we rewrite the weights as $\hat{W} = \gamma \frac{W}{(W^T S W)^{1/2}}$,
then the output of the layer after batch normalization is simply $x^T \hat{W}$.
Thus, we've reparameterized the weight matrix, making it account only for the
direction in the covariance space $S$ and letting $\gamma$ determine the 
magnitude. &lt;a href="https://arxiv.org/pdf/1602.07868.pdf"&gt;Weight Normalization&lt;/a&gt; does the
same thing, but $S$ is replaced by $I$.&lt;/p&gt;
&lt;h3&gt;Does it work?&lt;/h3&gt;
&lt;p&gt;According to newer work, yes but no. &lt;a href="https://proceedings.neurips.cc/paper/2018/file/905056c1ac1dad141560467e0a99e1cf-Paper.pdf"&gt;Santurkar et al&lt;/a&gt;
show that Internal Covariate Shift is not as detrimental to learning as thought
of, by synthetically injecting noise &lt;em&gt;after&lt;/em&gt; BatchNorm layers. The result was
that the network doesn't do as poorly as expected, but it still outperforms 
the standard network.&lt;/p&gt;
&lt;p&gt;&lt;img alt="batch norm graphs" src="res/batch_norm_noisy_graphs.png"&gt;&lt;/p&gt;
&lt;p&gt;The explanation that they gave was that Batch norm assists the optimizer by
making the loss landscape smoother. Formally, the magnitude of the gradient of
the loss $||\grad_{y_j}\mathcal{L}||$ captures the smoothness of the loss.
Batch norm reduces the bound on the gradient relative to an un-batch normed 
network significantly.&lt;/p&gt;
&lt;p&gt;&lt;img alt="batch norm inequality" src="res/batch_norm_ineq.png"&gt;&lt;/p&gt;
&lt;p&gt;Batch norm also imposes some second-order constraints on the hessian, which can
intuitively be summarized as saying that the step we take in the direction
of the gradient is more likely to lead us to a minima for a batch-normalized
network compared to an unnormalized network.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I'm surprised that people actually read these ^_^ I haven't posted much due to
minors and assignments, but I'll see if I can post more ML stuff on here if
time permits.&lt;/p&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category><category term="Machine Learning"></category><category term="Deep Learning"></category></entry><entry><title>L2 regularization intuition</title><link href="https://aniruddhadeb.com/articles/2023/l2-regularization.html" rel="alternate"></link><published>2023-01-22T10:15:00+05:30</published><updated>2023-01-22T10:15:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2023-01-22:/articles/2023/l2-regularization.html</id><summary type="html">&lt;p&gt;A nice intuition for L2 regularization comes from having a prior on the
distribution of parameters: the prior assumes that the parameters are close to
zero. Let's assume that the prior is $\mathcal{N}(0, \Sigma)$. The MAP estimate
of the parameters would then be&lt;/p&gt;
&lt;p&gt;$$\begin{align}
\theta_{\text{MAP …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A nice intuition for L2 regularization comes from having a prior on the
distribution of parameters: the prior assumes that the parameters are close to
zero. Let's assume that the prior is $\mathcal{N}(0, \Sigma)$. The MAP estimate
of the parameters would then be&lt;/p&gt;
&lt;p&gt;$$\begin{align}
\theta_{\text{MAP}} &amp;amp;= \text{argmax}_{\theta} \; P(\theta | D) \\
    &amp;amp;= \text{argmax}_{\theta} \; P(D | \theta) P(\theta) \\
    &amp;amp;= \text{argmax}_{\theta} \; \log P(D | \theta) + \log P(\theta)
\end{align}$$&lt;/p&gt;
&lt;p&gt;$\log P(D | \theta)$ is simply the log-likelihood of the model, and optimizing
that would give you the MLE parameters. However, incorporating $\log P(\theta)$
gives us the L2 regularization parameter&lt;/p&gt;
&lt;p&gt;$$\log P(\theta) = -\log((2\pi)^{n/2}|\Sigma|^{1/2}) - \frac{\theta^T \Sigma^{-1} \theta}{2}$$&lt;/p&gt;
&lt;p&gt;The constant at the start goes out of the argmax, and we're left with the L2
regularization term. Taking a negative on both sides would give us the 
negative log-likelihood, which is the unregularized loss function. We'd then
minimize $\theta$. The net expression would look something like this:&lt;/p&gt;
&lt;p&gt;$$\theta_{\text{MAP}} = \text{argmin}_{\theta} \; - P(D | \theta) + \frac{1}{2} \theta^T \Sigma^{-1} \theta$$&lt;/p&gt;
&lt;p&gt;Regularization generally features a strength term $\lambda$: We can think of
$\lambda$ as being the inverse of every term in the diagonal of the covariance 
matrix (if it is a diagonal covariance matrix). We'd then get&lt;/p&gt;
&lt;p&gt;$$\theta_{\text{MAP}} = \text{argmin}_{\theta} \; - P(D | \theta) + \frac{1}{2} \lambda\theta^T\theta$$&lt;/p&gt;
&lt;p&gt;And this is the familiar L2 reglarized loss function.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I got this from one of the &lt;a href="https://www.cse.iitd.ac.in/~parags/teaching/col775/"&gt;Deep
Learning&lt;/a&gt; lectures; it's a
nice treatment which I couldn't find in other places (maybe because I haven't
looked hard enough). Goodfellow certainly doesn't feature it though.&lt;/p&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category><category term="Machine Learning"></category><category term="Deep Learning"></category></entry><entry><title>Optimizers, Part 1</title><link href="https://aniruddhadeb.com/articles/2023/optimizers-1.html" rel="alternate"></link><published>2023-01-02T12:25:00+05:30</published><updated>2023-01-02T12:25:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2023-01-02:/articles/2023/optimizers-1.html</id><summary type="html">&lt;p&gt;Happy New Year! This &lt;strike&gt;is going to&lt;/strike&gt; was supposed to be a long
one, so sit back and grab a chocolate (and preferably view this on your laptop)&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;/p&gt;
&lt;iframe src="/articles/2023/res/intro_plot.html" style="width: 100%; height: 650px; border: 0"&gt;&lt;/iframe&gt;

&lt;p&gt;Some optimization algorithms. Click on a colour in the legend to hide/show it
&lt;/center&gt;&lt;/p&gt;
&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#solution-existence"&gt;Do Solutions Even Exist …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Happy New Year! This &lt;strike&gt;is going to&lt;/strike&gt; was supposed to be a long
one, so sit back and grab a chocolate (and preferably view this on your laptop)&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;/p&gt;
&lt;iframe src="/articles/2023/res/intro_plot.html" style="width: 100%; height: 650px; border: 0"&gt;&lt;/iframe&gt;

&lt;p&gt;Some optimization algorithms. Click on a colour in the legend to hide/show it
&lt;/center&gt;&lt;/p&gt;
&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#solution-existence"&gt;Do Solutions Even Exist?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#structure"&gt;How this guide is structured&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gradient-descent-optimizers"&gt;Gradient Descent Optimizers&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#stochastic-gradient-descent"&gt;Stochastic Gradient Descent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sgd-with-momentum"&gt;SGD with Momentum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sgd-with-nesterov-momentum"&gt;SGD with Nesterov Momentum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gradient-descent-comparision"&gt;Putting it all together&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#refs-and-footnotes"&gt;References and Footnotes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!--
3. &lt;a href="#adaptive-optimizers"&gt;Adaptive Optimizers&lt;/a&gt;
    * &lt;a href="#adagrad"&gt;AdaGrad&lt;/a&gt;
    * &lt;a href="#rmsprop"&gt;RMSProp&lt;/a&gt;
    * &lt;a href="#rmsprop-with-nesterov-momentum"&gt;RMSProp with Nesterov Momentum&lt;/a&gt;
    * &lt;a href="#adam"&gt;Adam&lt;/a&gt;
    * &lt;a href="#nadam-nesterov-adam"&gt;NAdam (Nesterov Adam)&lt;/a&gt;
    * &lt;a href="#adamw"&gt;AdamW&lt;/a&gt;
    * &lt;a href="#amsgrad"&gt;AMSGrad&lt;/a&gt;
    * &lt;a href="#adabound"&gt;AdaBound&lt;/a&gt;
    * &lt;a href="#adabelief"&gt;AdaBelief&lt;/a&gt;
4. &lt;a href="#second-order-optimizers"&gt;Second Order Optimizers&lt;/a&gt;
    * &lt;a href="#newton"&gt;Newton&lt;/a&gt;
    * &lt;a href="#conjugate-gradients"&gt;Conjugate Gradients&lt;/a&gt;
        * &lt;a href="#fletcher-reeves"&gt;Fletcher-Reeves&lt;/a&gt;
        * &lt;a href="#polak-ribiere"&gt;Polak-Ribiere&lt;/a&gt;
    * &lt;a href="#bfgs"&gt;BFGS&lt;/a&gt;
    * &lt;a href="#l-bfgs"&gt;L-BFGS&lt;/a&gt;--&gt;

&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Most supervised learning tasks involve optimizing a loss function, in order to
fit the model to the given training data. Of these, the most common is neural
network training: neural networks have millions (even billions) of parameters
which need to be tuned so that the model can predict the right outputs.&lt;/p&gt;
&lt;p&gt;Obtaining closed form solutions to neural network problems is more often than
not intractable, and so we perform this optimization algorithmically and 
numerically. The main things we look for in an algorithm that optimizes the
loss function are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It should converge&lt;/strong&gt;: Sounds like a no-brainer, but the algorithm should be
  able to decide when and where to stop, and to ensure that the location at 
  which it stops is a local minima.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It should converge quickly&lt;/strong&gt;: The algorithm should take as few steps as
  possible to converge, as every step requires a parameter update, and updating
  millions (if not billions) of parameters is inefficient. Therefore, it should
  take the optimal steps at every point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It should be able to deal with ambiguity&lt;/strong&gt;: Loosely worded, the algorithm 
  would not have the exact value of the gradient: all the algorithms described 
  use a batch of samples to obtain an estimate of the gradient, and the 
  expected value of the gradient obtained should equal the gradient of the 
  function at this point. The algorithm should be able to converge to a local 
  minima even if it obtains incorrect gradients at some steps in the process.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="solution-existence"&gt;Do solutions even exist?&lt;/h2&gt;

&lt;p&gt;We can't really go further without knowing what the loss landscape looks like: 
do solutions even exist? How do we visualize a high-dimensional loss landscape?&lt;/p&gt;
&lt;p&gt;A few observations about the loss landscape of a neural network from Goodfellow
are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;As dimensionality of the latent space increases, the probability a
   critical point is a local minima decreases&lt;/strong&gt;. The curvature of a point is
   given by the eigenvalues of the hessian: if all the eigenvalues are positive,
   the point is a local minima (and the hessian is positive semi-definite), and
   the opposite for a local maxima. If we consider a random function, choosing 
   the sign of the eigenvalue is akin to tossing a coin. Therefore, in
   n-dimensional space, if we toss n coins to determine these signs, the
   probability that all of them turn up positive is very low. Therefore, high-
   dimensional space has more saddle points than local minima/maxima&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;There are several equally good local minima&lt;/strong&gt;: because of scale invariance,
   if you scale the inputs to a layer down by 10 and multiply the outputs by 10,
   then you get the same resultant network. Also, if you switch the position of
   two neurons in a layer with each other while maintaining the connections, 
   you get the same network. These two similarities result in a large number of
   similar optima, reaching any one of which will optimize the entire network.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of these are in our favour, and show us that reaching a local minima in
high-dimensional space should be sufficient to fit the network. We'll now take 
a look at some algorithms which do this.&lt;/p&gt;
&lt;p&gt;As for visualizing the loss landscape, this is significantly trickier to do.
This work by &lt;a href="https://arxiv.org/pdf/1712.09913v3.pdf"&gt;Goldstein et al&lt;/a&gt; does a
good job of it, but visualizing and comparing the paths taken by optimization 
algorithms on this landscape is very difficult: because what we're seeing is a
projection onto two dimensions, the direction taken by the path need not
correspond to the direction of maximum descent. This repository by &lt;a href="https://github.com/logancyang/loss-landscape-anim"&gt;Logan Yang&lt;/a&gt;
had a good implementation of this paper, along with traces of the paths taken
by various optimization algorithms showing why we can't use this to
qualitatively compare different optimization algorithms with each other &lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img src="/articles/2023/res/loss_landscape_goldstein.png" width=800px&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;The loss landscape of ResNet-56 (source: Goldstein et al)
&lt;/center&gt;&lt;/p&gt;
&lt;h2 id="structure"&gt;How this guide is structured&lt;/h2&gt;

&lt;p&gt;While most deep learning problems use a super high-dimensional loss function, 
for the purposes of this guide we'll use a simple 2-D loss function which is 
a linear combination of gaussians of the following form
$$\begin{gather}
f(x, y) = se^{-(ax+by+c)^2} \\
\mathcal{L} = \sum_{i=1}^{n} f_i(x, y)
\end{gather}$$&lt;/p&gt;
&lt;p&gt;The good thing about gaussians is that they're easy to differentiate
$$\begin{align}
\frac{\partial f}{\partial x} &amp;amp;= -2a(ax+by+c)f(x,y) \\
\frac{\partial f}{\partial y} &amp;amp;= -2b(ax+by+c)f(x,y) \\
\frac{\partial^2 f}{\partial x^2} &amp;amp;= -2a^2(1 - 2(ax+by+c)^2)f(x,y) \\
\frac{\partial^2 f}{\partial x \partial y} &amp;amp;= -2ab(1 - 2(ax+by+c)^2)f(x,y) \\
\frac{\partial^2 f}{\partial y^2} &amp;amp;= -2b^2(1 - 2(ax+by+c)^2)f(x,y)
\end{align}$$&lt;/p&gt;
&lt;p&gt;so all the methods can use the exact gradient/hessian of the loss function
rather than a &lt;em&gt;stochastic&lt;/em&gt; one. This is kind of cheating, but since this is a
science experiment, let's run with it. about this loss func&lt;/p&gt;
&lt;p&gt;$s, a, b, c$ are generated uniform randomly from a suitable range, and I played
around manually with this till I got a loss function that looked funky enough
for my needs. We finally use the following loss function, and it's been
exported to the file &lt;code&gt;func.dill&lt;/code&gt; if you want to load it in (use dill to load it, 
as there were some errors serializing it via pickle)&lt;/p&gt;
&lt;iframe src="/articles/2023/res/loss_fn_interactive.html" style="width: 100%; height: 620px; border: 0"&gt;&lt;/iframe&gt;

&lt;p&gt;The convergence criterion that's used for all optimizers is when the gradient norm 
is less than 0.05, and all the optimizers are limited to take atmost 1000 steps.&lt;/p&gt;
&lt;p&gt;The plots are made in Bokeh/Plotly and are interactive (if you haven't already 
played with the plot we generated in the start). I've done my best to be 
inspired by &lt;a href="https://distill.pub"&gt;Distill&lt;/a&gt;, most notably &lt;a href="https://distill.pub/2017/momentum/"&gt;Gabriel Goh&lt;/a&gt;'s
beautiful, interactive article on momentum.&lt;/p&gt;
&lt;h1 id="gradient-descent-optimizers"&gt;Gradient Descent Optimizers&lt;/h1&gt;

&lt;p&gt;Gradient Descent optimizers converge to a local minimum by simply following the
gradient: there's no adaptiveness here, and it's akin to feeling the area 
around your feet and just taking a small step in the steepest direction, and 
repeating that till you get to the minima. There are a few tricks here and we 
take hints from Physics to speed up the convergence, but most of the algorithm
relies on the gradient, and the speed with which we're already going.&lt;/p&gt;
&lt;h2 id="stochastic-gradient-descent"&gt;Stochastic Gradient Descent&lt;/h2&gt;

&lt;p&gt;SGD is probably the first optimization algorithm one thinks of. It's
deceptively simple: Look around and take a step in the direction where the
gradient decreases the most. Once you've taken the step, &lt;strong&gt;Stop&lt;/strong&gt;, look around
again, and repeat until you're at the minima (the gradient is sufficiently 
small or you come back to a point you've visited).&lt;/p&gt;
&lt;p&gt;Th &lt;em&gt;S&lt;/em&gt; in SGD comes from the fact that the gradient that the algorithm obtains
in practice is not perfect: it's an approximation of the actual gradient of the
loss function, based on the batch of examples that are sampled. However, this
approximates the gradient reasonably well, and in the long run, the expected
path taken by this algorithm comes out to be the same as the path taken when we
can perfectly obtain the gradient.&lt;/p&gt;
&lt;p&gt;The update rule for SGD is fairly simple:&lt;/p&gt;
&lt;p&gt;$$\begin{align}
\theta_{t+1} &amp;amp;\leftarrow \theta_{t} - \epsilon g(\theta_{t})
\end{align}$$&lt;/p&gt;
&lt;p&gt;Combining this with a convergence criterion gives us the algorithm (implemented
in python here)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;SGD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="sgd-with-momentum"&gt;SGD with Momentum&lt;/h2&gt;

&lt;p&gt;While SGD is simple, it is slow to converge, taking several more steps than
required. This is because we come to a stop once we take a step, and the size
of the next step is solely determined by the gradient at that point. This means
that if we're in a long stretch where the gradient is small, we can only 
descend at the speed $\epsilon g$, even though we know that the stretch is
reasonably long. This slows down our algorithm and makes it take a longer time
to converge.&lt;/p&gt;
&lt;p&gt;Momentum counters this by providing some inertia to the process. Intuitively,
if SGD is a person stopping and taking a step in the direction of maximum 
descent, momentum is equivalent to throwing a ball down the incline of a given
mass and seeing where it settles. If you take a look at the path momentum
follows in the introduction plot, you can see that it doesn't immediately stop
when it comes to a point with a zero (or very small) gradient; instead, it
oscillates until it loses all it's velocity.&lt;/p&gt;
&lt;p&gt;How do we simulate adding 'mass' to the update steps? We claim that the ball
moves at a velocity $v$, and model $v$ as an exponential moving average of the
current velocity and the gradient at the current point. The update equations
are as follows:&lt;/p&gt;
&lt;p&gt;$$\begin{align}
v_{t+1} &amp;amp;\leftarrow \alpha v_{t} - \epsilon g(\theta_{t}) \\
\theta_{t+1} &amp;amp;\leftarrow \theta_{t} + v_{t+1}
\end{align}$$&lt;/p&gt;
&lt;p&gt;What's the maximum velocity we can move at? If all the gradients are in the
same direction for an infinite (practically a very large) period of time, then
this velocity is equal to&lt;/p&gt;
&lt;p&gt;$$v_{\text{max}} = \frac{\epsilon g}{1-\alpha}$$&lt;/p&gt;
&lt;p&gt;This can be derived by expanding out the recurrence in the update step, to
obtain an infinite GP. This GP converges when $\alpha &amp;lt; 1$ to $1/(1-\alpha)$.
We can think of $1-\alpha$ as the 'mass' of the ball: the smaller this quantity
is, the faster the ball will move.&lt;/p&gt;
&lt;p&gt;Generally (and in this simulation as well), $\alpha = 0.9$, so $1-\alpha = 0.1$.
This means that we can move atmost ten times faster than the step size at a
point, and this is what causes momentum to converge faster!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;SGD_momentum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What do these gradient updates look like in practice? For starters, all changes
in the direction of the path are caused due to changes in the gradient. Where
the path takes a turn, the gradient is normal or antiparallel to the current
velocity, and at places where the path is straight, both the gradient and the
velocity are parallel. We can draw out the update vectors at two points in the
path above to see how this works.&lt;/p&gt;
&lt;iframe src="/articles/2023/res/momentum_vectors.html" style="width: 100%; height: 650px; border: 0"&gt;&lt;/iframe&gt;

&lt;h2 id="sgd-with-nesterov-momentum"&gt;SGD with Nesterov Momentum&lt;/h2&gt;

&lt;p&gt;If you've seen the path that momentum takes, there is one issue: &lt;em&gt;Momentum
doesn't stop very soon&lt;/em&gt;. It's easy to get the ball rolling, but harder to stop
it. This happens because the gradient that's added to the path is the gradient
&lt;em&gt;at the current point&lt;/em&gt;, not the gradient &lt;em&gt;at the point at which we would have 
been, if we took the step&lt;/em&gt;. In a continuous, real-world scenario, this 
difference is infinitesimal, but in a numerical scenario, it becomes 
significant if our step size is not small enough. This is also not an issue if 
our gradients at consecutive points are similar, but becomes an issue if we
'jump' across a local minima: momentum would push us even further forward, 
because the gradient at the current point is downward. &lt;/p&gt;
&lt;p&gt;This 'bug' was discovered by Nesterov, and the fix was to compute the gradient
at $\theta_{t} + \alpha v_{t}$ (the position we will be at, if the gradient is 
zero) rather than at $\theta_{t}$ (our current position). This 'pulls' the
gradient back if we jump across a minima&lt;/p&gt;
&lt;iframe src="/articles/2023/res/nesterov_comparision.html" style="width: 100%; height: 650px; border: 0"&gt;&lt;/iframe&gt;

&lt;p&gt;The implementation and update are quite similar, with just a minor update to
the gradient calculation.&lt;/p&gt;
&lt;p&gt;$$\begin{align}
v_{t+1} &amp;amp;\leftarrow \alpha v_{t} - \epsilon g(\theta_{t} + \alpha v_{t}) \\
\theta_{t+1} &amp;amp;\leftarrow \theta_{t} + v_{t+1}
\end{align}$$&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;SGD_nesterov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="gradient-descent-comparision"&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;Here's an interactive demo, showing the paths taken by SGD, SGD with Momentum
and SGD with Nesterov Updates. The arrows have the same colour scheme as
before, and show the directions in which the path is pulled (their sum is the
next resultant step). Playing around with this should give you an idea of how
these algorithms update themselves&lt;/p&gt;
&lt;iframe src="/articles/2023/res/comparision_plot.html" style="width: 100%; height: 650px; border: 0"&gt;&lt;/iframe&gt;

&lt;p&gt;Even though there are a large number of new algorithms for optimization, SGD
with Nesterov momentum (along with Adam) remains the algorithm of choice for
training very large neural networks: it's stable, explainable and converges
nicely.&lt;/p&gt;
&lt;!--
&lt;h2 id="adaptive-optimizers"&gt;Adaptive Optimizers&lt;/h2&gt;


&lt;h2 id="adagrad"&gt;AdaGrad&lt;/h2&gt;

$$\begin{align}
r_{t+1} &amp;\leftarrow r_{t} + (g(\theta_{t}))^2 \\\\
v_{t+1} &amp;\leftarrow -\frac{\epsilon g(\theta_{t})}{\sqrt{r_{t+1} + \delta}} \\\\
\theta_{t+1} &amp;\leftarrow \theta_{t} + v_{t+1}
\end{align}$$


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;AdaGrad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2 id="rmsprop"&gt;RMSProp&lt;/h2&gt;

$$\begin{align}
r_{t+1} &amp;\leftarrow \rho r_{t} + (1-\rho)(g(\theta_{t}))^2 \\\\
v_{t+1} &amp;\leftarrow -\frac{\epsilon g(\theta_{t})}{\sqrt{r_{t+1} + \delta}} \\\\
\theta_{t+1} &amp;\leftarrow \theta_{t} + v_{t+1}
\end{align}$$


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;RMSProp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;decay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decay&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;decay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;1e-7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2 id="rmsprop-with-nesterov-momentum"&gt;RMSProp with Nesterov Momentum&lt;/h2&gt;

$$\begin{align}
r_{t+1} &amp;\leftarrow \rho r_{t} + (1-\rho)(g(\theta_{t} + \alpha v_{t}))^2 \\\\
v_{t+1} &amp;\leftarrow \alpha v_{t} - \frac{\epsilon g(\theta_{t})}{\sqrt{r_{t+1} + \delta}} \\\\
\theta_{t+1} &amp;\leftarrow \theta_{t} + v_{t+1}
\end{align}$$


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;RMSProp_nesterov&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;decay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decay&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;decay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;1e-7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2 id="adam"&gt;Adam&lt;/h2&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Adam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.999&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;rh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rh&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;1e-7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2 id="nadam-nesterov-adam"&gt;NAdam (Nesterov Adam)&lt;/h2&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;NAdam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.999&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# nesterov step&lt;/span&gt;
        &lt;span class="n"&gt;rh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rh&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;1e-7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2 id="adamw"&gt;AdamW&lt;/h2&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;AdamW&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;5e-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;rh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;eps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rh&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;1e-7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# adamW step&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;h2 id="amsgrad"&gt;AMSGrad&lt;/h2&gt;


&lt;h2 id="adabound"&gt;AdaBound&lt;/h2&gt;


&lt;h2 id="adabelief"&gt;AdaBelief&lt;/h2&gt;


&lt;h1 id="second-order-optimizers"&gt;Second Order Optimizers&lt;/h1&gt;


&lt;h2 id="newton"&gt;Newton&lt;/h2&gt;


&lt;h2 id="conjugate-gradients"&gt;Conjugate Gradients&lt;/h2&gt;


&lt;h3 id="fletcher-reeves"&gt;Fletcher-Reeves&lt;/h3&gt;


&lt;h3 id="polak-ribiere"&gt;Polak-Ribiere&lt;/h3&gt;


&lt;h2 id="bfgs"&gt;BFGS&lt;/h2&gt;


&lt;h2 id="l-bfgs"&gt;L-BFGS&lt;/h2&gt;--&gt;

&lt;h1 id="refs-and-footnotes"&gt;References and Footnotes&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Goh, "Why Momentum Really Works", Distill, 2017. 
   &lt;a href="http://doi.org/10.23915/distill.00006"&gt;http://doi.org/10.23915/distill.00006&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Goodfellow, Ian, Bengio, Yoshua and Courville, Aaron. Deep Learning. : MIT 
   Press, 2016. &lt;/li&gt;
&lt;li&gt;Melville, James. Nesterov Accelerated Gradient and Momentum. 
   &lt;a href="https://jlmelville.github.io/mize/nesterov.html"&gt;https://jlmelville.github.io/mize/nesterov.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;This was supposed to also feature adaptive optimizers (AMSGrad, RMSProp, Adam 
and friends), but due to CCIC happening in the last week of December, I didn't
get the time to do this properly, and the second semester starts &lt;strike&gt;in a
couple days&lt;/strike&gt; tomorrow, so hard deadline :/ I'll try to get part 2 out
as soon as possible, but it might be a while. In the meantime, exploring the
source might help for the impatient.&lt;/p&gt;
&lt;p&gt;For the complete code, and to play around and implement your own optimizers, 
check out the repository here&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="https://github.com/Aniruddha-Deb/optimizers"&gt;&lt;img src="https://gh-card.dev/repos/Aniruddha-Deb/optimizers.svg"&gt;&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Machine Learning"></category><category term="Deep Learning"></category></entry><entry><title>My DL workflow for 2023</title><link href="https://aniruddhadeb.com/articles/2022/dl-workflow-2023.html" rel="alternate"></link><published>2022-12-29T23:40:00+05:30</published><updated>2022-12-29T23:40:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-12-29:/articles/2022/dl-workflow-2023.html</id><summary type="html">&lt;p&gt;I've kind of zeroed down on Deep Learning at this point, and putting my money
where my mouth is, will be taking both COL772 (Natural Language Processing) and
COL775 (Deep Learning) next semester.&lt;/p&gt;
&lt;p&gt;Along with Operating Systems, Parallel Programming and Theory of Computation.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img width="600px" src="/articles/2022/res/cs_degree.png"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Why a workflow?&lt;/h2&gt;
&lt;p&gt;I'll need to train …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've kind of zeroed down on Deep Learning at this point, and putting my money
where my mouth is, will be taking both COL772 (Natural Language Processing) and
COL775 (Deep Learning) next semester.&lt;/p&gt;
&lt;p&gt;Along with Operating Systems, Parallel Programming and Theory of Computation.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img width="600px" src="/articles/2022/res/cs_degree.png"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Why a workflow?&lt;/h2&gt;
&lt;p&gt;I'll need to train a lot of models, and while &lt;a href="https://kaggle.com"&gt;Kaggle&lt;/a&gt; and 
&lt;a href="https://colab.research.google.com"&gt;Colab&lt;/a&gt; are great at this, 30 hours a week 
won't cut it. So I'll need to move to using the 
&lt;a href="https://supercomputing.iitd.ac.in"&gt;IITD HPC&lt;/a&gt; to train some (most?) of my 
models.&lt;/p&gt;
&lt;p&gt;Most of this article will be very HPC-specific: the libraries, environment and
everything else involved in the setup probably (and thankfully) won't need to 
be replicated anywhere else, but the entire environment is something I'll 
probably use throughout next semester. &lt;/p&gt;
&lt;p&gt;If you're reading this as a HPC getting started guide, this is not it. Ruturaj
has published a great guide for that &lt;a href="https://github.com/kanha95/HPC-IIT-Delhi"&gt;here&lt;/a&gt;, 
and you should check that out as an introduction. This is a tad bit more 
advanced.&lt;/p&gt;
&lt;h2&gt;Mission Statement&lt;/h2&gt;
&lt;p&gt;I need an environment that will let me train the same model on both kaggle and
the HPC. Preferably do my initial EDA/debug runs on kaggle and then finetune/do 
production runs on the HPC. &lt;/p&gt;
&lt;p&gt;Let's look at a Pro/Con matrix for both platforms:&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
  &lt;th&gt;&lt;/th&gt;
  &lt;th&gt;Kaggle&lt;/th&gt;
  &lt;th&gt;HPC&lt;/th&gt;
&lt;/tr&gt;
&lt;tr style="background-color: #bae3b399;"&gt;
  &lt;td style="vertical-align: middle;"&gt; &lt;b&gt;Pro&lt;/b&gt; &lt;/td&gt;
  &lt;td&gt;&lt;ul&gt;
    &lt;li&gt;Easy to use! Versioning, running and working with data is super easy&lt;/li&gt;
    &lt;li&gt;Good GPU's (T4 x2, P100)&lt;/li&gt;
    &lt;li&gt;Large, Common datasets already there&lt;/li&gt;
  &lt;/ul&gt;&lt;/td&gt;
  &lt;td&gt;&lt;ul&gt;
    &lt;li&gt;No 12h limit, so run really long jobs!&lt;/li&gt;
    &lt;li&gt;Allocate as much hardware as you need (8 GPU rig go brr)&lt;/li&gt;
    &lt;li&gt;Get Skylake nodes if you're lucky or have funding (with 32GB V100 cards)&lt;/li&gt;
  &lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="background-color: #f0b9b499;"&gt;
  &lt;td style="vertical-align: middle;"&gt; &lt;b&gt;Con&lt;/b&gt; &lt;/td&gt;
  &lt;td&gt;&lt;ul&gt;
    &lt;li&gt;Only 30 hours a week&lt;/li&gt;
    &lt;li&gt;Working with notebooks/datasets without a proper filesystem may get 
        tedious for larger models&lt;/li&gt;
  &lt;/ul&gt;&lt;/td&gt;
  &lt;td&gt;&lt;ul&gt;
    &lt;li&gt;Slow, outdated GPU on haswell nodes (K40)&lt;/li&gt;
    &lt;li&gt;Super complicated versioning and environment management&lt;/li&gt;
    &lt;li&gt;System versions of software/libraries are antiquated and unreliable&lt;/li&gt;
  &lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;So, if we're shifting to HPC, we need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A Live Notebook environment&lt;/strong&gt;: JupyterLab running on HPC would be great to 
  test/debug stuff: no ML model runs at the first go, and it's foolish to
  assume that every model we run will just be some python script that we'll
  need to train. Exploring and interacting with models is part of the job
  description&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Seamless Kaggle Integration&lt;/strong&gt;: This is quite important, as we should be 
  directly able to jump from kaggle to HPC if needed, and the way this is
  finally implemented is via GitHub integration with Kaggle, and Papermill+Git
  on HPC to run notebooks (some config stuff, such as input/output directories
  are involved, which I'll get to later)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A Proper Installable Environment&lt;/strong&gt;: This was initially set up with Conda, 
  but because conda throws tantrums if the bashrc is not set according to it's
  tastes, all I used conda for was to setup the initial virtual environment.
  From there, it's easier to directly activate the virtual environment yourself
  and use pip.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Setup Process&lt;/h2&gt;
&lt;p&gt;This section started out as being very procedural, but I think a good grasp of
how the HPC works is more important. For starters, all relevant software that
you need is loaded in at runtime via &lt;a href="https://modules.readthedocs.io/en/latest/"&gt;Environment
modules&lt;/a&gt;. These use modulefiles, 
which look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;whatis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;what this module does&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;modules_this_module_depends_on&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;prepend&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PATH_VAR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;path_to_append&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;setenv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ENV_FLAGS&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is great, but it's also super complicated to make a module and load a
module by yourself. You can only install software to your home directory, not
being admin, and modules are loaded from &lt;code&gt;MODULEPATH&lt;/code&gt; (which is
&lt;code&gt;/home/soft/modules&lt;/code&gt; on HPC). You could append &lt;code&gt;~/.local/modules&lt;/code&gt; to
&lt;code&gt;MODULEPATH&lt;/code&gt; on login, and then define your own modules, but that's still
fairly complicated. &lt;/p&gt;
&lt;p&gt;Since we're only going to be working with Python, using a virtual environment
is a better option. The python on HPC, however, has some hidden hacks.
Examining the module file for &lt;code&gt;apps/anaconda/3&lt;/code&gt; gives us the following two 
lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;set             TOP                     /home/apps/anaconda3_2018/4.6.9
...
setenv          PYTHON_ROOT             $TOP          
prepend-path    PYTHONPATH      $TOP/lib/python3.6/site-packages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is an issue, because after activating this module, &lt;code&gt;python2&lt;/code&gt; stops working
because the &lt;code&gt;PYTHONPATH&lt;/code&gt; has been changed. This means that your python proxy
script won't run! (3EnvCreation also does the same, although that sets &lt;code&gt;TOP&lt;/code&gt; as
&lt;code&gt;/home/apps/anaconda3/5.2.0/gnu&lt;/code&gt;). Activating an environment also causes issues
when you're doing it on a job, as &lt;code&gt;.bashrc&lt;/code&gt; is not called while running a job,
and conda, as said previously, throws tantrums when it's not configured in your
&lt;code&gt;.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The way we work around this is to create your conda environment AFTER activating
your proxy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;anaconda&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;EnvCreation&lt;/span&gt;
&lt;span class="n"&gt;conda&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dl_35&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;3.7&lt;/span&gt;
&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;anaconda&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;EnvCreation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then pick up the &lt;code&gt;activate&lt;/code&gt; script in &lt;code&gt;/home/apps/anaconda3/5.2.0/gnu/bin&lt;/code&gt; 
(&lt;code&gt;/home/apps/anaconda3_2018/4.6.9/bin&lt;/code&gt; if you made your env while using 
 &lt;code&gt;apps/anaconda/3&lt;/code&gt;), and place that in your home folder, or somewhere 
accessible. To activate your environment, you can now directly call &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;path/to/activate&lt;span class="w"&gt; &lt;/span&gt;path/to/env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;for example, I have &lt;code&gt;activate&lt;/code&gt; in my &lt;code&gt;scripts&lt;/code&gt; directory, so I'll run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;scripts/activate&lt;span class="w"&gt; &lt;/span&gt;.conda/envs/dl_35
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and it'll work, without loading any modules or without throwing errors that
conda isn't configured for your shell. Great!&lt;/p&gt;
&lt;p&gt;The next task we come to is actually installing libraries on there. Most stuff
is simple to install, and can be done via pip, except PyTorch. One major issue
on HPC are the dated GPU's: they have CUDA compute capability 3.5, and that's
not compatible with PyTorch, even though cudatoolkit 10 supports this CUDA
compute version! The reason is that compiling PyTorch to so many platforms
would increase the size of the resulting binary, and they wouldn't be able to
push the binaries to conda and pip archives. &lt;/p&gt;
&lt;p&gt;To work around this, you'll have to install a version of PyTorch compiled for
CUDA 3.5; &lt;a href="https://github.com/nelson-liu/pytorch-manylinux-binaries/releases"&gt;Nelson Liu&lt;/a&gt; 
has fortunately compiled some binaries, and they're great for getting PyTorch
to work. Follow the instructions and download and install the binary for your
python version only. The download itself is a bit large, so make sure you have
enough bandwidth left on your proxy.&lt;/p&gt;
&lt;p&gt;That covers most of what I did. I installed Jupyter, pandas, numpy, matplotlib,
plotly, scikit-learn and the usual suspects on my virtual environment, along
with some JupyterLab plugins and &lt;a href="https://papermill.readthedocs.io/en/latest/index.html"&gt;papermill&lt;/a&gt;,
which is also what Kaggle uses to run their notebooks.&lt;/p&gt;
&lt;h2&gt;Any Good?&lt;/h2&gt;
&lt;p&gt;I would be working on GAN's next semseter, so let's see if we can get StyleGAN2
up and running on our setup&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;qsub&lt;span class="w"&gt; &lt;/span&gt;scripts/nbserver.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This runs a jupyter server with 4 CPU's, 1 GPU and 16G of memory for 2 hours; 
you can modify the parameters and runtime by downloading and customizing the
script from &lt;a href="https://gist.github.com/Aniruddha-Deb/2d48ba5ef8fcb853024a994b7cc73531"&gt;here&lt;/a&gt;,
but for now let's continue. Once our server is up and running, we'll get an
email and we can check the output logs to get the URL for the server, and we're
good to go&lt;/p&gt;
&lt;p&gt;&lt;img alt="jupyter on HPC" src="res/jupyter_hpc.png"&gt;&lt;/p&gt;
&lt;p&gt;I've cloned the &lt;a href="https://github.com/NVlabs/stylegan2-ada-pytorch"&gt;StyleGAN2&lt;/a&gt; 
PyTorch implemenation, and downloaded the weights trained on FFHQ from 
&lt;a href="https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/"&gt;here&lt;/a&gt;. Then made a 
notebook in the same directory and followed the examples&lt;/p&gt;
&lt;p&gt;Let's generate one image!&lt;/p&gt;
&lt;p&gt;&lt;img alt="One image" src="res/one_stylegan_image.png"&gt;&lt;/p&gt;
&lt;p&gt;Not too bad. Let's do 10 now&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ten faces" src="res/ten_faces.png"&gt;&lt;/p&gt;
&lt;h2&gt;What Next?&lt;/h2&gt;
&lt;p&gt;I still haven't gotten around to synergising kaggle with HPC, but it looks very
doable. Kaggle integrates with GitHub well: you can link your notebooks and
commit to GitHub with each kaggle commit. Papermill can pass parameters to a
cell that's been tagged as 'parameters' using Jupyter. All I'll have to do is
commit to GitHub from Kaggle, open up the notebook on HPC and mark the cell
as parameters (I'll have the input and output directories here, along with some
hyperparameters, and I can standardize this across all my scripts), and then
run the notebook with Papermill.&lt;/p&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;I've been at home for the past three weeks and have been prepping for a large(ish)
article to start 2023 with: an optimizer playground, with some interactive
charts. Stay tuned for that!&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Machine Learning"></category><category term="Deep Learning"></category></entry><entry><title>Daft Punk and Interstella 5555</title><link href="https://aniruddhadeb.com/articles/2022/daft-punk-interstella.html" rel="alternate"></link><published>2022-12-11T12:30:00+05:30</published><updated>2022-12-11T12:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-12-11:/articles/2022/daft-punk-interstella.html</id><summary type="html">&lt;p&gt;In 2001, Daft Punk were nowhere near the mask-rocking superstars they are today. 
The only album they had to their credit was their debut, &lt;em&gt;Homework&lt;/em&gt;, and their 
robot masks hadn't even materialized yet. In 2001, they came out with &lt;em&gt;Discovery&lt;/em&gt;,
Which in many ways has defined their music style and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In 2001, Daft Punk were nowhere near the mask-rocking superstars they are today. 
The only album they had to their credit was their debut, &lt;em&gt;Homework&lt;/em&gt;, and their 
robot masks hadn't even materialized yet. In 2001, they came out with &lt;em&gt;Discovery&lt;/em&gt;,
Which in many ways has defined their music style and approach for the 21st 
century.&lt;/p&gt;
&lt;h2&gt;The Importance of Discovery&lt;/h2&gt;
&lt;p&gt;Daft Punk didn't have their helmets before discovery. &lt;/p&gt;
&lt;p&gt;Let that sink in. Their most iconic feature came about as a story they wove, 
that there was "An Accident in the Studio", and since then, the helmets 
themselves have become more iconic than Thomas and Guy. If they choose, they 
could let the legend live on by handing down the helmets to someone else. &lt;/p&gt;
&lt;p&gt;But we deviate.&lt;/p&gt;
&lt;p&gt;The sounds in Discovery are very wide ranging: from the lyrical &lt;a href="https://music.youtube.com/watch?v=TZhxu5iCDnI&amp;amp;feature=share"&gt;Too Long&lt;/a&gt; to the
deep &lt;a href="https://music.youtube.com/watch?v=POSwzCFwUZ0&amp;amp;feature=share"&gt;Veridis Quo&lt;/a&gt;. 
There's a lot of variety, and while most would just listen to One More Time and 
Harder, Better, Faster, Stronger and think they're representative of the kind 
of work Daft Punk does (electronic disco pop with vocoder-ed vocals), that's 
far from the truth, and every song in this album has a story to tell. The story
of a band that's morphing into what they will be for the next two decades.&lt;/p&gt;
&lt;h2&gt;Interstella 5555&lt;/h2&gt;
&lt;p&gt;So if every song has a story to tell, how do we tell it? Daft Punk initially
planned to release every record on Discovery as a single, with an accompanying
music video. If you've seen the MV's for &lt;em&gt;One More Time&lt;/em&gt; and &lt;em&gt;Harder, Better,
Faster, Stronger&lt;/em&gt;, great. If not, let me refresh your memory. &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/gAjR4_CbPpQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/FGBhQbmPwH8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;you would've felt an overarching theme there. What ties these (and a couple other 
MV's) together? In a Pink Floyd-esque move, rather than releasing individual
MV's, Daft Punk decided to chain together all the songs in Discovery together
to make a complete musical. If that wasn't enough to get you excited, they tied
up with &lt;a href="https://en.wikipedia.org/wiki/Leiji_Matsumoto"&gt;Leiji Matsumoto&lt;/a&gt; to
make it animated rather than live-action.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/3Qxe-QOp_-s" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;This was amazing to see as a daft punk fan: The entire story is beautiful, and 
is about an alien band that's abducted, shipped off to Earth and made to play 
corporate pop for profiting a major record label. The story is about how they 
escape this. What's even more interesting is that none of the characters ever 
speak: it's all just animation and lyrics. Letting the music speak for the
characters is amazing, and while it's easy on the ears and eyes of the viewers, 
I can only imagine how hard it must have been as an artist to create such 
coherence.&lt;/p&gt;
&lt;h2&gt;A Deeper Dive&lt;/h2&gt;
&lt;p&gt;I've just watched this once: more trivia always pops up when I see something 
multiple times, but what's immediately noticeable is &lt;a href="https://www.vulture.com/2018/04/how-2001-a-space-odyssey-has-influenced-pop-culture.html"&gt;The 2001 effect&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="anime" src="res/space_odyssey_1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="odyssey" src="res/space-odyssey-red.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="anime" src="res/space_odyssey_2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="odyssey" src="res/space_odyssey_light_tunnel.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Another bit of trivia: even though Daft Punk makes a cameo in the awards scene 
(Of course they do, they're &lt;em&gt;Daft Punk&lt;/em&gt;!), This scene is filled with tributes 
to people whose music Daft Punk have sampled for Discovery.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Daft Punk cameo" src="res/daft_punk.png"&gt;&lt;/p&gt;
&lt;p&gt;Here's Sister Sledge. &lt;a href="https://www.youtube.com/watch?v=7qyL2yN88pI"&gt;IL Macquilage Lady&lt;/a&gt; was sampled for &lt;a href="https://www.youtube.com/watch?v=L93-7vRfxNs"&gt;Aerodynamic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="sister sledge" src="res/sister_sledge.png"&gt;&lt;/p&gt;
&lt;p&gt;And this is Eddie Johns (?), from whom &lt;a href="https://www.youtube.com/watch?v=JYya05epoZ8&amp;amp;feature=youtu.be"&gt;More Spell on You&lt;/a&gt; was sampled for One More Time&lt;/p&gt;
&lt;p&gt;&lt;img alt="eddie johns" src="res/eddie_johns.png"&gt;&lt;/p&gt;
&lt;p&gt;These are the Spice Girls?&lt;/p&gt;
&lt;p&gt;&lt;img alt="spice girls" src="res/spice_girls.png"&gt;&lt;/p&gt;
&lt;p&gt;I'm pretty sure this one is Mozart? (This comes later in the movie)&lt;/p&gt;
&lt;p&gt;&lt;img alt="mozart" src="res/mozart.png"&gt;&lt;/p&gt;
&lt;p&gt;And this is Bob Marley?&lt;/p&gt;
&lt;p&gt;&lt;img alt="marley" src="res/bob_marley.png"&gt;&lt;/p&gt;
&lt;p&gt;And this is Robert Plant?&lt;/p&gt;
&lt;p&gt;&lt;img alt="rob plant" src="res/robert_plant.png"&gt;&lt;/p&gt;
&lt;p&gt;I have zero clue who these two are, although they should be famous. Let me know 
in the comments!&lt;/p&gt;
&lt;p&gt;&lt;img alt="no idea" src="res/no_idea_1.png"&gt;
&lt;img alt="no idea" src="res/no_idea_2.png"&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a pure visual treat if you're into Daft Punk, and it was an amazing 
experience delving into their discography. Some of the songs they sampled are 
amazing in themselves, and I'll be listening to them more, as well as giving 
this another view and updating whatever I find :)&lt;/p&gt;
&lt;p&gt;PS: You can find a list of the sample history of Discovery &lt;a href="https://www.whosampled.com/album/Daft-Punk/Discovery/"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="General"></category><category term="General"></category></entry><entry><title>HackerFX v2</title><link href="https://aniruddhadeb.com/articles/2022/hackerfx-v2.html" rel="alternate"></link><published>2022-12-08T01:00:00+05:30</published><updated>2022-12-08T01:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-12-08:/articles/2022/hackerfx-v2.html</id><summary type="html">&lt;p&gt;Some of you might have come across &lt;a href="https://github.com/Aniruddha-Deb/HackerFX"&gt;HackerFX&lt;/a&gt;,
an image binarizer. This was written a long time back, when the only language I 
knew was Java, and when I was still in school. &lt;/p&gt;
&lt;p&gt;An update was on the cards for a while, because I wanted to change my desktop 
background …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some of you might have come across &lt;a href="https://github.com/Aniruddha-Deb/HackerFX"&gt;HackerFX&lt;/a&gt;,
an image binarizer. This was written a long time back, when the only language I 
knew was Java, and when I was still in school. &lt;/p&gt;
&lt;p&gt;An update was on the cards for a while, because I wanted to change my desktop 
background (which still looks surprisingly pretty for something made so long 
ago). I started playing around with PIL today evening to update this, and the 
end result is &lt;a href="https://github.com/Aniruddha-Deb/hackerfx-v2"&gt;HackerFX v2&lt;/a&gt;, a 
python rewrite that supports multicoloured input images, hex, file dumps, 
variable colors and a manual 5x5 font for the output charactes (so the aspect 
ratio doesn't have to be manually tweaked). It's a step jump in every way, and 
the images it generates are super pretty&lt;/p&gt;
&lt;p&gt;&lt;img alt="jojo" src="res/jojo.jpg"&gt;
&lt;img alt="jojo_out" src="res/jojo_out.png"&gt;&lt;/p&gt;
&lt;p&gt;Especially with hi-res shots, you have to zoom in to tell the difference. The 
performance is also very cool, given that you're iterating over millions of 
pixels. This does it all in less than 10 seconds.&lt;/p&gt;
&lt;p&gt;&lt;img alt="input" src="res/hallway.jpeg"&gt;
&lt;img alt="output" src="res/hallway_out.png"&gt;&lt;/p&gt;
&lt;p&gt;More examples are there in the github repo, and I haven't played around with 
the options much to generate prettier ones (it's getting kind of late, should sleep).
Feel free to clone the code, give it a spin on your images and enter the matrix :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: Thanks to &lt;a href="https://github.com/Salil03"&gt;Salil&lt;/a&gt; for implementing this 
for videos, and improvements to make video processing faster/better 
(multithreading, bitstream pre-generation, etc). Here's the result:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/O16AXOghFd8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>Bootloader Deep Dive</title><link href="https://aniruddhadeb.com/articles/2022/boot-deep-dive.html" rel="alternate"></link><published>2022-12-03T05:00:00+05:30</published><updated>2022-12-03T05:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-12-03:/articles/2022/boot-deep-dive.html</id><summary type="html">&lt;h2&gt;The Basics&lt;/h2&gt;
&lt;p&gt;The most basic boot process is BIOS on a standard i386/x86-64 device. The BIOS
first detects the CPU/RAM, then initializes the remainder of the hardware, and
then begins the boot sequence. The boot sequence basically consists of finding 
a bootable device, loading the boot program in …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Basics&lt;/h2&gt;
&lt;p&gt;The most basic boot process is BIOS on a standard i386/x86-64 device. The BIOS
first detects the CPU/RAM, then initializes the remainder of the hardware, and
then begins the boot sequence. The boot sequence basically consists of finding 
a bootable device, loading the boot program in that bootable device into the 
processor cache and letting the processor do it's thing.&lt;/p&gt;
&lt;p&gt;How is a bootable device found? A device is considered bootable if it has the 
magic bytes &lt;code&gt;0x55&lt;/code&gt; and &lt;code&gt;0xaa&lt;/code&gt; at offsets 511 and 512 from the start. This block
is called the &lt;em&gt;boot block&lt;/em&gt; or &lt;em&gt;master boot record&lt;/em&gt; (MBR), and this is what
kicks off the boot process. &lt;/p&gt;
&lt;p&gt;The MBR looks something like this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;sensei@manjaro-vm&lt;span class="w"&gt; &lt;/span&gt;temp&lt;span class="o"&gt;]&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;dd&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sda&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mbr.bin&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;512&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;+0&lt;span class="w"&gt; &lt;/span&gt;records&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;+0&lt;span class="w"&gt; &lt;/span&gt;records&lt;span class="w"&gt; &lt;/span&gt;out
&lt;span class="m"&gt;512&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bytes&lt;span class="w"&gt; &lt;/span&gt;copied,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00493179&lt;span class="w"&gt; &lt;/span&gt;s,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;104&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kB/s
&lt;span class="o"&gt;[&lt;/span&gt;sensei@manjaro-vm&lt;span class="w"&gt; &lt;/span&gt;temp&lt;span class="o"&gt;]&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;hexdump&lt;span class="w"&gt; &lt;/span&gt;mbr.bin&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="m"&gt;0000000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;63eb&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0090&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;
&lt;span class="m"&gt;0000010&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;
*
&lt;span class="m"&gt;0000050&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0001&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;
&lt;span class="m"&gt;0000060&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;faff&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;9090&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;c2f6&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;7480&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;f605&lt;span class="w"&gt; &lt;/span&gt;70c2
...
...
00001c0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0021&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;fe83&lt;span class="w"&gt; &lt;/span&gt;ffff&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0800&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;f026&lt;span class="w"&gt; &lt;/span&gt;01df&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;
00001d0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;
*
00001f0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;aa55
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;dd&lt;/code&gt; copies the first 512 bytes of my disk to a binary called &lt;code&gt;mbr.bin&lt;/code&gt;, and 
we hexdump it's contents. Note the &lt;code&gt;0x55&lt;/code&gt; and &lt;code&gt;0xaa&lt;/code&gt; magic bytes right at the 
end (the system is little endian, so it reads as &lt;code&gt;aa55&lt;/code&gt;). These 512 bytes tell 
the system to load in GRUB, which then begins the boot process.&lt;/p&gt;
&lt;h2&gt;GRUB&lt;/h2&gt;
&lt;p&gt;The GRand Unified Bootloader is the default bootloader on Linux systems. What 
GRUB does is create a basic runtime, initializes the ramdisk and finally loads 
the kernel in. GRUB is launched by those 512 bytes that we saw above. The
actual GRUB files are stored in &lt;code&gt;/boot/grub&lt;/code&gt;, and they look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/boot/grub
├──&lt;span class="w"&gt; &lt;/span&gt;fonts
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;unicode.pf2
├──&lt;span class="w"&gt; &lt;/span&gt;grub.cfg
├──&lt;span class="w"&gt; &lt;/span&gt;grubenv
├──&lt;span class="w"&gt; &lt;/span&gt;i386-pc
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;acpi.mod
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;adler32.mod
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;...
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;...
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;zstd.mod
├──&lt;span class="w"&gt; &lt;/span&gt;locale
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;ast.mo
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;ca.mo
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;...
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;...
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;zh_TW.mo
└──&lt;span class="w"&gt; &lt;/span&gt;themes
&lt;span class="w"&gt;    &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;starfield
&lt;span class="w"&gt;        &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;blob_w.png
&lt;span class="w"&gt;        &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;...
&lt;span class="w"&gt;        &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;...
&lt;span class="w"&gt;        &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;theme.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What GRUB does is essentially create a 'mini 32-bit linux OS', with debug
environments, a shell, and a lot of creature comforts, but beyond all that, it 
creates the RAMFS and loads the kernel and points it to the RAMFS. This can be 
seen in the &lt;code&gt;grub.cfg&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;menuentry&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Manjaro Linux&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--class&lt;span class="w"&gt; &lt;/span&gt;manjaro&lt;span class="w"&gt; &lt;/span&gt;--class&lt;span class="w"&gt; &lt;/span&gt;gnu-linux&lt;span class="w"&gt; &lt;/span&gt;--class&lt;span class="w"&gt; &lt;/span&gt;gnu&lt;span class="w"&gt; &lt;/span&gt;--class&lt;span class="w"&gt; &lt;/span&gt;os&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$menuentry_id_option&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gnulinux-simple-ffd2d1d7-a3e5-4e24-816d-d83f13c56708&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;savedefault
&lt;span class="w"&gt;    &lt;/span&gt;load_video
&lt;span class="w"&gt;    &lt;/span&gt;...
&lt;span class="w"&gt;    &lt;/span&gt;...
&lt;span class="w"&gt;    &lt;/span&gt;linux&lt;span class="w"&gt;   &lt;/span&gt;/boot/vmlinuz-5.15-x86_64&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;UUID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ffd2d1d7-a3e5-4e24-816d-d83f13c56708&lt;span class="w"&gt; &lt;/span&gt;rw&lt;span class="w"&gt;  &lt;/span&gt;quiet&lt;span class="w"&gt; &lt;/span&gt;udev.log_priority&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;initrd&lt;span class="w"&gt;  &lt;/span&gt;/boot/intel-ucode.img&lt;span class="w"&gt; &lt;/span&gt;/boot/initramfs-5.15-x86_64.img
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the last two lines: here we're specifying the actual linux kernel image
using the &lt;code&gt;linux&lt;/code&gt; command, and the files that initialize the RAMFS using &lt;code&gt;initrd&lt;/code&gt;.
(The &lt;code&gt;intel-ucode.img&lt;/code&gt; is a bunch of microcode patches that the OS loads in to 
workaround hardware-level bugs, think heartbleed, spectre etc. It's super 
important to load this in before anything else, so that the boot process may 
not be compromised and so on.)&lt;/p&gt;
&lt;h2&gt;What's a RAMFS&lt;/h2&gt;
&lt;p&gt;A RAM file system (or RAM disk) is, quite simply, a file system in memory! When 
the system needs to boot, the files for the system may not simply be on the 
HDD/SSD: they can be somewhere on the network (PXE boot), on a removable media 
(USB,CDROM) or on an encrypted drive! (BootLocker equivalents on Linux). For 
all this, we need a temporary file system that the kernel can run off of to
load the OS into actual memory.&lt;/p&gt;
&lt;p&gt;Another reason for a RAMFS is that the Linux kernel is neither monolithic, nor 
a microkernel: it's somewhere in between in the sense that you can load modules 
into the kernel while it's running. To do the stuff that we've described above,
(Boot off of the network, decrypt an encrypted drive, etc), the relevant kernel 
modules will need to be loaded into the kernel first. These generally reside in 
the initramfs image, and are loaded into memory by the kernel. &lt;code&gt;initramfs&lt;/code&gt; is 
generally a &lt;code&gt;cpio&lt;/code&gt; compressed image, which is decompressed when it's loaded in 
(something that GRUB does), and this is generated using the &lt;code&gt;mkinitcpio&lt;/code&gt; command, 
after specifying the default modules and hooks (for more information, check 
out &lt;a href="https://nickdesaulniers.github.io/blog/2018/10/24/booting-a-custom-linux-kernel-in-qemu-and-debugging-it-with-gdb/"&gt;This great resource&lt;/a&gt;
which boots a Linux Kernel from scratch in QEMU)&lt;/p&gt;
&lt;h2&gt;From Kernel to Login Screen&lt;/h2&gt;
&lt;p&gt;Once the Kernel has finally loaded all the modules from the RAMFS and entrenched 
itself in memory, it calls &lt;code&gt;/init&lt;/code&gt; in the RAMFS to finally load the disk and 
all other modules from disk.&lt;/p&gt;
&lt;p&gt;It's all downhill from here: once all modules have been loaded, &lt;code&gt;systemd&lt;/code&gt; (or 
&lt;a href="https://nosystemd.org/"&gt;Your favourite Init Daemon&lt;/a&gt;) is called, which starts 
as PID 1 and spawns all relevant processes on the system. &lt;code&gt;systemd&lt;/code&gt; will then 
start LightDM (On Manjaro, you might have a different Desktop Manager), which 
displays your login prompt, and you can now finally login!&lt;/p&gt;
&lt;p&gt;&lt;img alt="image of a login screen" src="res/manjaro_cinnamon.png"&gt;&lt;/p&gt;
&lt;p&gt;Unless, of course, you've locked yourself out with too many failed password 
attempts&lt;/p&gt;
&lt;h2&gt;Is this process standard across systems?&lt;/h2&gt;
&lt;p&gt;Nope. Atleast, not when you change architectures. Or go to UEFI. Ah, let's just 
say this is very specific.&lt;/p&gt;
&lt;p&gt;I bumped into this whole process as I wanted to do some kernel hacking on my 
faithful &lt;a href="https://aniruddhadeb.com/articles/2022/arch-linux-1.html"&gt;Raspberry Pi&lt;/a&gt;.
I regret to inform all Pi hackers that the bootloader process for the Pi is 
&lt;a href="https://raspberrypi.stackexchange.com/questions/10442/what-is-the-boot-sequence/10595#10595"&gt;completely different&lt;/a&gt;,
and much easier, and all you have to do is place your kernel image with the 
appropriate name in the '/boot' directory and the Pi will boot from it.&lt;/p&gt;
&lt;p&gt;TL;DR the Pi has a two (three?) stage bootloader, which curiously completely 
runs on the GPU. The only time the CPU is actually used is when the kernel image 
is loaded into memory, and the actual init process starts. The bootloaders are 
&lt;code&gt;.elf&lt;/code&gt; files, and are apparently proprietrary. I'll give decompiling them a 
shot if I have free time, but I think someone would already have tried that out.&lt;/p&gt;
&lt;p&gt;On a side note, embedded systems with limited memory and a fairly fixed device 
layout generally boot without a RAMFS, as there's simply no need to hotload a 
bunch of modules into the linux kernel, when you know exactly what modules you'll 
need and what the hardware arrangement (where you're going to boot from) is.&lt;/p&gt;
&lt;p&gt;Happy Hacking!&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>Filtrations</title><link href="https://aniruddhadeb.com/articles/2022/filtrations.html" rel="alternate"></link><published>2022-11-28T03:00:00+05:30</published><updated>2022-11-28T03:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-11-28:/articles/2022/filtrations.html</id><summary type="html">&lt;p&gt;$\newcommand{\triple}{(\Omega, \mathcal{F}, \mathbf{P})}$$\newcommand{\P}{\mathbf{P}}$&lt;/p&gt;
&lt;h2&gt;Recap&lt;/h2&gt;
&lt;p&gt;If you remember the &lt;a href="https://aniruddhadeb.com/articles/2021/note-on-random-variables.md"&gt;note on random variables&lt;/a&gt;, then this picks up exactly where that left off.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Definition 1.1&lt;/strong&gt;: A Measurable space $(X,\Sigma)$ consists of a set $X$ and a $\sigma$-algebra $\Sigma$ defined on $X …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;$\newcommand{\triple}{(\Omega, \mathcal{F}, \mathbf{P})}$$\newcommand{\P}{\mathbf{P}}$&lt;/p&gt;
&lt;h2&gt;Recap&lt;/h2&gt;
&lt;p&gt;If you remember the &lt;a href="https://aniruddhadeb.com/articles/2021/note-on-random-variables.md"&gt;note on random variables&lt;/a&gt;, then this picks up exactly where that left off.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Definition 1.1&lt;/strong&gt;: A Measurable space $(X,\Sigma)$ consists of a set $X$ and a $\sigma$-algebra $\Sigma$ defined on $X$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Recall that a $\sigma$-algebra is simply a collection of subsets over $X$ that is closed over unions, intersections and complements.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Definition 1.2&lt;/strong&gt;: If $\mathcal{A}$ and $\mathcal{B}$ are $\sigma$-algebras defined on $\Omega$ and $\mathcal{B} \subseteq \mathcal{A}$, then $\mathcal{B}$ is a &lt;em&gt;sub $\sigma$-algebra&lt;/em&gt; of $\mathcal{A}$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;An example: Say we have a probability triple $\triple$ defined over the experiment of tossing two &lt;em&gt;independent, unbiased&lt;/em&gt; coins. Then, 
$$\begin{align}
\Omega &amp;amp;= \{HH, HT, TH, TT\} \\
\mathcal{F} &amp;amp;= 2^{\Omega} \\
\mathbf{P}(S) &amp;amp;= |S|/4
\end{align}$$&lt;/p&gt;
&lt;p&gt;The role of a $\sigma$-algebra in a probability triple is to define over what events probability is defined. If we toss two coins sequentially, our probability space would be $\Omega = \{HH, HT, TH, TT\}$, but after tossing the first coin, we wouldn't be able to obtain the probability for events such as &lt;em&gt;Both coins show the same face&lt;/em&gt; (as we simply don't know the probability that the second coin turns up heads, or, in a more complicated setup, if the second coin's toss is correlated with the first coin's toss). An even simpler example is the state before we toss both coins: the coins are guaranteed to turn up some configuration in $\Omega$ with probability 1, but we can't pinpoint which configuration without knowing the probabilities associated with the coins. &lt;/p&gt;
&lt;p&gt;$\sigma$-algebras, then, give us the 'coarseness' of the type of events that we're allowed to play with. The trivial $\sigma$-algebra $\{\emptyset, 2^{\Omega}\}$ will give us either the event happening or not happening, and the complete $\sigma$-algebra $2^{\Omega}$ will give us the probability of every possible type of event (provided we have a suitable measure over this space).&lt;/p&gt;
&lt;h2&gt;Filtrations&lt;/h2&gt;
&lt;p&gt;We'll now explore the concept of a &lt;em&gt;filtration&lt;/em&gt;: A filtration is formally defined as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Definition 1.3&lt;/strong&gt;: A filtration is a sequence of $\sigma$-algebras $\mathcal{F}_i$ such that $\mathcal{F}_0 \subseteq \mathcal{F}_1 \subseteq \ldots \subseteq \mathcal{F}_n \subseteq \ldots$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Filtrations can be finite as well as infinite. A filtration basically captures the 'coarseness' of a set of events. Consider the same example as before. We'll obtain three $\sigma$-algebras corresponding to the three states of the experiment&lt;sup&gt;&lt;a href="#footnote-1"&gt;1&lt;/a&gt;&lt;/sup&gt;: no coins are tossed, one coin has been tossed and both coins have been tossed. The set of outcomes of a single coin is defined as $\Omega_1 = \{ H, T\}$ and that for two coins is defined as $\Omega_2 = \{HH, HT, TH, TT\}$. Then&lt;/p&gt;
&lt;p&gt;\begin{align}
\mathcal{F}_{0}  &amp;amp; =\{ \emptyset,\Omega_{2}\} \\
\mathcal{F}_{1}  &amp;amp;=\{ \emptyset,\{ HH,HT\} ,\{ TH,TT\} ,\{ HH,HT,TH,TT\} \} \\
\mathcal{F}_{2} &amp;amp; = \left\{ \begin{array}{c}
\emptyset,\\
\{ HH\} ,\{ HT\} ,\{ TH\} ,\{ TT\} \\
\{ HH,HT\} ,\{ HH,TH\} ,\{ HH,TT\} ,\{ HT,TH\} ,\{ HT,TT\} ,\{ TH,TT\} \\
\{ HH,HT,TH\} ,\{ HH,HT,TT\} ,\{ HH,TH,TT\} ,\{ HT,TH, TT\} \\
\{ HH,HT,TH,TT\}
\end{array}\right\} 
\end{align}&lt;/p&gt;
&lt;p&gt;Are the filtrations after these steps. Why only these? Looking at $\mathcal{F}_1$, we can obtain probabilities for the following events:&lt;/p&gt;
&lt;p&gt;$$\mathcal{F}_1 = \{ \emptyset, \underset{\text{first coin is H}}{\{ HH, HT \}}, \underset{\text{first coin is T}}{\{TH, TT\}}, \underset{\text{first coin is H or T}}{\{HH, HT, TH, TT\}}\}$$&lt;/p&gt;
&lt;p&gt;We can also write $\mathcal{F}_1$ as the cross product of the $\sigma$-algebra of $\Omega_1$ with $\Omega_1$:&lt;/p&gt;
&lt;p&gt;$$\mathcal{F}_1 = \underset{\text{All possibilities for the first coin}}{2^{\Omega_1}} \times \underset{\text{Possibilities for the next coin}}{\Omega_1}$$&lt;/p&gt;
&lt;p&gt;This final argument lends itself to the generalization we seek: If we now have, say an infinite number of coins that we toss, then we can generate the sub $\sigma$-algebras &lt;/p&gt;
&lt;p&gt;$$\mathcal{F}_i = 2^{\Omega_i} \times \Omega_\infty$$&lt;/p&gt;
&lt;p&gt;This is a filtration, as we have $\mathcal{F}_0 \subseteq \mathcal{F}_1 \subseteq \ldots \subseteq \mathcal{F}_n \subseteq \ldots$&lt;/p&gt;
&lt;h2&gt;What next?&lt;/h2&gt;
&lt;p&gt;This only scratches the tip of the surface on what filtrations are and what they can do. Filtrations lend themselves well to stochastic processes (basically sequences of random variables defined on the same probability space). They are so common that we have the following definition:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Definition 1.4&lt;/strong&gt;: A &lt;em&gt;natural filtration&lt;/em&gt; of a stochastic process $X = (X_i)_{i=1}^n$ is defined as $\mathcal{F}_i = \sigma(X_k | k \le i)$ (The $\sigma$-algebra generated by the random variables upto $i$).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As an exercise, try to verify that this is indeed a filtration.&lt;/p&gt;
&lt;p&gt;Most of this work was taken from &lt;a href="https://en.wikipedia.org/wiki/Filtration_(probability_theory)"&gt;Wikipedia&lt;/a&gt; and this very helpful &lt;a href="https://math.stackexchange.com/questions/3029823/intuition-of-sub-sigma-algebra-definition"&gt;StackExchange thread&lt;/a&gt;. I would've preferred a more verbose explanation in both these areas, which is why I wrote this up in case someone needs it :)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;sup id="footnote-1"&gt;1&lt;/sup&gt; Why are there not three probability triples corresponding to the three states? A philosophical explanation is that they're the same experiment, but a mathematical one is that even if we do have three triples, the sample space $\Omega$ would be the same across all three, and all three probability measures $\P$ would have to agree with each other. That is, for $S \in \mathcal{F}_1$, we cannot have $\P_1(S) \neq \P_2(S)$: the experiment remains the same (we're tossing the same coins, so this is not possible). Also, note that $\mathcal{F}_1 \subseteq \mathcal{F}_2$, so if $S \in \mathcal{F}_1$, then we'll also have $S \in \mathcal{F}_2$. Hence, it suffices to have just three $\sigma$-algebras&lt;/p&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category></entry><entry><title>The Man Who Sold The World</title><link href="https://aniruddhadeb.com/articles/2022/man-who-sold-the-world.html" rel="alternate"></link><published>2022-11-25T21:05:00+05:30</published><updated>2022-11-25T21:05:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-11-25:/articles/2022/man-who-sold-the-world.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;We passed upon the stair&lt;br&gt;
We spoke of was and when&lt;br&gt;
Although I wasn't there&lt;br&gt;
He said I was his friend&lt;br&gt;
Which came as a surprise&lt;br&gt;
I spoke into his eyes&lt;br&gt;
"I thought you died alone,&lt;br&gt;
A long long time ago"&lt;br&gt;&lt;/p&gt;
&lt;p&gt;"Oh no, not me&lt;br&gt;
I never lost control&lt;br&gt;
You're …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;We passed upon the stair&lt;br&gt;
We spoke of was and when&lt;br&gt;
Although I wasn't there&lt;br&gt;
He said I was his friend&lt;br&gt;
Which came as a surprise&lt;br&gt;
I spoke into his eyes&lt;br&gt;
"I thought you died alone,&lt;br&gt;
A long long time ago"&lt;br&gt;&lt;/p&gt;
&lt;p&gt;"Oh no, not me&lt;br&gt;
I never lost control&lt;br&gt;
You're face to face&lt;br&gt;
With the man who sold the world"&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I laughed and shook his hand&lt;br&gt;
And made my way back home&lt;br&gt;
I searched for form and land&lt;br&gt;
For years and years I roamed&lt;br&gt;
I gazed a gazeless stare&lt;br&gt;
At all the millions here&lt;br&gt;
I must have died alone&lt;br&gt;
A long, long time ago&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Who knows? Not me&lt;br&gt;
We never lost control&lt;br&gt;
You're face to face&lt;br&gt;
With the man who sold the world&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;I wanted to write a story based on this, but the lyrics are so poetic. I don't 
want to detract from the mystery and intrigue of them one bit by fleshing my 
story out. Simply beautiful.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/SmTy_bweehQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;And the Nirvana MTV unplugged cover of this song&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/fregObNcHC8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="General"></category><category term="General"></category></entry><entry><title>Cold Showers, Adulting and More</title><link href="https://aniruddhadeb.com/articles/2022/cold-showers.html" rel="alternate"></link><published>2022-11-22T09:45:00+05:30</published><updated>2022-11-22T09:45:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-11-22:/articles/2022/cold-showers.html</id><summary type="html">&lt;p&gt;Day 249 of taking a cold shower. It's something I've been doing since April, 
and although the temperature has fallen and the geyser in my bathroom has been
fixed come winter, it's a habit I want to keep. Nothing makes you feel as alive
as a cold shower does.&lt;/p&gt;
&lt;p&gt;Speaking …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Day 249 of taking a cold shower. It's something I've been doing since April, 
and although the temperature has fallen and the geyser in my bathroom has been
fixed come winter, it's a habit I want to keep. Nothing makes you feel as alive
as a cold shower does.&lt;/p&gt;
&lt;p&gt;Speaking of durations, it's also been exactly a month since my last post. A lot 
has happened since, and I've been too wrapped up in the happenings to get time 
to post here once a week. This sem has been no different than others, with you 
progressively realizing the depth to which you've sunk in the quicksand only as
more classes happen and the majors draw near.&lt;/p&gt;
&lt;p&gt;But I think I've gotten the hang of this. Not just the semester, but life in 
general, and rather than looking at what I can do here, I'm looking outward to 
upcoming goals in life. Ah, too much abstraction. TL;DR: With the endsems 
ending tomorrow, I expect to write more frequently here ;)&lt;/p&gt;</content><category term="General"></category><category term="General"></category></entry><entry><title>Vim Sutras</title><link href="https://aniruddhadeb.com/articles/2022/vim-sutras.html" rel="alternate"></link><published>2022-10-22T09:45:00+05:30</published><updated>2022-10-22T09:45:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-10-22:/articles/2022/vim-sutras.html</id><summary type="html">&lt;p&gt;&lt;img alt="vim setup screenshot" src="/articles/2022/res/vim-1.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;When in Neovim, Do as the Luans do&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unless you're just starting out with Neovim or are extremely used to vim, it's a good idea to set up Neovim using neovim-exclusive plugins. Most of them are written in lua, and integrate more nicely with the Neovim environment (async, faster startup …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="vim setup screenshot" src="/articles/2022/res/vim-1.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;When in Neovim, Do as the Luans do&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unless you're just starting out with Neovim or are extremely used to vim, it's a good idea to set up Neovim using neovim-exclusive plugins. Most of them are written in lua, and integrate more nicely with the Neovim environment (async, faster startup, support for LSP and treesitter, etc). &lt;/p&gt;
&lt;p&gt;My initial neovim setup was just a clone of my vim setup, but when I noticed NERDTree wasn't loading large directories quickly, I searched for a lighter, async file tree plugin for Neovim and came across NvimTree, and not long after, all my vim plugins were replaced with their neovim equivalents.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Shun character by character movements&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do not use h,j,k,l as a drop in replacement for your arrow keys: it is the vim equivalent of using a fine-tipped brush to paint your entire watercolour. Use a broad brush for the base strokes (&lt;code&gt;?&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;gg&lt;/code&gt;/&lt;code&gt;G&lt;/code&gt;), a finer brush for outlines (&lt;code&gt;f&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;) and the finest brushes for detailing (&lt;code&gt;w&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Also, for tag-jumping, use &lt;code&gt;&amp;lt;C-[&amp;gt;&lt;/code&gt; with ctags and &lt;code&gt;gf&lt;/code&gt; for going to a file under the cursor. For more motions, see &lt;a href="https://www.barbarianmeetscoding.com/boost-your-coding-fu-with-vscode-and-vim/moving-blazingly-fast-with-the-core-vim-motions/"&gt;this&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Repeat, don't retype&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Make liberal use of &lt;code&gt;;&lt;/code&gt; (repeat motion) and &lt;code&gt;.&lt;/code&gt; (repeat edit). They are powerful tools.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Master the nature of Vi: all else is ephemeral&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Don't rely too much on plugins or keybinds: they might give a huge speedup in very specific cases, but as &lt;a href="https://blog.samwhited.com/2015/04/the-dharma-of-vi/"&gt;The dharma of vi&lt;/a&gt; states, "With patience the man who knows how to use a snare may catch himself a hare, or a hog, or a grouse for dinner, even though the snare was not made for all these things. The man who shapes the snare to better catch only the rabbits foot will starve if no rabbit wanders by."&lt;/p&gt;
&lt;p&gt;Also from &lt;a href="https://blog.sanctum.geek.nz/vim-koans/"&gt;Vim koans&lt;/a&gt;, "you will master vimscript when you never use it".&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Vi and the shell are one&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;!&lt;/code&gt; command allows you to run any shell command via Vi. &lt;/p&gt;
&lt;p&gt;Suppose you have a list of files in a directory &lt;code&gt;d&lt;/code&gt; and you want to load in the names of only the ones starting with &lt;code&gt;en&lt;/code&gt; into your file. Simply do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:r !ls d/en* -1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://blog.sanctum.geek.nz/vim-koans/"&gt;Vim koans&lt;/a&gt; also have a nice example of this, where they convert Markdown to HTML&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Shepherd your lines with ex&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ex mode is useful when line-based tasks have to be done in a non-visual manner. If I want to duplicate a method that is 5 lines above me and 3 lines long to my current position, I'd do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;:-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="s s-Atom"&gt;co&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Same with motions: If I want to move that method here, I'd do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;:-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="s s-Atom"&gt;mo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is also where relative line numbers shine: if you're in a file with a lot of lines, you'd need to type the entire line number (which may be 3/4 digits) twice. Instead, relative line numbers are easier to type.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Mysterious are the ways of g&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Reference: &lt;a href="https://vim.fandom.com/wiki/Power_of_g"&gt;The power of &lt;code&gt;g&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;When in doubt, refer to the user manual&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:h user-manual
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And use &lt;code&gt;gf&lt;/code&gt; to navigate the various subfiles in it. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Haven't posted in a while: I realized I could post about the million other things I've done recently, but I don't want to make this blog an instagram status feed.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Vim"></category></entry><entry><title>Installing ns3: What worked</title><link href="https://aniruddhadeb.com/articles/2022/ns3-installation.html" rel="alternate"></link><published>2022-10-06T18:00:00+05:30</published><updated>2022-10-06T18:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-10-06:/articles/2022/ns3-installation.html</id><summary type="html">&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;XCode CLT (which you should have)&lt;/li&gt;
&lt;li&gt;QT 5. Install via &lt;code&gt;brew install qt5&lt;/code&gt;. NOTE: if you already have an updated version of Qt, you'll need to pass a different &lt;code&gt;qmake&lt;/code&gt;, and brew won't link this to your system. Brew will inform you of this, and you'll manually need to …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;XCode CLT (which you should have)&lt;/li&gt;
&lt;li&gt;QT 5. Install via &lt;code&gt;brew install qt5&lt;/code&gt;. NOTE: if you already have an updated version of Qt, you'll need to pass a different &lt;code&gt;qmake&lt;/code&gt;, and brew won't link this to your system. Brew will inform you of this, and you'll manually need to pass the path to &lt;code&gt;qmake&lt;/code&gt; while building. More on this later.&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;? PyBindGen - I installed this via &lt;code&gt;pip install pybindgen&lt;/code&gt;, but &lt;code&gt;waf&lt;/code&gt; didn't pick it up. If anyone else succeeds, let me know in the comments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Download the source code, unzip with &lt;code&gt;tar -xvf&lt;/code&gt; and &lt;code&gt;cd&lt;/code&gt; into the directory&lt;/li&gt;
&lt;li&gt;Use the following command to build: &lt;code&gt;./build.py [--qmake-path=/usr/local/opt/qt@5/bin/qmake] --enable-examples --enable-tests -- --build-profile=optimized --disable-werror&lt;/code&gt; (Without the stuff in the square brackets, if you don't have a newer version of Qt preinstalled, and with the stuff but excluding the square brackets if you do have a newer version).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aaaand you're good! To test, change into the &lt;code&gt;ns-3.29&lt;/code&gt; directory and do &lt;code&gt;./waf --run hello-simulator&lt;/code&gt;. You should see &lt;code&gt;Hello Simulator&lt;/code&gt; printed. To test NetAnim, go to the &lt;code&gt;netanim-3.108&lt;/code&gt; folder and do &lt;code&gt;./NetAnim&lt;/code&gt;, and you should see the NetAnim GUI pop up. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: The python bindings are generated when you run &lt;code&gt;waf&lt;/code&gt; using python2 (no idea why not with python3). To generate them, go to &lt;code&gt;ns-3.29&lt;/code&gt; and run &lt;code&gt;python2 waf configure --build-profile=optimized --enable-examples --enable-tests --disable-werror&lt;/code&gt; and then &lt;code&gt;./waf build&lt;/code&gt;.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Networks"></category></entry><entry><title>Manjaro Rice</title><link href="https://aniruddhadeb.com/articles/2022/manjaro-rice.html" rel="alternate"></link><published>2022-10-04T19:00:00+05:30</published><updated>2022-10-04T19:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-10-04:/articles/2022/manjaro-rice.html</id><content type="html">&lt;p&gt;&lt;img alt="rice 1" src="/articles/2022/res/manjaro_rice_1.png"&gt;
&lt;img alt="rice 2" src="/articles/2022/res/manjaro_rice_2.png"&gt;&lt;/p&gt;
&lt;p&gt;ft. nvim, neofetch and htop. WM: i3-gaps, with compton for compositing. &lt;/p&gt;
&lt;p&gt;Wallpaper: &lt;a href="https://i.imgur.com/cCIfZTm.jpeg"&gt;Pick and Place&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;nvim theme: &lt;a href="https://github.com/tiagovla/tokyodark.nvim"&gt;tokyodark.nvim&lt;/a&gt;, supporting transparency.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Linux"></category></entry><entry><title>Neovim Ricing</title><link href="https://aniruddhadeb.com/articles/2022/nvim-ricing.html" rel="alternate"></link><published>2022-09-25T17:00:00+05:30</published><updated>2022-09-25T17:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-09-25:/articles/2022/nvim-ricing.html</id><summary type="html">&lt;p&gt;While pruning a bug in my server, I had to debug my code on Manjaro, which was getting tedious. I'd installed Neovim, so the rational step would be to install Sublime and forget about neovim.&lt;/p&gt;
&lt;p&gt;Right?&lt;/p&gt;
&lt;p&gt;Nope. Let's install Neovim on Mac instead and try moving to it!&lt;/p&gt;
&lt;p&gt;&lt;img alt="neovim" src="/articles/2022/res/neovim.png"&gt;&lt;/p&gt;
&lt;h2&gt;Sprucing up …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;While pruning a bug in my server, I had to debug my code on Manjaro, which was getting tedious. I'd installed Neovim, so the rational step would be to install Sublime and forget about neovim.&lt;/p&gt;
&lt;p&gt;Right?&lt;/p&gt;
&lt;p&gt;Nope. Let's install Neovim on Mac instead and try moving to it!&lt;/p&gt;
&lt;p&gt;&lt;img alt="neovim" src="/articles/2022/res/neovim.png"&gt;&lt;/p&gt;
&lt;h2&gt;Sprucing up Neovim&lt;/h2&gt;
&lt;p&gt;Neovim is actually a nice editor, once you install a bunch of plugins via arcane terminal magic (what else gives people feelings of power, amirite?). The only difference I see between Neovim and good ol' vim is that Neovim supports all the old vim plugins, but also supports Lua plugins as well (and is asynchronous, but I don't notice that in practice).&lt;/p&gt;
&lt;p&gt;It also has Language Server Protocol support and tree-sitter and a bunch of other useful stuff which I'll get around to eventually using, but are just magic for now.&lt;/p&gt;
&lt;h2&gt;Plugins used&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;preservim/nerdtree&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim-airline/vim-airline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tanvirtin/monokai.nvim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;airblade/vim-gitgutter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ryanoasis/vim-devicons&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Xuyuanp/nerdtree-git-plugin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And &lt;code&gt;vim-plug&lt;/code&gt; for installing all of them. Note that &lt;code&gt;vim-devicons&lt;/code&gt; needs the nerdicons patched font. I use Meslo LG S, because it's basically Open-Source Menlo, and I'm too used to Menlo by this point to quit. Interestingly, my kitty config doesn't use this parameter anywhere, but still manages to pick up the glyphs from the right font... Omoshiroi.&lt;/p&gt;
&lt;h2&gt;Roadmap&lt;/h2&gt;
&lt;p&gt;I still need to work on LSP integration (installed &lt;code&gt;ccls&lt;/code&gt; today), but will do that at a later time. There are still a lot of things to move over (If I do choose to move over), some of them are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LSP's for C,C++,Python,Rust&lt;/li&gt;
&lt;li&gt;Learn the buffer vs tabs philosophy (I used tabs extensively previously in vim)&lt;/li&gt;
&lt;li&gt;Multi cursor vs macros... Get used to macros&lt;/li&gt;
&lt;li&gt;Port my Competitive Programming setup over&lt;/li&gt;
&lt;li&gt;VimLaTeX installation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that's it, I guess. Terminals are probably why I'd switch over (Sublime terminals just seem half-baked, and it's much nicer using nvim+kitty than ctrl-tabbing with sublime), and nicer keyboard integration in nvim. Most of my original reasons for &lt;a href="https://aniruddhadeb.com/articles/2021/sublime-text-setup"&gt;switching to sublime&lt;/a&gt; are now mitigated, and I do have the skill to improve my vim-jutsu.&lt;/p&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;Short and sweet blog post, because it's Minors week!&lt;/p&gt;
&lt;p&gt;Also, I might start posting these on Hacker News and Reddit&lt;/p&gt;
&lt;p&gt;Aaaand debating whether to create a twitter as well for that added publicity. Devs with it seem to do a lot better than those without it. Even John Carmack has a twitter :^&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Systems"></category></entry><entry><title>The JEE never fails to amaze</title><link href="https://aniruddhadeb.com/articles/2022/jee-2022-problem.html" rel="alternate"></link><published>2022-09-19T17:30:00+05:30</published><updated>2022-09-19T17:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-09-19:/articles/2022/jee-2022-problem.html</id><summary type="html">&lt;p&gt;I promised I wouldn't look at the JEE 2022 paper, but couldn't help sneaking a peek. As always, the professors currently making life difficult occasionally get a chance to make the life of all of India's students difficult, and they never cease to amaze.&lt;/p&gt;
&lt;p&gt;Welp, this will be a short …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I promised I wouldn't look at the JEE 2022 paper, but couldn't help sneaking a peek. As always, the professors currently making life difficult occasionally get a chance to make the life of all of India's students difficult, and they never cease to amaze.&lt;/p&gt;
&lt;p&gt;Welp, this will be a short one. Let's cut to the chase!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The greatest integer less than or equal to 
$$\int_1^2 \log_2(x^3 + 1) dx + \int_1^{\log_2 9} (2^x - 1)^{1/3} dx$$
is &lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looks fearsome, but peek between the lines and a pattern seems to emerge if you look at the limits of integration and the functions themselves.&lt;/p&gt;
&lt;p&gt;$$\begin{align}
y &amp;amp;= \log_2 (x^3 + 1) \\
2^y &amp;amp;= x^3 + 1 \\
(2^y - 1)^{1/3} &amp;amp;= x 
\end{align}$$&lt;/p&gt;
&lt;p&gt;Okay, so both the functions are bijections in the domains of integration, and are inverses of each other. The limits of integration are also inverses! This suggests we should have a closer look at expressions of the form&lt;/p&gt;
&lt;p&gt;$$\int_a^b f(x) dx + \int_{f^{-1}(a)}^{f^{-1}(b)} f^{-1}(x) dx$$&lt;/p&gt;
&lt;p&gt;See a pattern? Try graphing out what these functions will look like. &lt;/p&gt;
&lt;p&gt;&lt;link rel="stylesheet" type="text/css" href="res/spoiler.css"&gt;&lt;/p&gt;
&lt;blockquote class='spoiler'&gt;
&lt;div class='spoiler-prompt'&gt; Mouseover/tap for the answer&lt;/div&gt;
&lt;div class='spoiler-text'&gt; Since they're perfect inverses, and the inverse domains also match, these functions will form a rectangle on the cartesian plane, and the integration will be a 'cutout' of this rectangle. 

&lt;img src="res/integration.jpeg"&gt;

Therefore, the answer is $4\log_2(3) - 1 \approx 5.3 &gt; 5$.
&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;Hint: Integrate without integrating :)&lt;/p&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category><category term="JEE"></category></entry><entry><title>Seven Days of Creation</title><link href="https://aniruddhadeb.com/articles/2022/seven-days-of-creation.html" rel="alternate"></link><published>2022-09-18T12:00:00+05:30</published><updated>2022-09-18T12:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-09-18:/articles/2022/seven-days-of-creation.html</id><summary type="html">&lt;p&gt;When you learn more in the last week than in any other week in your life. A summary of how I built a high-performance peer-server-peer file sharing network in the span of a week.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Our networks course required us to construct a peer-server-peer file transfer protocol, wherein once chunks of the file are evenly distributed to different clients, the clients contact the server for chunks they don't have, and the server in turn queries all other clients if they have the chunk. If they do, they send it back to the server, which in turn relays it back to the client. This continues until all connected parties have the complete file.&lt;/p&gt;
&lt;p&gt;A thread-based implementation in Python was suggested, but given the requirements, I decided to go one level deeper: make a C++-based implementation with non-blocking sockets and asynchronous IO.&lt;/p&gt;
&lt;h2&gt;Day One&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In the beginning, God created sockets. Now the sockets were isolated, unable to connect to anything on the system. And God said, &lt;strong&gt;"Let there be syscalls"&lt;/strong&gt;, and there were syscalls.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Having decided to go as close to the metal as I could for performance reasons (the assignment requirements stated that we'd have to transfer a 100 MB file to 100 clients simultaneously, in a reasonable amount of time), I decided to cut no corners. Fortunately, socket programming is very well documented, and is actually one of the more reasonable subsystems of the Linux/BSD kernel (POSIX sockets API FTW!). &lt;/p&gt;
&lt;p&gt;There are a lot of guides online for this, but the best one is &lt;a href="https://beej.us/guide/bgnet/pdf/bgnet_a4_c_1.pdf"&gt;Beej's network programming guide&lt;/a&gt;, now updated for IPv6 ^_^. This goes through the basics of a lot of what is needed, namely the socket syscalls (&lt;code&gt;socket&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt;, &lt;code&gt;connect&lt;/code&gt;, &lt;code&gt;accept&lt;/code&gt;, &lt;code&gt;send&lt;/code&gt;, &lt;code&gt;recv&lt;/code&gt;, &lt;code&gt;sendto&lt;/code&gt;, &lt;code&gt;recvfrom&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt;) and a lot of other things, such as getting address information, setting socket options with &lt;code&gt;setsockopt&lt;/code&gt; (and the various options available), making sockets nonblocking, as well as a small tutorial on &lt;code&gt;select&lt;/code&gt; for asynchronous IO&lt;sup&gt;&lt;a href="#footnote-1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;I won't be repeating whatever was mentioned there, but a few things that tripped me up were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SO_REUSEADDR&lt;/code&gt;. Yep. The first time &lt;a href="https://stackoverflow.com/questions/14388706/how-do-so-reuseaddr-and-so-reuseport-differ"&gt;I read about this flag&lt;/a&gt;, I understood nothing. It was only after I could not reconnect to my server immediately after shutting it down did I realize that something's up. TCP's TIME_WAIT state persists &lt;em&gt;after&lt;/em&gt; the application has shut down, which is why if you close and restart a socket at the same port, it won't immediately rebind, as there may still be a FIN/ACK message out on the network, bound for this port. If that hits the second application, it would cause that application's port to shut down, which is why TIME_WAIT waits for 2 maximum segment lifetimes (approx. 30 to 120 seconds). Here's a TCP state diagram to help out, if the above didn't make sense&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img src="res/tcp-state-diagram-v2.svg" width="400px"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SO_RCVLOWAT&lt;/code&gt;. TCP is a stream protocol, and not a datagram protocol, and I think nobody makes it obvious what the differences are between them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reading from a SOCK_STREAM port (TCP) is like sucking bits from a straw on the network. &lt;code&gt;recv(fd, buf, len, flags)&lt;/code&gt; will read&lt;sup&gt;&lt;a href="#footnote-2"&gt;2&lt;/a&gt;&lt;/sup&gt; atmost &lt;code&gt;len&lt;/code&gt; bytes from &lt;code&gt;fd&lt;/code&gt;'s read buffer to &lt;code&gt;buf&lt;/code&gt;. It doesn't care whether the bytes were part of a previous message, or if it's two messages, it will just read that many bytes in. If the entire message hasn't reached, it will read less than &lt;code&gt;len&lt;/code&gt; bytes, and return the number of bytes read (basically reading partial messages).&lt;/li&gt;
&lt;li&gt;Reading from a SOCK_DGRAM port (UDP) is like eating potato chips from a pringles tube, one at a time. &lt;code&gt;recv(fd, buf, len, flags)&lt;/code&gt; on a UDP port will read &lt;em&gt;min(len,size of one datagram)&lt;/em&gt; into buf. This means that you only get single datagrams. The port will read an incomplete datagram &lt;strong&gt;only if len is less than the size of one datagram&lt;/strong&gt;, otherwise you're guaranteed to read the complete datagram in, notwithstanding system/network errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, how do we emulate UDP's 'chunking' in TCP? The &lt;code&gt;SO_RCVLOWAT&lt;/code&gt; parameter sets a low water mark for the socket read buffer: we are only alerted of a read if the number of bytes in the read buffer are more than those set by this flag (a blocking read will wait until the number of bytes is more than this, or the socket has closed). By setting the low water mark and our buffer length to the size of one 'packet' of information that we are expected to receive, we can read only one packet at a time, cleanly separated from the rest of the byte stream. Neat!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Respect the error message!&lt;/strong&gt; I cannot stress on this enough. Always, &lt;strong&gt;ALWAYS&lt;/strong&gt; check what these syscalls are returning. You'll save yourself a lot of pain. An example: this is terrible code&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// some code here&lt;/span&gt;
&lt;span class="n"&gt;getaddrinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;c_str&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;uintptr_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_family&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_socktype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_protocol&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reuse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;reuse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reuse&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_addrlen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;F_SETFL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;O_NONBLOCK&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;freeaddrinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// more code here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Do you see the error? Exactly. You'll never see the error, until it blows up in your face 500 lines later. Your server needs to fail fast while debugging. There's no shame in throwing assert statements around like confetti.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;errstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; (errno &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getaddrinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;c_str&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;hints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;errstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not get address information&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kt"&gt;uintptr_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_family&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_socktype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_protocol&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;errstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not create socket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reuse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;reuse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reuse&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;errstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not set SO_REUSEADDR option&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ai_addrlen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;errstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Could not bind socket to port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Day Two&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;And God said, &lt;strong&gt;"Let there be an event loop so that sockets can know when they have to read and write"&lt;/strong&gt;, So God made an event loop and registered his sockets to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Possibly the most fun part of this entire exercise. Event loops allow you to write superfast single-threaded concurrent servers, simply because the OS doesn't need to schedule a bunch of threads waiting for their clients to reply to them. In macOS (and other BSD distros), the kernel uses &lt;code&gt;kevent&lt;/code&gt; for the event queue, but if you're looking to port to linux, &lt;a href="https://github.com/mheily/libkqueue"&gt;&lt;code&gt;libkqueue&lt;/code&gt;&lt;/a&gt; works like a charm (just make sure to build and install the latest version: the ones on the default package repositories are outdated and have bugs).&lt;/p&gt;
&lt;p&gt;Event loops and the reactor pattern are not-so-easy to understand, so &lt;a href="https://dzone.com/articles/understanding-reactor-pattern-thread-based-and-eve"&gt;here&lt;/a&gt; and &lt;a href="http://www.dre.vanderbilt.edu/~schmidt/PDF/reactor-siemens.pdf"&gt;here&lt;/a&gt; were some good resources I referred to. A broad overview (when applied to sockets) is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each socket has a file descriptor, along with a read/write buffer (in the kernel).&lt;/li&gt;
&lt;li&gt;An event queue allows us to register this file descriptor with the queue, such that we are alerted when we can read/write from this file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What does an event queue look like? Here's a (rough) abstraction from my code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;event_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;EventQueue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;EventQueue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;add_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;event_t&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;delete_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;event_t&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;event_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_events&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;simple enough. Where does the event loop come in? The loop is responsible for polling the event queue and processing the events that occur&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;EventQueue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;evtq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// add events here&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;evts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;evtq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_events&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;evts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// process e;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Generally, a callback-like structure is employed within the event loop&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unordered_map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;read_callbacks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//...&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;register_read_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;read_callbacks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// inside the event loop&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;evts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EV_READ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;read_callbacks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;]();&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Short and sweet, add more callbacks as needed.&lt;/p&gt;
&lt;p&gt;There's a very nice &lt;a href="https://wiki.netbsd.org/tutorials/kqueue_tutorial/"&gt;kqueue tutorial&lt;/a&gt; here, which goes into more specifics; stuff such as timers and one-shot events, but read/write events on sockets should be enough to scale.&lt;/p&gt;
&lt;h2&gt;Day Three&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;And God said, &lt;strong&gt;"Let there be a client to keep the server company"&lt;/strong&gt;, and it was so. God made a client using the same principles as the server, and God saw that it was good.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The client was basically a mini-server, with a TCP and UDP port, that used the same event-loop based architecture to simultaneously transmit messages and receive file chunks. Once the protocol is implemented and the server is created, implementing a client is a relatively simple exercise, and was easy to do.&lt;/p&gt;
&lt;p&gt;One additional feature of kevent that I used were timers: if a request packet (over UDP) drops, then we won't receive a chunk in response to it. The way I solved this is to have a timer event every second, and a map that stores which chunk ID's are currently requested, and when those requests were sent out. Every second, when the timer event triggers, we check if there are any requests sent to which we haven't received a response in 5 seconds, and we resend these requests. Adding timer events to kqueue is relatively straightforward, just that the documentation doesn't make it clear whether we have to pass the time (in milliseconds) or a pointer to the time. The former works, but not the latter (even though &lt;code&gt;struct kevent&lt;/code&gt; has the type of data as &lt;code&gt;intptr_t&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;kevent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;period_in_ms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;EV_SET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EVFILT_TIMER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EV_ADD&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;EV_ENABLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;period_in_ms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;kevent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_kq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; was chosen as 6000 as this is large enough to not clash with anything else. I couldn't think of a better way to choose a descriptor for a timer. If you do know of one (allocating a file descriptor which won't clash with other file descriptors), do let me know in the comments :)&lt;/p&gt;
&lt;h2&gt;Day Four&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;And God said, &lt;strong&gt;"Let there be two implementations of the protocol, for testing purposes"&lt;/strong&gt;, and it was so. God set about refactoring the codebase, abstracting the interfaces and implementation out, and when he was done, he saw that it was good.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This was probably the most frustrating part: after three straight days of programming, I realized that to switch protocols, I'd have to do it all over again. This is where effective design comes into picture: rather than making a hacky proof-of-concept server, abstracting out the various things that would have separate implementations from the start would've made this exercise very easy. &lt;/p&gt;
&lt;p&gt;I set about redesigning the server. Fortunately, a full rewrite wasn't needed, and a lot of the components could just be reused directly. For changing the protocol, I defined the interfaces in a header file, and implementation-specific versions in a source file. This allows me to change the implementation at compile time rather than in source (which would need me to subclass Server and override these methods). All I need to do now to change the protocol is &lt;code&gt;make proto=TCP&lt;/code&gt; instead of normal &lt;code&gt;make&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;The makefile flags to do something like this are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;ifeq ($(PROTO), TCP)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;SRC_SERVER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;tcp&lt;span class="w"&gt; &lt;/span&gt;implementation&lt;span class="w"&gt; &lt;/span&gt;files&amp;gt;
&lt;span class="w"&gt;    &lt;/span&gt;...
&lt;span class="w"&gt;    &lt;/span&gt;SERVER&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bin/server_tcp
&lt;span class="w"&gt;    &lt;/span&gt;...
&lt;span class="cp"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;SRC_SERVER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;udp&lt;span class="w"&gt; &lt;/span&gt;implementation&lt;span class="w"&gt; &lt;/span&gt;files&amp;gt;
&lt;span class="w"&gt;    &lt;/span&gt;...
&lt;span class="w"&gt;    &lt;/span&gt;SERVER&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bin/server_udp
&lt;span class="w"&gt;    &lt;/span&gt;...
&lt;span class="cp"&gt;endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The final source design looked like this (leaving out other non-relevant items)&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="protocol" src="res/protocol.svg"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Day Five&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;And God said, &lt;strong&gt;"Let this bounty be available to the users of Linux as well"&lt;/strong&gt;, and it was so. God did not have a working Linux machine, so he created a QEMU VM to run Manjaro and to compile the code, and when he was done, he saw that it was good.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Linux machine I'd gotten from home had a broken keyboard, and my Raspberry Pi was not connecting to the cellular network (apparently my cellphone provider switched from an ipv4 to an ipv6 network, so arp-scan and everything was a mess; I couldn't locate my pi's IP, and an iPhone being an iPhone, doesn't let you see the IP of the devices connected to it's WiFi hotspot.)&lt;/p&gt;
&lt;p&gt;After messing around with an ethernet cable, a friend's laptop and computer-to-computer WiFi connections, I decided to leave the option of connecting to another machine, and instead run a VM on my machine. I already had QEMU installed, but had never figured out how to use it. The next day, I downloaded an Ubuntu 20.04 server image from online, only to find out that &lt;a href="https://stackoverflow.com/questions/29137679/login-credentials-of-ubuntu-cloud-server-image"&gt;it doesn't have a default password&lt;/a&gt;, and an ISO containing login credentials had to be booted with the image to allow you to login, &lt;em&gt;and that too only via SSH&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Noped out of that pretty quick. I then downloaded a Manjaro&lt;sup&gt;&lt;a href="#footnote-3"&gt;3&lt;/a&gt;&lt;/sup&gt; image, and installed and ran that painlessly. &lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="qemu" src="res/qemu_vm_2.png"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;QEMU is a charm: it barely uses any CPU while idling, and boots lightning fast. Forwarding an SSH port to it is also very easy. Will probably play around with more exotic machines on qemu, but that's for another post :)&lt;/p&gt;
&lt;p&gt;With access to a linux machine, there were two choices:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use a compatiability layer to get kqueue functionality: libkqueue, as previously mentioned, hadn't worked on an ubuntu machine because of an old version (a fact I didn't know till then)&lt;/li&gt;
&lt;li&gt;Write an epoll implementation of my abstracted event queue&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I really didn't want to do (2), but it looked like there was no choice. I decided to give libkqueue a final chance on linux, and since it was not available on manjaro default repositories, I downloaded and compiled from source.&lt;/p&gt;
&lt;p&gt;And it worked! I had to link the library with &lt;code&gt;-lkqueue&lt;/code&gt; and &lt;code&gt;-lpthread&lt;/code&gt;, so made some linux-specific flags for that. I can now see why &lt;code&gt;cmake&lt;/code&gt; is such a popular build tool, as this os-dependent complexity would only increase with more modules&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;ifneq ($(OS),Windows_NT)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;uname_os&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;shell&lt;span class="w"&gt; &lt;/span&gt;uname&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="cp"&gt;    ifneq ($(uname_os),Darwin)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;CPPFLAGS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-I/usr/include/kqueue
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;LFLAGS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-lkqueue&lt;span class="w"&gt; &lt;/span&gt;-lpthread
&lt;span class="cp"&gt;    endif&lt;/span&gt;
&lt;span class="cp"&gt;endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Day Six&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;And God said, &lt;strong&gt;"Let there be a client manager to spawn clients, so that I may be absolved of the burden of testing"&lt;/strong&gt;, and it was so. God crafted a client manager using threads, and did the server benchmarks, and he saw that they were good.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This (and benchmarking) were boring but rewarding. For starters, a few changes had to be made in the protocol to make it a bit more reliable, and then some bookkeeping code had to be written for clients so that they could save their packet request round trip times to files, and also be called independently and run on separate threads. Once that was done, I created a client manager that took care of spawning a bunch of clients and making requests to the server&lt;/p&gt;
&lt;p&gt;The load benchmarks were great, for small files. For large files, I was transferring around 50kb/sec to 50 clients each, on my machine. Note that if you simulate a large number of clients, your server CPU allocation will be disproportionate to the number of clients: for a 100 clients, my server was using only 3-4% of the processor, while the clients were using ~90%. Something to keep an eye out for. Or just use a more powerful machine with more cores while simulating.&lt;/p&gt;
&lt;p&gt;Here are some numbers. For context, A2_small_file.txt is a 100kB text file.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="times" src="res/time_clients.svg"&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Day Seven&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Thus, the clients and server were completed in all their vast array, so on the seventh day, God rested from all his work. Then God &lt;strike&gt;Blessed the seventh day and made it holy&lt;/strike&gt; &lt;em&gt;Cursed himself for having spent so much time on one assignment, when there were four more to do, and minors would begin in a week&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you felt like this article was too fast, or too poorly written, you now know why :')&lt;/p&gt;
&lt;p&gt;&lt;strike&gt;Since the assignment deadline is still not over, I've consciously not divulged many specifics. Will probably release a follow-up on the protocol and client-server design itself later on.&lt;/strike&gt; Update: you can play with the code &lt;a href="https://github.com/Aniruddha-Deb/trickle"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;&lt;sup id="footnote-1"&gt;1&lt;/sup&gt; &lt;code&gt;select&lt;/code&gt; can handle only 1024 events, and is linear in time, which makes it a very bad choice. More modern implementations use kqueue(BSD/macOS), epoll(Linux) or IOCP(Windows). A cross-platform option is to use &lt;a href="https://libevent.org/"&gt;libevent&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-2"&gt;2&lt;/sup&gt; &lt;code&gt;recv&lt;/code&gt; will block (wait until there are nonzero bytes in the read buffer) if the socket is blocking, and will read atmost &lt;code&gt;len&lt;/code&gt; bytes to &lt;code&gt;buf&lt;/code&gt; (the number of bytes read are returned by the syscall). If the socket is non-blocking, &lt;code&gt;recv&lt;/code&gt; may return 0 if there's nothing in the buffer to read. Note that if a blocking &lt;code&gt;recv&lt;/code&gt; returns 0, it means that the connection has been disconnected (why? Don't really know, but I guess it's because there's an EOF residing in the buffer, sent by the other party, up to which &lt;code&gt;recv&lt;/code&gt; reads, and then there's nothing left to read but the EOF).&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-3"&gt;3&lt;/sup&gt; Tired of all the *buntu distros, and had experience with arch (loved the rolling distro functionality), so needed an arch experience with minimal effort.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Systems"></category></entry><entry><title>A Simple Sudoku Solver</title><link href="https://aniruddhadeb.com/articles/2022/simple-sudoku-solver.html" rel="alternate"></link><published>2022-09-03T17:00:00+05:30</published><updated>2022-09-03T17:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-09-03:/articles/2022/simple-sudoku-solver.html</id><summary type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;The problem is a simple search problem: given a partially filled sudoku board, return a fully filled sudoku board with the initial numbers in place such that each digit features only once in every row, column and 3x3 subgrid.&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;These problems, in general, are called &lt;a href="https://en.wikipedia.org/wiki/Constraint_satisfaction_problem"&gt;Constraint …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;The problem is a simple search problem: given a partially filled sudoku board, return a fully filled sudoku board with the initial numbers in place such that each digit features only once in every row, column and 3x3 subgrid.&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;These problems, in general, are called &lt;a href="https://en.wikipedia.org/wiki/Constraint_satisfaction_problem"&gt;Constraint Satisfaction Problems&lt;/a&gt;. Given a set of constraints, find a valid solution which satisfies all the constraints.&lt;/p&gt;
&lt;p&gt;A CSP is generally represented as a graph, with each variable as a node and a constraint between two variables as an edge. &lt;a href="https://en.wikipedia.org/wiki/Sudoku_graph"&gt;Sudoku Graphs&lt;/a&gt; are well-studied, and here's an example of a 9x9 one (courtesy &lt;a href="https://www.researchgate.net/figure/b-Graph-coloring-of-Sudoku_fig9_311668725"&gt;Artacho and Campoy&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="sudoku_graph" src="https://www.researchgate.net/profile/Ruben-Campoy/publication/311668725/figure/fig9/AS:439849451823105@1481879689246/b-Graph-coloring-of-Sudoku.png"&gt;&lt;/p&gt;
&lt;p&gt;This gives us a nice formulation, and allows us to search for a solution on this graph using backtracking search (Pseudocode courtesy &lt;a href="https://www.cse.iitd.ac.in/~rohanpaul/teaching/data/2022-COL333/L06-Constraint-Satisfaction.pdf"&gt;Rohan Paul's Slides&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="csp_bts" src="res/backtracking_search_pseudocode.png"&gt;&lt;/p&gt;
&lt;p&gt;The two key algorithmic decisions to make here are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In what order do we select unassigned variables&lt;/li&gt;
&lt;li&gt;In what order do we assign values to the unassigned variable chosen?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is the crux of the functions &lt;code&gt;select-unassigned-variable&lt;/code&gt; and &lt;code&gt;order-domain-values&lt;/code&gt;. Thinking about it a bit more:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We want to first fill the variables whose values we already know: the ones which have only one possible value ie are fully constrained. This is designed to fail fast, and will make the search go quicker. Hence, the ordering here should be &lt;strong&gt;choose the most constrained variable&lt;/strong&gt;. &lt;ul&gt;
&lt;li&gt;Note that among variables with the same number of constraints, to break ties, we'd choose the variable &lt;strong&gt;with the greatest degree&lt;/strong&gt;, however for sudoku all the vertices have the same degree so it doesn't really matter.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We want to fill the values that are the least used in the board first, that is, the most likely values (that would rule out the fewest values in the remaining variables). We want to fail last while making this assignment, so we choose &lt;strong&gt;The most likely variable&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are a few more optimizations, such as forward checking, but for a simple sudoku solver, these should be sufficient.&lt;/p&gt;
&lt;h2&gt;The Implementation&lt;/h2&gt;
&lt;p&gt;With the algorithm in mind, I cooked up a quick implementation in C++. I used the following bitboard structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Sudoku bitboard:&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;board_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;324&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n_set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;board_t&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n_set&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This structure makes checks constant time, and since we're having a mutable bitboard, size isn't really an issue (this clocks in at ~600 bytes). &lt;/p&gt;
&lt;p&gt;The core backtracking algorithm itself looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board_t&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;


&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n_set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;//std::cout &amp;lt;&amp;lt; (int)b.n_set &amp;lt;&amp;lt; std::endl;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// choose the most constrained cell c in b&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mcc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_mcc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// I think this takes the most time now...&lt;/span&gt;
&lt;span class="w"&gt;                          &lt;/span&gt;&lt;span class="c1"&gt;// atleast 729 ops.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mcc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mcc&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// move ordering... fail last&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;solved&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solved&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The only issue? It's &lt;em&gt;slow&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;The Performance&lt;/h2&gt;
&lt;p&gt;Initially, I was mighty pleased with myself for creating such a nice solver: it solved &lt;a href="https://www.sudokuwiki.org/sudoku.htm?bd=800000000003600000070090200050007000000045700000100030001000068008500010090000400"&gt;Arto Inkala's Unsolvable Sudoku&lt;/a&gt; in less than a second, as well as &lt;a href="https://www.sudokuwiki.org/Weekly_Sudoku.asp?puz=28"&gt;#28&lt;/a&gt; of the unsolveable sudoku puzzles in less than two seconds. &lt;/p&gt;
&lt;p&gt;Then I saw how sudoku solver benchmarks are actually done&lt;/p&gt;
&lt;h2&gt;State of the art&lt;/h2&gt;
&lt;p&gt;Currently, this is &lt;a href="https://t-dillon.github.io/tdoku/"&gt;tdoku&lt;/a&gt;. Beautifully written and explained, tdoku takes &lt;strong&gt;41.7 us&lt;/strong&gt; on average for very difficult puzzles with Sudoku Explainer ratings of 11 or higher&lt;/p&gt;
&lt;p&gt;And mine?&lt;/p&gt;
&lt;p&gt;300,000 us&lt;/p&gt;
&lt;p&gt;Yep.&lt;/p&gt;
&lt;p&gt;From an instant to an eternity. Well, atleast there's still a long way to go! I had to limit my solver to solve only a hundred puzzles from the same dataset, otherwise it wouldn't terminate. &lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is by no means a conclusive solver: there are still a lot of optimizations I can make, such as faster move generation and some SIMD stuff to make checks faster, but I think I'll get to those later. Now, the tree search would need to be optimized first. &lt;/p&gt;
&lt;p&gt;This was hacked up in ~3 hours, and you can find the entire code &lt;a href="https://gist.github.com/Aniruddha-Deb/45055de874701009525de9d04e044382"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Happy sudoku solving!&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>Variance Estimation in Heteroscedastic Regression</title><link href="https://aniruddhadeb.com/articles/2022/heteroscedastic-variance-estimation.html" rel="alternate"></link><published>2022-08-29T18:00:00+05:30</published><updated>2022-08-29T18:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-08-29:/articles/2022/heteroscedastic-variance-estimation.html</id><summary type="html">&lt;p&gt;Most of the times, the regression models we need to fit don't have a constant standard deviation, but rather one that is some function of $x$. In this article, I try to learn a model with variance varying linearly as a function of x: kind of like a &lt;em&gt;regression on variance&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Most linear regression models assume &lt;/p&gt;
&lt;p&gt;$$y^{i} \approx \mathcal{N}(\theta^T x^{i}, \sigma^2)$$&lt;/p&gt;
&lt;p&gt;The standard closed form for this, obtained via finding the MLE estimate, gives $(X^T X)^{-1} X^T Y$, where $X$ is the example matrix of shape $(m,n)$ and $Y$ is the label vector of shape $(n,1)$. Note that $m$ is the number of training examples and $n$ is the number of features.&lt;/p&gt;
&lt;p&gt;However, the variance need not always be constant. Consider a model where the variance is varying linearly (or rather just increasing) with $x$: an example would be the &lt;a href="https://www.kaggle.com/code/chanakyavivekkapoor/house-price-prediction"&gt;House prices dataset&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" src="res/house_prices.png"&gt;&lt;/p&gt;
&lt;p&gt;While there are feature transformations that would make this less heteroscedastic, this article focuses on learning the variance parameters, so along with our regression estimate, we can provide a variance estimate as well&lt;/p&gt;
&lt;h2&gt;The Model&lt;/h2&gt;
&lt;p&gt;We assume that the &lt;strong&gt;standard deviation&lt;/strong&gt; (not variance) is a linear function of $x$&lt;/p&gt;
&lt;p&gt;$$y^{i} \approx \mathcal{N}(\theta_m^T x^{i}, (\theta_v^T x^{i})^2)$$&lt;/p&gt;
&lt;p&gt;The log-likelihood function is hence&lt;/p&gt;
&lt;p&gt;$$\mathcal{LL}(\theta_m, \theta_v) = -\frac{m}{2} \log 2\pi - \sum_{i=1}^m \log \theta_v^T x^{i} - \frac{1}{2} \sum_{i=1}^m \frac{(y^{i} - \theta_m^T x^{i})^2}{(\theta_v^T x^{i})^2}$$&lt;/p&gt;
&lt;p&gt;Differentiating with respect to $\theta_v$ gives us the gradient for $\theta_v$:&lt;/p&gt;
&lt;p&gt;$$\frac{\partial \mathcal{LL}}{\partial \theta_v} = - \sum_{i=1}^m \frac{x^{i}}{\theta_v^T x^{i}} + \sum_{i=1}^m x^{i} \frac{(y^{i} - \theta_m^T x^{i})^2}{(\theta_v^T x^{i})^3}$$&lt;/p&gt;
&lt;p&gt;Rearranging this gives us, in a matrix form,&lt;/p&gt;
&lt;p&gt;$$\frac{\partial \mathcal{LL}}{\partial \theta_v}= X^T \left( \frac{E^2 - S^2}{S^3} \right)$$&lt;/p&gt;
&lt;p&gt;Where $X$ is our example matrix, $E$ is the sum of squared error vector and $S$ is the standard deviation vector. This is a nice, concise form that we can use in our code. However, because of the $V$ term in the denominator, &lt;strong&gt;I couldn't obtain a closed form for this, and had to do gradient descent on the parameters&lt;/strong&gt;. Even getting into second derivative methods was getting a bit tedious. If you do find a closed form, let me know :)&lt;/p&gt;
&lt;p&gt;The derivative with respect to $\theta_m$ is pretty standard: we get&lt;/p&gt;
&lt;p&gt;$$\frac{\partial \mathcal{LL}}{\partial \theta_m} = \sum_{i=1}^m x^{i} \frac{(y^{i} - \theta_m^T x^{i})}{(\theta_v^T x^{i})^2}$$&lt;/p&gt;
&lt;h2&gt;An Implementation&lt;/h2&gt;
&lt;p&gt;Implementation was fairly straightforward, using gradient descent, and it converged nicely to some generated data&lt;/p&gt;
&lt;p&gt;&lt;img alt="hetero_model" src="res/hetero_sd_model.png"&gt;&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Machine Learning"></category></entry><entry><title>The Rise of the Codefluencer</title><link href="https://aniruddhadeb.com/articles/2022/rise-of-codefluencer.html" rel="alternate"></link><published>2022-08-20T17:00:00+05:30</published><updated>2022-08-20T17:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-08-20:/articles/2022/rise-of-codefluencer.html</id><summary type="html">&lt;p&gt;My Thoughts on Web Development, Programming Influencers/tutors and the portrayal of programming as a lavish dream rather than providing a careful solution to complex problems, bit by bit.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Not an opinion piece, but an opinion piece. If it matters; what weight do the opinions of a twentysomething university student have on a trillion-dollar industry? This'll probably be something I'll look back at in twenty years and chuckle at my hotheadedness (if I'm alive after twenty years and have not evaporated due to climate change)&lt;/p&gt;
&lt;h2&gt;Web Development, to an outsider&lt;/h2&gt;
&lt;p&gt;I recently had to develop a small platform to keep track of my investments. As luck would have it, I want this to be cross-platform, run in the background and send alerts to me on certain triggers. Which means No Desktop apps: XCode is out of the question because I don't have much expertise in swift, and I hopped off the Java bandwagon a long time ago. Most importantly, my laptop won't be running 24x7. So, create a python utility and a cron job, and run it? Sure, but I'd need a way to look at my portfolio as well, which doesn't involve a curses-based TUI. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;sigh. You can probably tell where this is going.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="aaaaaaaa" src="res/frontend-spaghetti-monster.png"&gt;&lt;/p&gt;
&lt;p&gt;Yep. We're finally doing WebDev. &lt;/p&gt;
&lt;h3&gt;The descent into darkness&lt;/h3&gt;
&lt;p&gt;I know the bare minimum about frontend frameworks (maybe a bit more conceptually), but have 0 practical experience. All my frontend so far has been bare HTML/CSS/JS, raw DOM manipulation, JS classes and no components (I felt the pinch a bit &lt;a href="https://github.com/Aniruddha-Deb/RubiksCube"&gt;In my previous project&lt;/a&gt;, but made do without it). This time though, I had to make a large Single Page Application&lt;sup&gt;&lt;a href="#footnote-1"&gt;1&lt;/a&gt;&lt;/sup&gt; and component-wise design would be crucial.&lt;/p&gt;
&lt;p&gt;I picked up &lt;a href="https://vuejs.org"&gt;Vue&lt;/a&gt;, and credit where it's due, Vue is probably the most beginner-friendly framework: good documentation, great conceptual clarity and nice examples. I'm good with &lt;a href="https://flask.palletsprojects.com/en/2.2.x/"&gt;Flask&lt;/a&gt; as well, and it was easy to do some groundwork and housekeeping and set up a basic system supporting configuration, logging and authentication on the backend and routing and a couple views on the frontend&lt;sup&gt;&lt;a href="#footnote-2"&gt;2&lt;/a&gt;&lt;/sup&gt;. Also, the Flask and Vite development servers run on different ports, so had to set up a reverse proxy on the Vite server to redirect API traffic to flask, which made it very &lt;em&gt;clean&lt;/em&gt; to run in debug mode, with both hot-reloading ^_^. The next day (today), I added some CSS using &lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt;, along with a login and registration page. &lt;/p&gt;
&lt;p&gt;With this done, the problems left to solve are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connecting to my broker, getting quotes every 5 minutes and updating the database&lt;/li&gt;
&lt;li&gt;Creating a Pivot Table component from scratch to sum up the securities and all the transactions that have occured&lt;/li&gt;
&lt;li&gt;Packaging and deploying to a remote server (maybe heroku?)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are still not &lt;em&gt;core&lt;/em&gt; engineering problems, and I probably will run into some when I work on making the daemon, and interfacing it with Flask and the DB. However, these are still more complicated than everything I've set up so far.&lt;/p&gt;
&lt;p&gt;Seems simple enough, right? So where's the disappointment?&lt;/p&gt;
&lt;h2&gt;Willy Wonka's Chocolate Factory&lt;/h2&gt;
&lt;p&gt;I simplified the description of the framework picking process &lt;strong&gt;by a huge margin&lt;/strong&gt;. A simple google search for &lt;code&gt;frontend framework&lt;/code&gt; returns 6 different sites&lt;sup&gt;&lt;a href="#footnote-3"&gt;3&lt;/a&gt;&lt;/sup&gt; all listing the same top 10 (or 15) frontend frameworks, which are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;li&gt;Angular&lt;/li&gt;
&lt;li&gt;Backbone&lt;/li&gt;
&lt;li&gt;Bootstrap&lt;/li&gt;
&lt;li&gt;Foundation&lt;/li&gt;
&lt;li&gt;Svelte&lt;/li&gt;
&lt;li&gt;Elm&lt;/li&gt;
&lt;li&gt;Ember&lt;/li&gt;
&lt;li&gt;jQuery (yes, jQuery)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here's the catch: all of them are used on the frontend in the same way, but it's the equivalent of googling &lt;em&gt;fruits&lt;/em&gt; and getting a list that says &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Banana&lt;/li&gt;
&lt;li&gt;Watermelon&lt;/li&gt;
&lt;li&gt;Tomato&lt;/li&gt;
&lt;li&gt;Cauliflower&lt;/li&gt;
&lt;li&gt;Strawberry&lt;/li&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;li&gt;Potato&lt;/li&gt;
&lt;li&gt;Sweet Potato&lt;/li&gt;
&lt;li&gt;Cucumber&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Get the point? Half of these aren't even fruits!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Svelte and Elm are compilers: you write code in their own Domain Specific Language (Svelte is pretty similar to JS, Elm is functional and actually quite nice on it's own, but too much of a toy to use in anything serious because it's a pain in the ass to interface with other JS libraries), and the compiler will compile it to JS. That's how these tout their &lt;em&gt;speed&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Backbone seems to be doing something completely different and minimalistic: it still implements a MVC, but in a radically different way to how everyone else seems to be doing it&lt;/li&gt;
&lt;li&gt;jQuery is raw DOM manipulation, just a bit simpler, and &lt;em&gt;very&lt;/em&gt; antiquated: it used to be all the rage back in the late 2000's. &lt;code&gt;$&lt;/code&gt; has now been relegated to the same scrap heap where PHP&lt;sup&gt;&lt;a href="#footnote-4"&gt;4&lt;/a&gt;&lt;/sup&gt; and Microsoft Clippy reside.&lt;/li&gt;
&lt;li&gt;Bootstrap and Foundation aren't even full-fledged DOM manipulators, they just provide a set of components that you have to link together manually. Bootstrap started off as a plain CSS tool, and their components also feel like simple CSS trinkets rather than actual, extendable resources&lt;/li&gt;
&lt;li&gt;Finally, React, Vue, Angular and Ember are all virtual DOM manipulators: they maintain a virtual DOM, diff it with the real DOM when the elements in question have changed and render it to the screen. They com&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is just the tip of the iceberg! WebDev today is a hodgepodge of different tools, different best practices and different, but very similar ways of solving the exact same problem! There is conceptually zero difference between what React, Vue, Angular and Ember do, but all of them have their own opinionated best practices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React uses JSX, which is an absolute eyesore: who at Facebook looked at HTML and JS and thought, 'let's convince them to have a baby!' Tywin Lannister would be proud.&lt;/li&gt;
&lt;li&gt;Angular and Vue use their own templating languages, which makes them not much different from react&lt;/li&gt;
&lt;li&gt;Ember.. I have no idea what ember does, but the only thing I've heard is that it has a very steep learning curve.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This gives rise to an entire army of touts whose livelihood is based on writing articles such as &lt;a href="https://blog.cloudboost.io/why-react-is-better-than-vue-js-and-when-9545049652d8"&gt;Why React is better than Vue&lt;/a&gt;&lt;sup&gt;&lt;a href="#footnote-5"&gt;5&lt;/a&gt;&lt;/sup&gt;, or &lt;a href="https://aniruddhadeb.com/articles/2022/rise-of-codefluencer.html"&gt;Why Frontend Development is a Mess&lt;/a&gt;&lt;sup&gt;&lt;a href="#footnote-6"&gt;6&lt;/a&gt;&lt;/sup&gt;. Every single article of theirs must include the obligatory Google Search Trends snap, showing how &lt;em&gt;Oh, the framework we're touting is the best!&lt;/em&gt; or how &lt;em&gt;Oh, look at this mess! Deplorable!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="search_trends" src="res/trends.png"&gt;&lt;/p&gt;
&lt;p&gt;Jokes aside, let's talk about NPM. Oh, NPM!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No wonder NPM is the largest package manager: it just shows that Frontend Developers are terrible at making stable, reliable software that everyone uses and are more interested at reinventing the wheel.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A reasonable conclusion I've come to is that the entire NPM ecosystem is focused on adding as many tools as they need to make frontend development as easy as possible, up to the point where all you need to type is a single character, and voilà! A wild webapp magically appears!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sass, Less and SCSS all make their OWN DSL and implement their OWN compiler, rather than just submitting these feature requests to the core CSS spec and improving the already existing language. Do we really need more than three &lt;em&gt;stylesheet languages?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;I've already spoken about JSX, but you have so many other templating engines/DSL's: Mustache, handlebars, Nunjucks, Haml&lt;/li&gt;
&lt;li&gt;Let's not get started on the army of transpilers and tools for JavaScript: ASM, Babel, Opal, CoffeeScript, TypeScript. Why not change the language in the first place? And why are there &lt;em&gt;so many&lt;/em&gt; build tools for JS: ESLint, grunt, browserify, parcel, yarn, webpack and the list goes on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these are reinventing the wheel, just differently: there's a 58-sided wheel, a 60-sided wheel which is marginally smoother than the 58-sided wheel, and then the 67-sided wheel, which because of it's &lt;em&gt;odd-number of sides, is currently the best wheel library you can use!&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;When will JavaScript devs finally roll out a simple, circular wheel, and get the entire community to stick to it? Python tools such as pip, virtualenv, pyenv, wheel come to mind: simple, reliable and used by the entire community. It's a shame such a vibrant, hyped and far-reaching development platform is bogged down by the disunity of people who think their framework will the one to unify all.&lt;/p&gt;
&lt;h2&gt;The Rise of the CodeFluencers&lt;/h2&gt;
&lt;p&gt;This leads to a hude secondary market: this was going to be the main topic of this article, but I'm too exhausted at this point to write much. TL;DR: if there are 10 widely used tools used at different stages of the process (say React, Sass, Babel, Vite, Redux etc), each having say ten million people wanting to learn them, then you can sell a course for $10 for each of them (assuming you're a good JS Dev and know them all) and suddenly, you're a billionaire. &lt;/p&gt;
&lt;p&gt;Unfortunately, everyone has the same idea, so the market is now saturated with these cheap courses and hacky articles, all with absurd taglines promoting some ideal such as 'become a better developer', or even better, 'get that super-cool frontend job at XYZ, just like K who took our course! Only for $10'. It's a shame, because the official documentation for some of these libraries is absolutely immaculate. The only issue arises when there's a small nuance you haven't figured out (see &lt;sup&gt;&lt;a href="#footnote-2"&gt;2&lt;/a&gt;&lt;/sup&gt;), and with no hits on StackOverflow, the only article that claims to solve it is behind a paywall, or even worse, &lt;em&gt;you've exhausted your 2 free articles on Medium for this month&lt;/em&gt;, and can't read it. Medium merits it's own blogpost, but the long and short of it is that this entire thing is a mess, and people are making money off of it.&lt;/p&gt;
&lt;h2&gt;What Next?&lt;/h2&gt;
&lt;p&gt;I think that the apparent simplicity I spoke about, that all frontend devs are trying to reach via their libraries, is to abstract away the engineering complexities that newbie frontend devs would encounter when dealing with scale behind a black box, and ship a thousand such black boxes to solve all such possible problems that may come up. No wonder some of these frontend projects touch around a gigabyte on disk. This also puts 'Self-taught Frontend Developers' in a negative light: it's a bit like a mechanic having a robot that fixes their engine for them, and if there are newer engines with more complex problems, all the mechanic needs to do is &lt;code&gt;npm update&lt;/code&gt;, and they're good to go! There's a big difference between these self-taught mechanics using the npm robot, and actual mechanical engineers who've struggled through a thermodynamics class: one of them will be designing the next big engine, while the other will probably be fixing engines all their life.&lt;sup&gt;&lt;a href="#footnote-7"&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;Hyperlinking to footnotes was suggested by an anon reader of my blog, and it's a bit high-effort, but seems to have come out nicely!&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-1"&gt;1&lt;/sup&gt; A &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;Single Page Application&lt;/a&gt; is an application that doesn't have any redirects: instead, it dynamically rewrites the web page, making it feel more like a conventional desktop application&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-2"&gt;2&lt;/sup&gt; Not before banging my head with some stupid things: you can't modify a ref, and you have to mark things whose state changes as reactive, for the virtual DOM to pick up the updates and update the real DOM.&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-3"&gt;3&lt;/sup&gt; See &lt;a href="https://technostacks.com/blog/best-frontend-frameworks/"&gt;1&lt;/a&gt;, &lt;a href="https://www.simform.com/blog/best-frontend-frameworks/"&gt;2&lt;/a&gt;, &lt;a href="https://www.sam-solutions.com/blog/best-frontend-framework/"&gt;3&lt;/a&gt;, &lt;a href="https://www.knowledgehut.com/blog/web-development/front-end-development-frameworks"&gt;4&lt;/a&gt;, &lt;a href="https://www.enprowess.com/blogs/top-frontend-frameworks/"&gt;5&lt;/a&gt;, &lt;a href="https://www.toptal.com/javascript/choosing-best-front-end-framework"&gt;6&lt;/a&gt; (The last one is from toptal, and is actually good advice, but &lt;em&gt;why is it #6 on my google search result list then?&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-4"&gt;4&lt;/sup&gt; Yes, I know &lt;a href="https://w3techs.com/technologies/history_overview/programming_language"&gt;more than 75% of the web uses PHP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-5"&gt;5&lt;/sup&gt; Okay, this was actually a pretty nice article :P but you get my point&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-6"&gt;6&lt;/sup&gt; Humour is when the joke's on you but hits the other fellow first - before it boomerangs ~ Langston Hughes&lt;/p&gt;
&lt;p&gt;&lt;sup id="footnote-7"&gt;7&lt;/sup&gt; Bad example, as we'll all probably be driving EV's soon&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>Intern Inferno</title><link href="https://aniruddhadeb.com/articles/2022/intern-inferno.html" rel="alternate"></link><published>2022-08-14T15:30:00+05:30</published><updated>2022-08-14T15:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-08-14:/articles/2022/intern-inferno.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Not everything goes exactly as planned. That's why it's a plan, not a certainty. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Aiming in&lt;/h2&gt;
&lt;p&gt;Before this entire &lt;em&gt;joomla&lt;/em&gt; started, I asked myself: &lt;em&gt;What is it I want from an intern&lt;/em&gt;? &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I wanted to tour: I didn't pick up a foreign research intern this summer, and was tired of …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Not everything goes exactly as planned. That's why it's a plan, not a certainty. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Aiming in&lt;/h2&gt;
&lt;p&gt;Before this entire &lt;em&gt;joomla&lt;/em&gt; started, I asked myself: &lt;em&gt;What is it I want from an intern&lt;/em&gt;? &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I wanted to tour: I didn't pick up a foreign research intern this summer, and was tired of hearing/seeing how others were roaming the world while I was &lt;a href="https://aniruddhadeb.com/articles/2022/badminton-habits.html"&gt;scooping shuttles off the floor of my room&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I wanted something that paid well: Apart from the feel-good factor, a good paying intern would put money for my masters' in the bank&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Above both of these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I wanted something that would &lt;strong&gt;help me in the future&lt;/strong&gt;: Research or core CS/Math roles would provide both relevant work experience and also appeal to universities when I go for my Masters. I definetly didn't want to pick up finance/consulting/&lt;em&gt;enterprise/backend/frontend&lt;/em&gt; development.&lt;/li&gt;
&lt;li&gt;I wanted something &lt;strong&gt;fun&lt;/strong&gt;: Writing high-stakes trading algorithms, making hyper-efficient and superfast systems on embedded devices, implementing object recognition on embedded sensors, receiving patents/publishing papers on new models and algorithms is a small but representative subset of the kind of work I wanted to do this summer. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another way of looking at this is &lt;strong&gt;saying no&lt;/strong&gt;: proceed by elimination rather than addition. This requires knowing yourself very well, and seeing if a role really resonates with what you want to do. Eg if you're a product person and have worked in programming clubs, developing systems, then a SDE role would appeal to you. Don't apply to anything other than SDE.&lt;/p&gt;
&lt;p&gt;With this in mind, I built up a small shortlist of companies to apply to. Mostly quant and research roles.&lt;/p&gt;
&lt;h2&gt;Bluffington, but with higher stakes&lt;/h2&gt;
&lt;p&gt;Intern season this time formally started off in early July, when talks were held by the Office of Career Services and the resumé portal opened for a short while (albeit there were several deadline extensions). For context, your OCS CV is what companies would shortlist you based on, and for everything you wrote on there, proof was required. I didn't have much to put on it except a large number of projects, some acad achievements and some volunteer experience, and I believe that's more than enough for a Tech CV (where shortlisting is mostly done either through CG or through your performance in some arcane test that the company conjures). Just be completely aware of what you're putting in there, and what each project was: the CV is used for HR/Face to face interviews, and you'll probably be quizzed on atleast a couple domains where you've done projects. And please, please, &lt;em&gt;don't bluff&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;PS: this is only relevant to tech/research roles. I have no idea what makes a good finance/consult CV.&lt;/p&gt;
&lt;h2&gt;The Dance of Dragons&lt;/h2&gt;
&lt;p&gt;Companies started with their Pre-Placement Talks from the 19th (?): Higher paying ones went first, and it was a mixed bag. Some were lackluster, and some were brilliant. Soon after which, applications opened up. &lt;/p&gt;
&lt;p&gt;I think the most important thing here is to &lt;strong&gt;Stick to your list&lt;/strong&gt;: You'll see friends and most people applying to absolutely everything and anything in the hopes that an intern will materialize somewhere. There are multiple downsides to this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Too many tests will tire you out&lt;/li&gt;
&lt;li&gt;Even if you clear all the tests and are shortlisted for interviews from multiple companies, there are only so many Day 1 slots that OCS will allocate to you (I think 4 is the upper limit), so even if you want to, you can't sit everywhere.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the other hand, this does require a lot of tenacity and self-belief, and a good CG/plenty of skill as well. There's no one right answer, just make sure you don't switch your strategy out of desperation midway (eg go through your list, then realize that if there are too many companies open and your chances are low, apply to all of them, or vice versa). Go in with a plan, and try to stick to it as much as possible from your end, because you can't control what happens outside.&lt;/p&gt;
&lt;h2&gt;Longlists&lt;/h2&gt;
&lt;p&gt;After applications, shortlists for tests begin to arrive. Companies have free will in how they'll shortlist people: some are very transparent, and some are opaque to the point of being devious. The test processes for some of the most wanted companies spans multiple tests rather than just one, so keep an eye out on that as well. Also, while OCS will do their best to avoid test slot clashes, you will become a walking zombie if you take too many or, in the worst case, will have a bunch of slot clashes. Combined with 8am offline classes and 11pm tests, &lt;em&gt;just don't push yourself by applying to as many companies as you can&lt;/em&gt;. Just don't.&lt;/p&gt;
&lt;p&gt;Another aspect is to not be disappointed if you don't make a test shortlist: it's probably just a random thing (unless there are clear patterns such as a CG cutoff), and you shouldn't beat yourself up about it. Learning to not let these things affect you is hard, but an important learning nevertheless.&lt;/p&gt;
&lt;h2&gt;Tests and shortlists&lt;/h2&gt;
&lt;p&gt;Ah, the tests. Probably my least favourite part, because unless you're super amazing at the test, there's a complete black box behind the outcome (how well your test went) and the interview shortlist&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A test I gave where I thought I'd done pretty well (there was a monte carlo approximation problem that I did nicely), didn't result in a shortlist. Others (who didn't do this problem) got shortlisted.&lt;/li&gt;
&lt;li&gt;A test where I thought I'd done poorly resulted in me getting a shortlist&lt;/li&gt;
&lt;li&gt;A test where I'd done decent made no difference, because company in question just shortlisted CS DR 1-7, and two people who'd blasted their test to shreds&lt;/li&gt;
&lt;li&gt;A company which gave a test to a majority of their shortlist and an interview to a minority, had a significant % acceptance difference between the two methods of testing. Clearly, one was better than the other. Sadly I pulled the short straw here, and didn't make it.&lt;/li&gt;
&lt;li&gt;A company which had multiple rounds of tests, and finally a pre-interview, completely roasted me in the pre-interview, while several others said that they'd found their pre-interview to be &lt;em&gt;very chill&lt;/em&gt;. They got shortlisted, while I didn't.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, most companies won't have tests that are relevant to the work you'd be doing at the company. It's mostly a bunch of CP questions (gets harder for more valuable companies), and if you're in quant, some math MCQ's. Very few companies invest a lot of time and effort in the kind of questions they ask/the processes they take, and it's a pleasure in some sense to give those tests. Also, if the test is too easy, there is no differentiator between you and someone &lt;/p&gt;
&lt;p&gt;This is probably where the completely stochastic nature of life comes face-to-face with you: The stochasticity of the outcome is inversely proportional to your skill, and the only way to minimize it is to be an order-of-magnitude better than everyone else. Or, just get lucky. &lt;/p&gt;
&lt;p&gt;This has two important implications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you got rejected, it doesn't mean that you're worse than the others who got shortlisted.&lt;/li&gt;
&lt;li&gt;If you got shortlisted, it doesn't mean that you're better than the others who got rejected.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A very skilled (and very humble) friend keeps saying &lt;em&gt;Tukke pe jee raha hu mai&lt;/em&gt; (I'm living on a fluke) whenever praised for his skills, and it's a brilliant thing to do: accept the universe is larger than you and be grateful for it's outcomes. That way, you're always humble and happy.&lt;/p&gt;
&lt;h2&gt;Preference Filling&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In all things, have no preferences. 
~ Miyamoto Musashi&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This should be a no-brainer by this point. However, more context: Quant got into a bidding war over Talent, with multiple raises: I don't want to quote exact numbers here, but there was an almost 50% increase in the stipend offered, and they were already offering a lot. In addition, Quant companies with foreign bases leveraged their position to offer foreign roles as well, paid in GBP/SGD, which would be a no-brainer for most&lt;sup&gt;1&lt;/sup&gt;. Unfortunately, when I started, this was not there and some of these companies didn't make my shortlist, but for others, if the goalposts change and if you had them in your shortlist, now would be a good time to realistically reconsider where you want to go.&lt;/p&gt;
&lt;p&gt;Another note about Day 1 and Day 2: The placement system here works to ensure that the maximum number of people get an intern the quickest. As a result, internships are spread across two days, and if you get an offer on Day 1, you're out of contention in Day 2. Most core/research companies come in on Day 2 (Day 1 is quant/finance/consult/SDE mostly, because they pay the most), and if your heart is set on core/research, it's safest to skip Day 1.&lt;/p&gt;
&lt;p&gt;Also, keeping in line the above quote, if you do get shortlisted for a Day 1 company which is worse than a Day 2 company, it's sad, but there's not much you can do. Just remember to have fun when you go for the intern!&lt;/p&gt;
&lt;h2&gt;Faceoff&lt;/h2&gt;
&lt;p&gt;So you're walking in for interviews, sharply dressed, with your resume/CV in hand. What now? It's easy to say "Just be cool", but very hard to do. I think the most important thing is to go with the flow and be yourself, atleast in tech. And remember to keep it simple: start off with the simplest solution you can think of, then layer in complexity. In an interview, emphasis is on communication and clarity of thought rather than complexity, and if you're starting off simple, it's much easier to hook in your interviewer and keep him in your thought process rather than starting off complex and trying to break down complexity to explain to him (mostly because they anyway have a more complex problem, which they'll spring upon you once you solve the simple problem correctly).&lt;/p&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;So your interviews are over, and you're waiting at your hostel room, playing cards and biding time till your offer comes in. Several others have received on-the-spot offers, and you've been told by all your interviewers that you'll "get to know via your placement cell". Someone pings you asking if you got the offer, because XYZ got it now, and you run to your laptop and load the portal. What does your next LinkedIn post say?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;drumrolls&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;link rel="stylesheet" type="text/css" href="res/spoiler.css"&gt;&lt;/p&gt;
&lt;blockquote class='spoiler'&gt;
&lt;div class='spoiler-prompt'&gt; I'm pleased to announce that I'll be joining ... &lt;/div&gt;
&lt;div class='spoiler-text'&gt; I'm pleased to announce that I'll be joining &lt;a href="https://www.optiver.com"&gt;Optiver&lt;/a&gt; at their Amsterdam office next summer as a &lt;b&gt;Software Engineering Intern&lt;/b&gt;. I'll be working on optimizing their low-latency systems and finding out what goes into the tech that makes one of the world's leading market makers tick.
&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/linkedin post&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Truth be told, it's not as simple as this. Never is. Here's a small sankey diagram I made of how the entire process unfolded&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="res/intern_sankey.svg"&gt;&lt;/p&gt;
&lt;p&gt;I had two shortlists and ended up converting both, and I really enjoyed the interview processes in both the companies I applied to. Very kind and very smart interviewers, very cool people overall. Would've loved to send one half of me to each company, but unfortunately that's not possible :')&lt;/p&gt;
&lt;p&gt;Some resources I used for Quant Prep can be &lt;a href="https://github.com/Aniruddha-Deb/quant-prep"&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There's a lot that's not been talked about here: Diversity hiring, Waitlists, Walk-ins and Day 2 chaos. There are a few (several?) more nuances in placements, but with my experience here, one thing is pretty certain: &lt;strong&gt;I'm not sitting for placements&lt;/strong&gt;. It's a better investment of time and energy to work on a nice BTech Project, and focus on the near future &lt;!--rather than threading needles and shooting toothpicks at chances coming in via a draconian big-brotheresque middleman.--&gt;&lt;/p&gt;
&lt;p&gt;All the best, and happy intern hunting!&lt;/p&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;That's not all they did. Some invited their shortlist to dinner, some handed out t-shirts to their shortlist, some sent out emails inviting their shortlist to WA groups where they can ask anything about the company, and so on and so forth.&lt;/p&gt;</content><category term="General"></category><category term="Programming"></category><category term="Probability"></category></entry><entry><title>The Arch Linux Journey</title><link href="https://aniruddhadeb.com/articles/2022/arch-linux-1.html" rel="alternate"></link><published>2022-08-07T15:30:00+05:30</published><updated>2022-08-07T15:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-08-07:/articles/2022/arch-linux-1.html</id><summary type="html">&lt;p&gt;For the upcoming semesters, we have a ton of systems courses. So, I needed a linux box that I could hack around, preferably at the kernel level. I finally got around to installing Arch Linux on a Raspberry Pi&lt;sup&gt;1&lt;/sup&gt;: Here's how I did it.&lt;/p&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;For starters, I already …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the upcoming semesters, we have a ton of systems courses. So, I needed a linux box that I could hack around, preferably at the kernel level. I finally got around to installing Arch Linux on a Raspberry Pi&lt;sup&gt;1&lt;/sup&gt;: Here's how I did it.&lt;/p&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;For starters, I already use linux/unix systems quite a bit. The real need for a linux system became apparent last semester, when one of our courses needed a program that would run only on Windows/Ubuntu. I got around this by running a VM on my 6 year old, 128GB mac &lt;em&gt;sobs&lt;/em&gt;. While definetly a suboptimal solution, for the upcoming courses (networks, parallel programming, OS), a core linux machine would be a neccessity.&lt;/p&gt;
&lt;p&gt;Before you pick up your pitchforks, yes, RPi is ARM based: I know this is a completely different ballgame from CISC i386/x86-64 processors, which is also partly the reason I wanted linux on an ARM machine: we did ARM assembly in the previous course, so that'll make this easier? &lt;sub&gt;idk I'm bad at CS&lt;/sub&gt;&lt;/p&gt;
&lt;h2&gt;Baby Steps&lt;/h2&gt;
&lt;p&gt;&lt;img alt="arch_baby" src="res/bcd.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;So why arch?&lt;sup&gt;2&lt;/sup&gt; Well, the biggest reason is &lt;strong&gt;learning&lt;/strong&gt;: learning to setup arch and use it would teach me more about UNIX fundamentals than using a prebuilt OS. And in the span of less than half a day, I've used atleast 6 utilities I've never seen or heard of before. So yeah, if you enjoy the hike a steep learning curve gives you, arch is perfect.&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;Installation was fairly straightforward: NOOBS doesn't ship with an option to get arch, so &lt;a href="https://github.com/procount/pinn"&gt;PINN&lt;/a&gt; was used. Remember to download it from GitHub rather than from SourceForge: SourceForge mirrors are garbage, while the GitHub one downloads in under a minute.&lt;/p&gt;
&lt;p&gt;After getting PINN, just point-and-click to install arch.&lt;/p&gt;
&lt;p&gt;And that's it!&lt;/p&gt;
&lt;h2&gt;Btw I use arch&lt;/h2&gt;
&lt;p&gt;Ok, I lied. Arch ships with nothing, and I mean &lt;em&gt;nothing&lt;/em&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No windowing server&lt;/li&gt;
&lt;li&gt;No desktop environment (by extension)&lt;/li&gt;
&lt;li&gt;No setup screen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these are forgiveable (and quite common on server distros), but then we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No man pages. Seriously?&lt;/li&gt;
&lt;li&gt;No &lt;code&gt;sudo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;No keychains set up&lt;/li&gt;
&lt;li&gt;No drivers for Bluetooth, or Wifi set up&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fortunately, the ARM arch ships with a few more things: &lt;code&gt;netctl&lt;/code&gt;, &lt;code&gt;X11&lt;/code&gt;, and wifi drivers. And a SSH server running by default. The best way of setting up is to connect to your router via ethernet, then do an &lt;code&gt;arp-scan --localnet&lt;/code&gt; (on mac, install with &lt;code&gt;brew install arp-scan&lt;/code&gt;) to find the ip, ssh on, and get rolling (default user &lt;code&gt;alarm&lt;/code&gt;, password &lt;code&gt;alarm&lt;/code&gt; and root password is just &lt;code&gt;root&lt;/code&gt;)&lt;/p&gt;
&lt;h3&gt;Connecting and basics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Plug in your Pi to ethernet, and use your WiFi router settings page to see all connected devices. From there, note down your pi's IP and ssh on to it. &lt;/li&gt;
&lt;li&gt;use &lt;code&gt;timedatectl&lt;/code&gt; to see if the system clock is accurate:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;timedatectl set-ntp true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;use &lt;code&gt;timedatectl status&lt;/code&gt; for information.
- Set up the timezone:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime
hwclock --systohc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;generating locales: edit &lt;code&gt;/etc/locale.gen&lt;/code&gt; and uncomment &lt;code&gt;en_US.UTF-8&lt;/code&gt;. Generate locales by running &lt;code&gt;locale-gen&lt;/code&gt;. Then, create the &lt;code&gt;locale.conf&lt;/code&gt; file and set &lt;code&gt;LANG&lt;/code&gt; appropriately (I set it to &lt;code&gt;en_US.UTF-8&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Edit the hostname from &lt;code&gt;alarmpi&lt;/code&gt; to something better, like &lt;code&gt;senseipi&lt;/code&gt; :)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Setting up &lt;code&gt;pacman&lt;/code&gt; and certificates&lt;/h3&gt;
&lt;p&gt;Now that you're on the pi with a connection, the first thing to do is to setup &lt;code&gt;pacman&lt;/code&gt;. This needs certificates: since Arch is a rolling distro, there's a very rigorous signature process in place for packages, and the system by default won't install packages which are not signed by trusted certificates in the keychain. &lt;/p&gt;
&lt;p&gt;Setting this up on ARM is slightly different compared to a normal arch system (or so I found):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pacman-key --init
pacman-key --populate archlinuxarm
pacman-key --refresh-keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After that, &lt;code&gt;pacman -Syy&lt;/code&gt; and &lt;code&gt;pacman -S archlinux-keyring&lt;/code&gt;. Will install a couple dependencies as well.&lt;/p&gt;
&lt;p&gt;You're now ready to run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pacman -Syu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to update and upgrade everything on your system.&lt;/p&gt;
&lt;h3&gt;Wifi setup&lt;/h3&gt;
&lt;p&gt;Just use &lt;code&gt;wifi-menu&lt;/code&gt;, don't bother with anything more complicated. You'll also need to create a service to start wifi automatically on boot, by doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;systemctl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wpa_supplicant&lt;/span&gt;&lt;span class="nv"&gt;@wlan0&lt;/span&gt;
&lt;span class="n"&gt;systemctl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wpa_supplicant&lt;/span&gt;&lt;span class="nv"&gt;@wlan0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After this and rebooting, I was able to ssh onto my pi, by connecting it to my mobile hotspot. This is still my primary means of using my Pi. One important thing to note: &lt;strong&gt;Don't try switching to NetworkManager without a working display and ethernet connection&lt;/strong&gt;. I tried doing this, only to blow the network setup on my Pi, because once you set up the NetworkManager service, it would take over &lt;code&gt;wlan0&lt;/code&gt; on boot and because it didn't know the wifi configuration, it would never connect to the network, so I couldn't SSH/VNC onto it. After a lot of repeated tries, &lt;code&gt;wpa_supplicant&lt;/code&gt; finally launched before NetworkManager on one boot, allowing me to ssh on and disable NetworkManager for good.&lt;/p&gt;
&lt;h3&gt;Users, &lt;code&gt;sudo&lt;/code&gt; and User Groups&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create your new user&lt;/li&gt;
&lt;li&gt;ssh on as your new user, and su to root&lt;/li&gt;
&lt;li&gt;delete the old user&lt;/li&gt;
&lt;li&gt;install sudo: &lt;code&gt;pacman -S sudo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;visudo&lt;/code&gt; the sudoers file to give the wheel group access to sudo&lt;/li&gt;
&lt;li&gt;add your user to the wheel group&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;id &amp;lt;username&amp;gt;&lt;/code&gt; to verify you're added to the right groups&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Other software&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;utilities: &lt;code&gt;sudo pacman -S man-db man-pages nvim htop tree&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;run &lt;code&gt;mandb&lt;/code&gt; to generate the man database&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export EDITOR=nvim&lt;/code&gt; in your &lt;code&gt;.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;yay&lt;ul&gt;
&lt;li&gt;install git: &lt;code&gt;sudo pacman -S git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to /opt&lt;/li&gt;
&lt;li&gt;clone &lt;a href="https://aur.archlinux.org/yay.git"&gt;https://aur.archlinux.org/yay.git&lt;/a&gt; there&lt;ul&gt;
&lt;li&gt;needed to set a proxy for this: &lt;code&gt;git config --global http.proxy ""&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;chown to our user&lt;/li&gt;
&lt;li&gt;make the package with &lt;code&gt;makepkg -si&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;had to install base-devel for this: &lt;code&gt;sudo pacman -S base-devel&lt;/code&gt; (install everything, most of them are useful)&lt;ul&gt;
&lt;li&gt;go was not installing, surprisingly go-2:1.19-1 was updated on Aug 3 itself and I hadn't done &lt;code&gt;pacman -Syy&lt;/code&gt;Reiterated the importance of keeping my package lists updated in a rolling release distro.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;makepkg&lt;/code&gt; was surprisingly straightforward thereafter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;add colors:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo nvim /etc/pacman.conf&lt;/code&gt;, uncomment the Color line&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GUI stuff&lt;ul&gt;
&lt;li&gt;installing fonts&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yay -S ttf-roboto ttf-opensans ttf-roboto-mono ttf-ubuntu-font-family ttf-dejavu ttf-hack ttf-liberation&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;install Xorg stuff&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yay -S xorg-server xorg-xrefresh&lt;/code&gt; (install libglvnd)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yay -S xorg&lt;/code&gt; (install everything)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yay -S xterm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yay -S xfce4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yay -S arc-gtk-theme arc-icon-theme&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TigerVNC&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yay -S tigervnc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;edit your vnc config and set a vnc password with &lt;code&gt;vncpasswd&lt;/code&gt;, then run &lt;code&gt;vncserver&lt;/code&gt;. Also, add this as a system service so that it starts on boot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;To come&lt;/h2&gt;
&lt;p&gt;Congratulations: if you don't have a working system by now, atleasy you would have enough confidence to take your system in the direction you want to take it now. Here's a snap of how mine looks like after I was done with setup:&lt;/p&gt;
&lt;p&gt;&lt;img alt="arch_setup" src="res/arch_setup.png"&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/installation_guide"&gt;Arch Linux Installation guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/installation_guide"&gt;Arch Linux General Recommendations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/TheZoc/849a82d3eed219998cd82fb4040607ae"&gt;Gist on RPi Arch setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instructables.com/Arch-Linux-on-Raspberry-Pi/"&gt;Instructable on Arch on RPi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Too many arch linux forums threads to count.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; Finally, a tech article! Reading the previous articles, it personally seemed a bit sad that what started out as a STEM blog is now basically me masquerading as Kalpit Veerwal or some armchair IITian celebrity, sans the obnoxious YouTube channel (the most viewed article on this blog is my JEE journey :'( ) This sucks, but is easily changeable. Since I write about what I do, the solution is to just do more tech :P &lt;/p&gt;
&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; In the middle of intern interview season and wrapping up my SURA, only a masochist would do this to himself&lt;/p&gt;</content><category term="Programming"></category><category term="Arch"></category><category term="Programming"></category><category term="Linux"></category></entry><entry><title>Orbital Maneuvers and the Oberth Effect</title><link href="https://aniruddhadeb.com/articles/2022/orbital-oberth.html" rel="alternate"></link><published>2022-07-05T15:30:00+05:30</published><updated>2022-07-05T15:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-07-05:/articles/2022/orbital-oberth.html</id><summary type="html">&lt;p&gt;Once a rocket is in orbit, if it needs to change it's orbit (either from a lower to a higher orbit, or from a circular to an elliptical orbit), it needs to execute an &lt;a href="https://en.wikipedia.org/wiki/Orbital_maneuver"&gt;Orbital Maneuver&lt;/a&gt;. This is accomplished by using a small impulse from thrusters to change the tangential …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Once a rocket is in orbit, if it needs to change it's orbit (either from a lower to a higher orbit, or from a circular to an elliptical orbit), it needs to execute an &lt;a href="https://en.wikipedia.org/wiki/Orbital_maneuver"&gt;Orbital Maneuver&lt;/a&gt;. This is accomplished by using a small impulse from thrusters to change the tangential velocity, and hence slip into a different orbit as a consequence.&lt;/p&gt;
&lt;h2&gt;Types of Orbital Maneuvers&lt;/h2&gt;
&lt;p&gt;There are two types of orbital maneuvers: the &lt;a href="https://en.wikipedia.org/wiki/Hohmann_transfer_orbit"&gt;Hohmann transfer orbit&lt;/a&gt; and the &lt;a href="https://en.wikipedia.org/wiki/Bi-elliptic_transfer"&gt;Bi-elliptic transfer&lt;/a&gt;. The Hohmann transfer is faster, but the bi-elliptic one can use less fuel in some cases&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/commons/d/df/Hohmann_transfer_orbit.svg" width='300px' height='360px'/&gt;
&lt;img src="https://upload.wikimedia.org/wikipedia/commons/8/83/Bi-elliptic_transfer.svg" width='477px' height='360px'&gt;&lt;/p&gt;
&lt;p&gt;figures showing a) Hohmann transfer and b) Bi-elliptic transfer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The Oberth Effect&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Oberth_effect"&gt;Oberth Effect&lt;/a&gt; is interesting: roughly what it states is that &lt;strong&gt;A rocket will gain more velocity while firing it's engines at a higher velocity than by firing them at a lower velocity&lt;/strong&gt;. This is because the fuel has kinetic energy by virtue of the rocket's motion, and travelling at higher velocity = more kinetic energy in the fuel that the engines convert to exhaust gases.&lt;/p&gt;
&lt;p&gt;This effect can be used in a gravitational slingshot, when at the periapsis (closest point) of an elliptical orbit, a burn is more effective and gives you higher velocity gain as compared to burning as you're entering the gravitational well.&lt;/p&gt;
&lt;p&gt;Note that this is only applicable to reaction engines: it's less effective for something such as an &lt;a href="https://en.wikipedia.org/wiki/Ion_thruster"&gt;Ion Engine&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Philosophical Connotations&lt;/h2&gt;
&lt;p&gt;My father is an aerospace engineer by training, and this popped up in one of our long conversations about life (I've recently returned home, so enjoying these moments). In somewhat of a continuation to the &lt;a href="https://aniruddhadeb.com/articles/2021/this-summer.html"&gt;World is a Universe, and Life is your Trajectory&lt;/a&gt; idea, this rocket took off when I got into IIT Delhi, and the second (third?) stage burn gave me my Department Change. I'm peacefully in one orbit now, but over the next two years, I'd have to prepare for the next orbit change: my internship, followed by applications for Masters and/or Placements. As a result, a majority of my efforts would lie in timing and firing the burn required for this orbital maneuver, rather than finding the path of least resistance in my current orbit (which I believe I've already done in the past year).&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Staying healthy, focused, and motivated would be the primary goal for the next two years, while slowly detatching from other college-centric and people-focused activities and focusing more on the future and my skills.&lt;/p&gt;
&lt;p&gt;PS: a lot of new articles have a more personal flavour to them, courtesy me having my professional and this webpage separate, and also as a consequence of being inspired by &lt;a href="https://basil08.github.io/post/"&gt;a friend's blog&lt;/a&gt;. Let's see how long I stick with it :)&lt;/p&gt;</content><category term="General"></category><category term="Writing"></category></entry><entry><title>Leadership, among many other things</title><link href="https://aniruddhadeb.com/articles/2022/leadership.html" rel="alternate"></link><published>2022-06-26T23:15:00+05:30</published><updated>2022-06-26T23:15:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-06-26:/articles/2022/leadership.html</id><summary type="html">&lt;p&gt;Gazettale, BSP's premier interhostel competition, for which our team worked day and night, recently released the final standings.&lt;/p&gt;
&lt;p&gt;And we're fifth.&lt;/p&gt;
&lt;p&gt;Pop the champagne and dance, team, for we're fifth!&lt;/p&gt;
&lt;p&gt;&lt;img alt="udai_fifth" src="https://aniruddhadeb.com/articles/2022/res/udai_fifth.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Jokes aside, I'm lukewarm about the result. Proud of what a ragtag bunch of people came together and assembled in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Gazettale, BSP's premier interhostel competition, for which our team worked day and night, recently released the final standings.&lt;/p&gt;
&lt;p&gt;And we're fifth.&lt;/p&gt;
&lt;p&gt;Pop the champagne and dance, team, for we're fifth!&lt;/p&gt;
&lt;p&gt;&lt;img alt="udai_fifth" src="https://aniruddhadeb.com/articles/2022/res/udai_fifth.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Jokes aside, I'm lukewarm about the result. Proud of what a ragtag bunch of people came together and assembled in the span of around two weeks, but simultaneously disappointed for not reaching the lofty expectations we set of ourselves. Hindsight is 20/20 and often very saddening, for there is seldom joy in finding out what you couldn't see earlier.&lt;/p&gt;
&lt;p&gt;With that out of the way, let's see what hindsight has in store for us, shall we?&lt;/p&gt;
&lt;h2&gt;So What Happened?&lt;/h2&gt;
&lt;p&gt;Himadri had the incoming BSP GSec leading the team, along with two incoming chief editors and two incoming creative team members.&lt;/p&gt;
&lt;p&gt;Aravali had three chief editors leading the team, along with a very talented senior in design. One of the chief editors, a very passionate writer, wrote 90% of the magazine content on his own.&lt;/p&gt;
&lt;p&gt;Zanskar had the Web editor, along with an incumbent Creative team member and Chief Editor in their team.&lt;/p&gt;
&lt;p&gt;Kumaon? I don't know what Kumaon pulled out of the bag, but the difference between them and us wasn't much (For reference, Zanskar dominated the content scores, while Aravali dominated the design section. Himadri was balanced across both, courtesy of picking a theme and sticking to it).&lt;/p&gt;
&lt;p&gt;And then we have Udai.&lt;/p&gt;
&lt;p&gt;8 freshers and 4 second-years.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Who pulled our team to fifth place.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We also came third in design, even though Rahul stormed into my room 4 days before the deadline and said "Video games". This is the part where I say "The Rest is History", but history is written by the victors, and we're not.&lt;/p&gt;
&lt;h2&gt;What about Leadership?&lt;/h2&gt;
&lt;p&gt;Treating this experience as a chance to exercise my leadership skills is probably the right way of looking at it. While I won't pat myself on the back (there were many things that I could've done better), I think more has to be said about the entire performance framework that teams operate upon. &lt;/p&gt;
&lt;p&gt;Let's start with Culture. Yes, the buzzword that hostel reps throw around all the time to get participation. The reality of hostel culture is that similar to organizations, a few key, experienced seniors can accomplish much more and channelize much more effectively the lower, inexperienced team members' efforts. More so, these seniors are intimately involved with the club and have a say in what happens eg if deadlines need to be postponed. Having seniors in a hostel belonging to a club is vital to inculcate &lt;em&gt;culture&lt;/em&gt; for that club in that hostel. Seniors would need to evangelize and lead team efforts here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But Why?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Seniors aren't getting much out of it. If anything, Juniors and Seniors are on their way out of the institute and should focus on themselves, rather than their freshie and sophie counterparts who would be more enthusiastic about this. Unless they are in secretary/GSec positions where things would look good on their CV (and are playing the political Game of Thrones in IITD, a very taxing and time-consuming hobby for someone not looking at consulting), the only reason for them to invest the kind of effort that they're investing is purely altruistic: out of passion.&lt;/p&gt;
&lt;p&gt;Let's take the above cases: all the seniors in the winning hostel(s) either cared very deeply for their hostel and were passionate about the activity, or had some skin in the game (vested interests in obtaining a position in BSP for the upcoming term). &lt;/p&gt;
&lt;p&gt;This has a cascading effect: More skilled seniors = More skilled juniors, and more skilled juniors = a better result. Doesn't matter if you're &lt;a href="https://en.wikipedia.org/wiki/Down_Periscope"&gt;Thomas Dodge&lt;/a&gt; or if anime has made you believe &lt;em&gt;the superpower of friendship&lt;/em&gt;, unless each of your team members can get 20 illustrations done in a day in illustrator, your magazine simply won't have enough design to fill it's pages. Unless your seniors churn out ideas rapidly and have a unifying vision that the team can rally behind, your magazine will read like a patchwork quilt. &lt;/p&gt;
&lt;h2&gt;The way forward&lt;/h2&gt;
&lt;p&gt;Talking about leadership in a personal context is always a very dicey thing. I admit that in whatever capacity I led the team and in whatever role I played, I was suboptimal in some aspects and superoptimal in others. Maybe I didn't balance the scales properly. I'll admit.&lt;/p&gt;
&lt;p&gt;Looking at a silver lining, we made two teams this time: which meant that more freshers were introduced to the entire process, and &lt;strike&gt;hopefully&lt;/strike&gt; definetly from next year onwards, we'll have a stronger footing in BSP, and on a more meta-level, inculcate better leaders.&lt;/p&gt;</content><category term="General"></category><category term="Writing"></category></entry><entry><title>Introducing the MLZoo</title><link href="https://aniruddhadeb.com/articles/2022/ml-zoo.html" rel="alternate"></link><published>2022-06-16T17:00:00+05:30</published><updated>2022-06-16T17:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-06-16:/articles/2022/ml-zoo.html</id><summary type="html">&lt;p&gt;After a few days of reading and furious coding, I'm happy to announce the creation of &lt;a href="https://github.com/Aniruddha-Deb/MLZoo"&gt;MLZoo&lt;/a&gt;: a set of ML algorithms in their natural habitat&lt;/p&gt;
&lt;p&gt;MLZoo is a set of jupyter notebooks which would contain implementations of several ML algorithms on real world datasets: so far, I've implemented different …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After a few days of reading and furious coding, I'm happy to announce the creation of &lt;a href="https://github.com/Aniruddha-Deb/MLZoo"&gt;MLZoo&lt;/a&gt;: a set of ML algorithms in their natural habitat&lt;/p&gt;
&lt;p&gt;MLZoo is a set of jupyter notebooks which would contain implementations of several ML algorithms on real world datasets: so far, I've implemented different flavours of regression, and plan to add quite a few more algorithms over the summer.&lt;/p&gt;
&lt;p&gt;Do star, fork and contribute in any way possible! &lt;/p&gt;
&lt;p&gt;(Hopefully this doesn't end up like MathNotes :fingers_crossed:)&lt;/p&gt;
&lt;p&gt;NOTE: MLZoo has temporarily been taken private. This is because it overlaps with a certain course that I'm doing, and just to be on the safe side, I'll make it public once this is over.&lt;/p&gt;</content><category term="Programming"></category><category term="Python"></category><category term="ML"></category></entry><entry><title>Atomic Habits and Badminton</title><link href="https://aniruddhadeb.com/articles/2022/badminton-habits.html" rel="alternate"></link><published>2022-06-13T21:00:00+05:30</published><updated>2022-06-13T21:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-06-13:/articles/2022/badminton-habits.html</id><summary type="html">&lt;p&gt;Atomic Habits probably needs no introduction, and neither will I bore you with one. All I'll say is that I found a friend in hostel with a copy of the book, and when I went home, I found a physical copy on my Dad's bookshelf (all of us have kindles …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Atomic Habits probably needs no introduction, and neither will I bore you with one. All I'll say is that I found a friend in hostel with a copy of the book, and when I went home, I found a physical copy on my Dad's bookshelf (all of us have kindles, and only buy hardcopies of books that we really want a hardcopy of). &lt;/p&gt;
&lt;h2&gt;So What's the fuss about&lt;/h2&gt;
&lt;p&gt;Like it's predecessors, Atomic Habits preaches more of the same old myelination tricks&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don't break the chain&lt;/li&gt;
&lt;li&gt;Condition your environment to make habits you want to adopt easier and those you want to drop harder&lt;/li&gt;
&lt;li&gt;Systems produce results, not goals&lt;/li&gt;
&lt;li&gt;Join groups of people doing the same activity if you want to pick it up, and support systems if you want to drop something eg alcoholics anonymous etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What sets it apart then? Personally, there are a couple of things that were truly new ideas&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Habit Scorecard&lt;/strong&gt;: A Habit scorecard is a list of all your daily actions, scored as constructive, neutral or destructive depending on how they influence your life in the long term. Going through the exercise of making a habit scorecard and then rating it showed me a lot of things about my life that I probably shouldn't be pursuing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dopamine&lt;/strong&gt;: The dopamine explanation is probably not new and might be found in the recesses of some medical journal, but props to James for making it Clear. TL;DR &lt;em&gt;Dopamine spikes in anticipation of an activity, and not as a consequence of the activity itself&lt;/em&gt;. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Layers of Behaviour Change&lt;/strong&gt;: Behaviour change happens at three layers: changing outcomes, processes and identity. It's easiest to change outcomes, but hardest to change identity. However, changing our identity will probably have the most impact. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Habit Loops&lt;/strong&gt;: I learnt about habit loops in Hooked by Nir Eyal, but here's a refreshing take on the other side of the coin: While Hooked focused on how to inculcate habits in others for using your products, Atomic Habits focuses on how to exploit the dynamics of the habit loop to make and break habits. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A Habit loop goes from Cue -&amp;gt; Craving -&amp;gt; Response -&amp;gt; Reward. Traversing this loop multiple times creates an association between Cue and Reward. Therefore, to break a habit, we can&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Remove the cues: environmental conditioning, etc&lt;/li&gt;
&lt;li&gt;Reprogram the Cue to a different activity, one with lower reward&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The main gist of atomic habits is that small habits are what shape large outcomes, and focusing on marginal improvements on these small habits will cascade to have large effects, kind of like &lt;a href="https://hbr.org/2015/10/how-1-performance-improvements-led-to-olympic-gold"&gt;The British Cycling Team&lt;/a&gt; did.&lt;/p&gt;
&lt;h2&gt;Badminton and Non-Atomic Habit Building&lt;/h2&gt;
&lt;p&gt;On another line, I picked up badminton this week. This has definetly been a &lt;em&gt;molecular&lt;/em&gt;, maybe even a &lt;em&gt;complex&lt;/em&gt; habit compared to the &lt;em&gt;atomic&lt;/em&gt; habits James focuses on (see what I did there :)). Overall, I've been playing everyday for over a month (except one sunday when my hip was injured), this form of habit building is a very different flavour compared to what atomic habits preaches&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There was no &lt;em&gt;system&lt;/em&gt; in place: I'd go, play, and focus on playing better than before&lt;/li&gt;
&lt;li&gt;It felt great actually exerting my body for a change, and there was dopamine as a result of playing rather than just imagining&lt;/li&gt;
&lt;li&gt;There was no Cue, or rather, most of the times, I was the one generating the cue for my group to come play.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've probably not done justice to explaining how I built this, but the only way of building habits doesn't have to be marking crosses on a grid everyday (although I do that with badminton, how hypocritical of me). Habits are not always things we do everyday, but rather predictable ways we act in over a period of time. &lt;/p&gt;
&lt;p&gt;Here's to more habit-building over the coming days!&lt;/p&gt;</content><category term="Writing"></category><category term="Writing"></category><category term="Badminton"></category></entry><entry><title>Of Knights and Knaves</title><link href="https://aniruddhadeb.com/articles/2022/knights-and-knaves.html" rel="alternate"></link><published>2022-06-01T21:15:00+05:30</published><updated>2022-06-01T21:15:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-06-01:/articles/2022/knights-and-knaves.html</id><summary type="html">&lt;p&gt;Once every year, when the sun beats down&lt;br&gt;
Students here become clowns&lt;br&gt;
They think on their command, people will fall&lt;br&gt;
But truly, they're just bricks in the wall&lt;br&gt;
Misled by the mirage of power&lt;br&gt;
Led astray till they flounder&lt;br&gt;
"You're barely 20! What do you think will change&lt;br&gt;
When you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Once every year, when the sun beats down&lt;br&gt;
Students here become clowns&lt;br&gt;
They think on their command, people will fall&lt;br&gt;
But truly, they're just bricks in the wall&lt;br&gt;
Misled by the mirage of power&lt;br&gt;
Led astray till they flounder&lt;br&gt;
"You're barely 20! What do you think will change&lt;br&gt;
When you become Secretary, like others who've aged"&lt;br&gt;
"I'll tell you! Here's my manifesto:&lt;br&gt;
It says I'm great with a budget&lt;br&gt;
I'm smart, hardworking, and totally not a puppet&lt;br&gt;
I'm doing this for the Club, and not for my CV&lt;br&gt;
And totally not for my hostel, for them to gain glory&lt;br&gt;
I'm sure that ethics is slang for pathetics&lt;br&gt;
And morals? What are those? Are they smaller morsels?&lt;br&gt;
Who cares. Vote for me. Actually, it doesn't matter&lt;br&gt;
I'll just call all our trusty gangsters"&lt;br&gt;
And so the saga repeats: year on year&lt;br&gt;
Bridges broken, Friendships disappear&lt;br&gt;
Why is it so? Are we really so blinded&lt;br&gt;
To throw our mental health under the belt and be grinded?&lt;br&gt;
All I know is that I graduate in two years&lt;br&gt;
And people I know are unscruplous beyond my worst fears.  &lt;/p&gt;</content><category term="Writing"></category><category term="Writing"></category></entry><entry><title>Freedom, Recaptured.</title><link href="https://aniruddhadeb.com/articles/2022/freedom.html" rel="alternate"></link><published>2022-05-30T17:10:00+05:30</published><updated>2022-05-30T17:10:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-05-30:/articles/2022/freedom.html</id><summary type="html">&lt;p&gt;With the creation of my &lt;a href="https://www.cse.iitd.ac.in/~cs1200869"&gt;official website&lt;/a&gt; (safari butchers the CSS :/), I've now got more creative liberty and artistic freedom on the content I post here. &lt;/p&gt;
&lt;p&gt;When I first made this blog, it used to be my own little corner of the internet. That changed once more people got to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;With the creation of my &lt;a href="https://www.cse.iitd.ac.in/~cs1200869"&gt;official website&lt;/a&gt; (safari butchers the CSS :/), I've now got more creative liberty and artistic freedom on the content I post here. &lt;/p&gt;
&lt;p&gt;When I first made this blog, it used to be my own little corner of the internet. That changed once more people got to know about it, and I subconsciously put more pressure on myself to keep a strong technical background to whatever I post. The problem with this approach is that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Articles take time! Writing theoretical deep dives often needs me to completely revisit whatever I studied, and they take upwards of a day or two to draft, edit, proofread and publish. &lt;/li&gt;
&lt;li&gt;All work and no play makes Jack a dull boy! There's very little stuff here that's an easy read: all I mostly post are either 300-word math articles or 3000-word short stories now. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Back in the older days, when I blogged on blogspot, I'd often get 0 views on a lot of articles. Zero! That was ok, as it felt like I blogged for myself and that whatever I said had minimal repercussions, but with this website, it feels a bit different. Self-imposed straitjacket, I'm aware, but hopefully the official website takes that pressure away now, and I can get back to posting more frequently.&lt;/p&gt;
&lt;p&gt;Here's to more interesting reads this year!&lt;/p&gt;</content><category term="General"></category><category term="General"></category></entry><entry><title>Data Wrangling in Practice: Dataset Creation from Poorly Structured Sources</title><link href="https://aniruddhadeb.com/articles/2022/iit-course-planner-1.html" rel="alternate"></link><published>2022-03-02T01:36:00+05:30</published><updated>2022-03-02T01:36:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2022-03-02:/articles/2022/iit-course-planner-1.html</id><summary type="html">&lt;p&gt;I seldom get time to do anything other than course related activities nowadays, but in this midsem break, I did nothing other than roam around campus and laze in bed. And publish the first release of the &lt;a href="https://kaggle.com/aniruddhadeb/iitd-course-data"&gt;IIT Delhi Course Planner Dataset&lt;/a&gt; (Also available on &lt;a href="https://github.com/Aniruddha-Deb/IIT_course_planner"&gt;GitHub&lt;/a&gt;). This is a scraping …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I seldom get time to do anything other than course related activities nowadays, but in this midsem break, I did nothing other than roam around campus and laze in bed. And publish the first release of the &lt;a href="https://kaggle.com/aniruddhadeb/iitd-course-data"&gt;IIT Delhi Course Planner Dataset&lt;/a&gt; (Also available on &lt;a href="https://github.com/Aniruddha-Deb/IIT_course_planner"&gt;GitHub&lt;/a&gt;). This is a scraping of the &lt;a href="https://home.iitd.ac.in/uploads/Courses-of-Study_2020-2021.pdf"&gt;IIT Delhi Courses of Study 2020-21&lt;/a&gt;, a behemoth 373-page PDF, which contains the course structure and information of all the Undergraduate and Postgraduate courses offered at IIT Delhi, and then some more. In this article, I show how I went from an inaccessible PDF to a set of nicely formatted XML/CSV datasets that anyone can use to do course analysis on the courses at offer here.&lt;/p&gt;
&lt;h2&gt;Context (for those not at/from/new to IITD)&lt;/h2&gt;
&lt;p&gt;The Academic System at IITD is pretty similar to those followed in other IIT's (except Kanpur): grading is done on a grade point system (10 for an A, 9 for an A- and so on), and your CGPA (Cumulative Grade Point Average) is the average of all your grades across all your courses you have taken up to that point. &lt;/p&gt;
&lt;p&gt;Coming to Programmes: there are 13 Undergraduate Degree Programmes on offer at IIT Delhi (14 if you count Energy Engineering, introduced this year) which span four years and eight semesters, and 3 Dual Degree Programmes (Bachelors and Masters combined), which span 5 years and 10 semesters. Programmes are denoted by a two-letter code representing the departments offering the course, and a number representing the type of course (eg CS1 is B.Tech in Computer Science and Engineering (4y), CS5 is Dual Degree (B.Tech + M.Tech) in Computer Science and Engineering (5y)). Most 4 year degrees are suffixed with 1 (notable exceptions ME2 and EE3, because ME1 and EE1 are already offered by the departments), and the dual degree programmes are CS5, MT6 and CH7 (all greater than or equal to 5).&lt;/p&gt;
&lt;p&gt;Each programme has a number of courses that you NEED to do to graduate: these are referred to as your core courses. They're divided into two: institute core and department core. Institute core is a common set of courses people from every department do, mostly in their first year (exception CVL100 and SBL100), and department core is what makes up the bulk of the remaining three (two?) years of your degree. The rest of your degree is comprised of Humanities and Social Sciences (yes, sad), which you need to do 15 credits worth, and Electives, both departmental (picking electives from your department), and open (picking electives from any department&lt;sup&gt;2&lt;/sup&gt;). If you're in a Dual Degree, your M.Tech degree would have it's own program core (some extra high-level courses and a M.Tech Project) and program electives.&lt;/p&gt;
&lt;p&gt;Here's a relevant snap from the Courses of Study (henceforth referred to as CoS), showing how the courses shape up for MT1 (B.Tech in Mathematics and Computing) and MT6 (Dual Degree in Mathematics and Computing)&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img src="res/creds_mt1.png" style="width: 45%; vertical-align: text-top;"&gt;&lt;/img&gt;
&lt;img src="res/creds_mt6.png" style="width: 45%; vertical-align: text-top;"&gt;&lt;/img&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;We'll be using these abbreviations very commonly across the article (&lt;code&gt;bs&lt;/code&gt;,&lt;code&gt;eas&lt;/code&gt;,&lt;code&gt;huss&lt;/code&gt;,&lt;code&gt;dc&lt;/code&gt;,&lt;code&gt;de&lt;/code&gt;,&lt;code&gt;oc&lt;/code&gt;,&lt;code&gt;pc&lt;/code&gt;,&lt;code&gt;pe&lt;/code&gt;), so this is a good point to mark and come back to. If a lot of this is still unclear, the CoS makes it much clearer than I do. Do give the first few pages of it a read. It's not as boring as expected. Promise. &lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;I've wanted to do this from a long time, but never had the expertise or the effort to see this through. I've had some experience scraping PDF-Tabulated data using Tabula (my &lt;a href="https://www.kaggle.com/aniruddhadeb/jee-2019-data"&gt;JEE 2019 dataset&lt;/a&gt;), but never really gotten farther and analysed the data&lt;sup&gt;1&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The first course of action was to scrape as many courses out as I could from CoS, because that contains course overlap/prerequisite information. The general course description across departments is given from page 156 onwards of CoS, and the way of scraping this was interesting: since the data was unstructured, all I did was copy and paste all the text into sublime text, then use macros to filter out the data and get it into a nice XML format. This took me around two-three hours. I was then able to parse it down using BeautifulSoup into a pandas dataframe, so mission accomplished there. The schema is pretty simple, and here's an example of what a course looks like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;course&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;APL100&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Engineering&lt;span class="w"&gt; &lt;/span&gt;Mechanics&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;credits&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/credits&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;credit-structure&amp;gt;&lt;/span&gt;3-1-0&lt;span class="nt"&gt;&amp;lt;/credit-structure&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Kinematics,&lt;span class="w"&gt; &lt;/span&gt;Statics,&lt;span class="w"&gt; &lt;/span&gt;Equations&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;Motion,&lt;span class="w"&gt; &lt;/span&gt;Rigid&lt;span class="w"&gt; &lt;/span&gt;body&lt;span class="w"&gt; &lt;/span&gt;dynamics,&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;Introduction&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;variational&lt;span class="w"&gt; &lt;/span&gt;mechanics.&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/course&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A question asked here: &lt;strong&gt;Why XML?&lt;/strong&gt; The major reason is that JSON does not play well with newlines, and a lot of the course descriptions had newline characters in them, and I didn't want to go through the mess of cleaning all that up, hence XML. I get that if I just wanted some lists and objects, I should have gone with JSON, but XML being tag-based is very easy to write using sublime multicursor, and also very forgiving with parsers like BeautifulSoup, allowing for messy data to exist and not outright breaking the parser.&lt;/p&gt;
&lt;p&gt;This dataset is what is currently used in &lt;a href="https://github.com/as1605/IITD-Bot"&gt;IITD-Bot's &lt;code&gt;info&lt;/code&gt; command&lt;/a&gt;, and it's nice to see it being used on the server :) &lt;/p&gt;
&lt;h2&gt;The Trickier Bits&lt;/h2&gt;
&lt;p&gt;We now come to the problem of scraping and formatting the individual course plans themselves: &lt;a href="https://tabula.technology/"&gt;Tabula&lt;/a&gt; (specifically &lt;a href="https://tabula-py.readthedocs.io/en/latest/"&gt;TabulaPy&lt;/a&gt;) is the best fit for stuff like this, but the problem here is that &lt;strong&gt;The table boundaries and dimensions across courses are not the same!&lt;/strong&gt; Here's an example, showing two programmes overlapping each other and how the content dimensions/boundaries are not the same across programmes (CS1 and MT1)&lt;/p&gt;
&lt;p&gt;&lt;img alt="CS1xMT1" src="res/overlap_cs1_mt1.png"&gt;&lt;/p&gt;
&lt;p&gt;Even for courses where there is significant overlap, the structures need not be same (consider EE1 and MT1, the first section lines up perfectly, but further sections are a mess: EE1 ends in half the page, while MT fills it up with it's electives)&lt;/p&gt;
&lt;p&gt;&lt;img alt="MT1xEE1" src="res/overlap_mt1_ee1.png"&gt;&lt;/p&gt;
&lt;p&gt;Another issue was that as previously mentioned, Dual Degree course structures have two parts to them: a B.Tech part and an M.Tech part, and scraping them along with the Bachelor degrees would lead to major issues &lt;/p&gt;
&lt;p&gt;&lt;img alt="CS5 example" src="res/cs5.png"&gt;&lt;/p&gt;
&lt;p&gt;As a result, the best option I could come up with was to simply use some python code to generate most of the course structure. The Institute core is common across all courses: the only things that change across courses are PL,DC,DE,credit structure and recommended structure. Out of these, credit structure and recommended structure can be scraped without much pain. PL,DC,DE need to be manually scraped using good 'ol &lt;code&gt;Cmd-C Cmd-V&lt;/code&gt; and edited and pasted using sublime text (multi cursors ftw here). I couldn't come up with a faster way than this due to the nonuniformity of the structure across pages, but it works.&lt;/p&gt;
&lt;p&gt;For dual degrees, I simply duplicated the corresponding single degree and used some helper code to generate the recommended structure, pasted that in and entered the rest using the same sublime ninja techniques as before&lt;/p&gt;
&lt;h2&gt;Course-Sem Mapping and Anonymizing Data&lt;/h2&gt;
&lt;p&gt;While we have the dependencies in place, the last piece of the puzzle is avoiding conflicts while scheduling courses. For this, we need to ask the following two questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is a particular course available in a particular semester?&lt;/li&gt;
&lt;li&gt;If it is, which slot is the course available in?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Answering these two will take us towards a validity checking algorithm for a given course structure. By course structure, we mean an arrangement of courses of the programme in semesters. A valid course structure is one that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Has no course taken whose prerequisites are not satisfied &lt;/li&gt;
&lt;li&gt;Has no course taken in a semester where it is not offered&lt;/li&gt;
&lt;li&gt;Has no course clashing with another course i.e. occuring in the same slot in the same semester as the other course&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For this, we need course slotting and semester data, which the courses of study does not offer. We turn to the eacademics portal of IIT Delhi, which offers a list of courses offered in a given semester, which contains slotting data. While the raw courses offered list can be downloaded in a variety of formats, it needs a &lt;em&gt;lot&lt;/em&gt; of preprocessing to get it fixed. So far, the best option is to download it in xlsx, use a python xlsx library to delete all the extraneous columns in the file and then save it as a CSV. &lt;/p&gt;
&lt;p&gt;We now come to the concern of Privacy. The course list has the names and email addresses of the professors offering the course, and making that data public is not something I should do. As a result, before making the dataset public, the professor data needs to be anonymized. I used faker for this, but was unhappy with how the emails and names don't quite correlate with each other, even while making user profiles. There may be two professors having the same name (eg &lt;a href="https://web.iitd.ac.in/~abhishek.dixit/home.html"&gt;here&lt;/a&gt; and &lt;a href="https://web.iitd.ac.in/~adixit/"&gt;here&lt;/a&gt;), so the key trick is to use the email address prefix, also called the kerberos ID (&lt;code&gt;&amp;lt;id&amp;gt;@&amp;lt;department&amp;gt;.iitd.ac.in&lt;/code&gt;), which is guaranteed to be unique. Once this is done, retain the mapping across sheets and also save a copy of the mapping as a csv (in a private place) so that we can dereference the professors if needed.&lt;/p&gt;
&lt;h2&gt;Final Analysis and Dependency Graph Generation&lt;/h2&gt;
&lt;p&gt;We are now ready to combine the course-offered slotting, the courses of study data (gives us prerequisites), and the course structure (gives us the courses to consider), and create a basic dependency graph.&lt;/p&gt;
&lt;p&gt;The first order of action is to load the CoS course data into XML, and generate a few extra colums so that we know which semster the course is offered in (here, a 3 implies offered in both semesters, a 2 in the even semester only, and a 1 in the odd semester only. 0 implies that it was not offered in either semster in this academic year)&lt;/p&gt;
&lt;p&gt;&lt;img alt="sems" src="res/cos_df_head.png"&gt;&lt;/p&gt;
&lt;p&gt;After this, we read in the course dependency XML files, and generate the dependency graphs using NetworkX and the data in the course dataframe. A generic NetworkX graph does not space the nodes out properly, which is why we use NetworkX and pydot (a python GraphViz API) to generate the final PNG files. The final result, is indeed quite pretty&lt;/p&gt;
&lt;p&gt;&lt;img alt="CS1" src="res/graphs/CS1.png"&gt;&lt;/p&gt;
&lt;h2&gt;What Next?&lt;/h2&gt;
&lt;p&gt;Right now, there are two major gripes relating to conditional support:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Handling complex conditionals for courses&lt;/strong&gt;: The CS1 course structure is a perfect example of this. One can choose either COL333/COL362 in their core, and the other as department elective. We need a way of representing this in the graph, as well as in the XML (what I had in mind was to use an &lt;code&gt;&amp;lt;or&amp;gt;...&amp;lt;/or&amp;gt;&lt;/code&gt; tag, this would work in any setting, and using dotted lines in the graph). The or tag would also be used in the CS1 PL courses (one of MTL103/4/5), because at the moment, the graph shows all three of them as requisite. There are a few other conditionals for CS1 regarding Minor, but we'll get to that later&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conditional expressions&lt;/strong&gt;: Prerequisites often have conditionals such as "ABC123 and any one of BCD142/BCD143/BCD144" or in the case of HUL courses, the condition is "Any two courses from HUL2XX category". Handling conditionals like this both in the dataset as well as in the resulting graph (using dotted arrows or other means) needs to be worked on.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The dataset also doesn't cover all facets of the courses of study:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Minor Dataset Addition&lt;/strong&gt;: Datasets for minors/department specializations need to be added&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Energy Sciences&lt;/strong&gt;: ES1 course data needs to be added. Would be easily fixed by shifting to CoS 21-22 but I'm not sure how many things that would break in the PDF scraping section&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I've hardly mentioned the problems in the existing dataset: there are still a lot of broken tags in the courses XML dataset that need to be ironed out, and not to mention the bugs that exist in the CoS itself (MT1 courses don't sum up to 63.5 credits because some 700 level courses mentioned in the schedule but not in text are missing, and these courses also don't have a description of their content or prerequisites anywhere in CoS).&lt;/p&gt;
&lt;p&gt;The good thing about stating problems out here is &lt;em&gt;We Need Contributors!&lt;/em&gt; If you think you can make a change and help fix those bugs, or even go ahead and do something completely different with all the useful data here, do fork the &lt;a href="https://github.com/Aniruddha-Deb/IIT_course_planner.git"&gt;GitHub Repo&lt;/a&gt; and submit a PR for your fixes.&lt;/p&gt;
&lt;p&gt;I will keep making more blogs as I (or others) continute to contribute and work towards making a concrete portal out of this. Let's see where this journey leads!&lt;/p&gt;
&lt;h2&gt;Appendix: Course Dependency Graphs&lt;/h2&gt;
&lt;p&gt;(Orange =&amp;gt; offered in both sems, green =&amp;gt; even sem only, blue =&amp;gt; odd sem only, gray =&amp;gt; no sem slotting info available)&lt;/p&gt;
&lt;p&gt;AM1: &lt;img alt="AM1" src="res/graphs/AM1.png"&gt;&lt;/p&gt;
&lt;p&gt;BB1: &lt;img alt="BB1" src="res/graphs/BB1.png"&gt;&lt;/p&gt;
&lt;p&gt;CE1: &lt;img alt="CE1" src="res/graphs/CE1.png"&gt;&lt;/p&gt;
&lt;p&gt;CH1: &lt;img alt="CH1" src="res/graphs/CH1.png"&gt;&lt;/p&gt;
&lt;p&gt;CH7: &lt;img alt="CH7" src="res/graphs/CH7.png"&gt;&lt;/p&gt;
&lt;p&gt;CS1: &lt;img alt="CS1" src="res/graphs/CS1.png"&gt;&lt;/p&gt;
&lt;p&gt;CS5: &lt;img alt="CS5" src="res/graphs/CS5.png"&gt;&lt;/p&gt;
&lt;p&gt;EE1: &lt;img alt="EE1" src="res/graphs/EE1.png"&gt;&lt;/p&gt;
&lt;p&gt;EE3: &lt;img alt="EE3" src="res/graphs/EE3.png"&gt;&lt;/p&gt;
&lt;p&gt;ME1: &lt;img alt="ME1" src="res/graphs/ME1.png"&gt;&lt;/p&gt;
&lt;p&gt;ME2: &lt;img alt="ME2" src="res/graphs/ME2.png"&gt;&lt;/p&gt;
&lt;p&gt;MS1: &lt;img alt="MS1" src="res/graphs/MS1.png"&gt;&lt;/p&gt;
&lt;p&gt;MT1: &lt;img alt="MT1" src="res/graphs/MT1.png"&gt;&lt;/p&gt;
&lt;p&gt;MT6: &lt;img alt="MT6" src="res/graphs/MT6.png"&gt;&lt;/p&gt;
&lt;p&gt;PH1: &lt;img alt="PH1" src="res/graphs/PH1.png"&gt;&lt;/p&gt;
&lt;p&gt;TT1: &lt;img alt="TT1" src="res/graphs/TT1.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;This is Part 1 of a series documenting the development of IIT Course Planner: a set of tools and utilities to help plan your course at IIT Delhi&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;The analysis I had in mind was to make a ranking of the various departments on offer, then use a standard matching algorithm to match users to departments (basically offer the highest-ranked course available to the user). The simpler first idea was to use a multiparametric regression model to fit ranks to courses. Neither of these ideas flew, because a) &lt;a href="https://arxiv.org/pdf/1904.06698.pdf"&gt;The JoSAA allocation algorithm is amazingly sophisticated&lt;/a&gt;, and b) the data does not map sex/caste to roll number, which would break any regression/ranking model I could think of. Still looking for a clever workaround for this one.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt;Most people use this to boost their CGPA &lt;sub&gt;coughs in RDL,ASL and MSL&lt;/sub&gt;.Welp, gotta keep that boat afloat, or rather &lt;em&gt;satti nahi thukni chahiye&lt;/em&gt;.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Data"></category></entry><entry><title>A Note on Conditional Probability</title><link href="https://aniruddhadeb.com/articles/2021/note-on-conditional-probability.html" rel="alternate"></link><published>2021-12-25T15:20:00+05:30</published><updated>2021-12-25T15:20:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2021-12-25:/articles/2021/note-on-conditional-probability.html</id><summary type="html">&lt;p&gt;$\newcommand{\cE}[2]{\mathbf{E}(#1\ |\ #2)}$$\newcommand{\cP}[2]{\mathbf{P}(#1\ |\ #2)}$$\renewcommand{\P}[1]{\mathbf{P}(#1)}$$\newcommand{\E}[1]{\mathbf{E}(#1)}$$\newcommand{\F}{\mathcal{F}}$$\newcommand{\G}{\mathcal{G}}$$\newcommand{\ind}[1]{\mathbf{1}_{#1}}$
To motivate this note, I’ll pose the following …&lt;/p&gt;</summary><content type="html">&lt;p&gt;$\newcommand{\cE}[2]{\mathbf{E}(#1\ |\ #2)}$$\newcommand{\cP}[2]{\mathbf{P}(#1\ |\ #2)}$$\renewcommand{\P}[1]{\mathbf{P}(#1)}$$\newcommand{\E}[1]{\mathbf{E}(#1)}$$\newcommand{\F}{\mathcal{F}}$$\newcommand{\G}{\mathcal{G}}$$\newcommand{\ind}[1]{\mathbf{1}_{#1}}$
To motivate this note, I’ll pose the following problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Consider $X \sim \text{Uniform}([0,1])$. What is $\cP{X &amp;gt; \frac{1}{2}}{X \in \mathbb{Q}}$ ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At first glance, the answer seems simple: it’s 1/2! Closer inspection reveals that the event $X \in \mathbb{Q}$ is not measurable: the rationals have measure zero, hence from our high-school (perhaps even undergraduate) definition of conditional probability, the given probability should be undefined. However, the conditional probability does exist, and it equals 1/2.&lt;/p&gt;
&lt;h2&gt;Redefining Conditional Probability&lt;/h2&gt;
&lt;p&gt;To account for events of measure zero, we must first redefine $\cP{A}{B}$. So far, we've defined this as $\cP{A}{B} = \P{A \cap B}\ /\ \P{B}$, $\P{B} \ne 0$. We overcome the case where $\P{B} = 0$ by defining &lt;strong&gt;conditional probability as a random variable that satisfies some properties&lt;/strong&gt;. The intuition behind this is that if the conditional probability doesn't exist by the previous definition, we can use expectation to say that it 'might' exist and be equal to some expected value. This also nicely sets us up for conditional expectation and variance, and the law of total expectation and law of total variance. Before formally defining conditional probability, Recall the following definitions first:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: A Sub-$\sigma$ algebra of $\F$ is a $\sigma$ algebra $\G$ such that $\G \subset \F$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: A Measurable Function $f: (X,\Sigma) \to (Y,\Gamma)$ between two measurable spaces is a function such that for every $E \in \Gamma$, $\{x \in X\ |\ f(x) \in E\} \in \Sigma$. If $(Y, \Gamma) = (\mathbb{R}, \mathcal{B}(\mathbb{R}))$, then $f$ is said to be $\Sigma$-measurable&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: The $\sigma$-algebra generated by a function $f: (X,\Sigma) \to (Y, \Gamma)$ is the collection of all inverse images $f^{-1}(S),\ S \in \Gamma$. 
$$\sigma(f) := \{ f^{-1}(S) : S \in \Gamma \}$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With these three definitions, we define the conditional probability function on a sub-$\sigma$ algebra $\G$ as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: The conditional probability $\cP{\cdot}{\G}$ is a $\G$-measurable random variable such that $$\E{\cP{A}{\G}\ind{G}} = \P{A \cap G} \quad \forall\ G \in \G$$ In terms of integrals, we can rewrite this as $$\int_G \cP{A}{\G} d\mathbf{P} = \P{A \cap G}$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Defining the conditioning on a sub-$\sigma$ algebra rather than an event or another random variable has the following benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If we want to condition on a random variable $X$, then $\G = \sigma(X)$&lt;/li&gt;
&lt;li&gt;If we want to condition on multiple random variables $X_1, X_2, \ldots$, then $\G = \sigma(X_1, X_2, \ldots)$ where $\sigma(X_1, X_2) = \{ \{X_1 \le a\} \cap \{X_2 \le b\}\ |\ a,b \in \mathbb{R}\}$ (can be extended to a countable sequence of random variables)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, this definition of conditional probability is the most general definition.&lt;/p&gt;
&lt;h2&gt;Existence and Uniqueness of Conditional Probability&lt;/h2&gt;
&lt;p&gt;From the integral definition, it may be obvious that &lt;strong&gt;conditional probability is unique up to a set of measure zero&lt;/strong&gt;, that is, if $\P{A} = 0$, then $\cP{A}{\G}$ can take any value. This leads to the problem of &lt;em&gt;regularized conditional probability&lt;/em&gt;. Essentially, we define values for sets whose measure is zero such that the resulting conditional probability function is 'nice', ie measurable. This would need us to set up constructs such as a &lt;a href="https://en.wikipedia.org/wiki/Radon_space"&gt;Polish Space&lt;/a&gt; and then use some functional analysis results, but we'll not get into that in this article.&lt;/p&gt;
&lt;p&gt;Existence can be proved in many ways: here, we use the Radon-Nikodym theorem. I won't be proving the theorem, but I'll quote it, along with some exposition, which should be sufficient.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: A measure $\mu$ is said to be &lt;em&gt;absolutely continuous&lt;/em&gt; with respect to another measure $\lambda$ (both defined on the same $\sigma$-algebra) if for every measurable set $A$, $\lambda(A) = 0 \implies \mu(A) = 0$. We denote this as $\mu \ll \lambda$, and we say that $\lambda$ &lt;em&gt;dominates&lt;/em&gt; $\mu$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem (Radon-Nikodym):&lt;/strong&gt; if $\mu$ and $\lambda$ are defined on $(X,\Sigma)$ such that $mu \ll \lambda$, then there exists a $\Sigma$-measurable function $f$ such that for any $A \in \Sigma$, $$\mu(A) = \int_A f\ d\lambda$$
The function $f$ is called the &lt;em&gt;radon-nikodym&lt;/em&gt; derivative of $\mu$ and is denoted as $d\mu/d\lambda$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We now prove our claim&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Claim:&lt;/strong&gt; $\cP{A}{\G}$ exists and is unique upto a set of probability 0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Proof:&lt;/strong&gt; Define $\cP{A}{\G}$ to simply be $d\nu/d\mathbf{P}_\G$, where $\mathbf{P}_\G$ is simply $\mathbf{P}$ restricted to $\G$, and $$\nu(E) = \P{A \cap E}$$ Note $\nu \ll \mathbf{P}_\G$ and by the radon-nikodym theorem, $\cP{A}{\G}$ exists and is unique upto a set of probability 0. Note that defining $\cP{A}{\G}$ like so also takes care of the definition, as $$\E{\cP{A}{\G}\ind{G}} = \int_G \frac{d\nu}{d\mathbf{P}_\G}\ d\mathbf{P}_\G = \nu(G) = \P{A \cap G}$$&lt;/p&gt;
&lt;h2&gt;Conditional Expectation, and deriving Conditional Probability from Conditional Expectation&lt;/h2&gt;
&lt;p&gt;Conditional expectation is defined in much the same way: as a random variable satisfying the property $\E{\cE{Y}{\G}\ind{G}} = \E{Y \ind{G}}$. In a handwavy sense, conditional expectation is 'the best approximation' of the specified quantity, given the information we have from $\G$. There's a very nice functional analysis proof of this which treats random variables as vectors in a functional space and then approximates them using expectation, but I'll leave that out for now.&lt;/p&gt;
&lt;p&gt;Most of the same properties as conditional probability apply to conditional expectation as well, just that in the proof of existence, since expectation can be negative and we need a positive value for it to be a measure, we define $\cE{A}{\G}$ as $d\E{A^+ \ind{G}}/d\mathbf{P}_\G - d\E{A^- \ind{G}}/d\mathbf{P}_\G$ and proceed similarly. &lt;/p&gt;
&lt;p&gt;In several textbooks, conditional expectation is derived first, and conditional probability follows. This is because $\cP{A}{\G} = \cE{\ind{A}}{\G}$. Also, a neat proof involving functional analysis is used to prove the existence of conditional expectation: $\cE{Y}{\G}$ is the orthogonal projection of $Y$ onto the closed subspace $\mathbb{L}^2(\G)$, and from results about hilbert space, we can prove this.&lt;/p&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Now that we have this definition, how do we apply it? Sadly, we can't directly obtain the conditional probability from it (unless we evaluate the radon-nikodym derivative), and the best we can do is assume that the conditional probability is a reasonable random variable, and then verify that it satisfies the definition.&lt;/p&gt;
&lt;p&gt;For the given problem, $\G = \sigma(\mathbb{Q})$. This is because for $\cP{\{X &amp;gt; x\}}{\G}$ to be $\G$-measurable, $G$ must have all the information we're given, namely whether $X$ is rational or not, hence the specification of the sub-$\sigma$ algebra as mentioned. You can also think of it from the best approximation perspective: we're only given information about whether X is rational or not and about X's magnitude, and both those quantities are expressed in this sub-$\sigma$ algebra. Now, let $\cP{\{X &amp;gt; x\}}{\G} = 1-x$. This is $\G$-measurable (the preimage of any borel set lies in $\G$). Verifying the two integrals gives us
$$\begin{align}
\P{\{X &amp;gt; x\} \cup G} &amp;amp;= \int_G \int_x^1 1\ d\mathbf{P}\ d\mathbf{P_0}\\
&amp;amp;= \int_G 1-x\ d\mathbf{P_0}
\end{align}$$
$$\E{\cP{\{X &amp;gt; x\}}{\G}\ind{G}} = \int_G 1-x\ d\mathbf{P_0}$$
Since both these integrals are equal for all $G \in \G$, we have $\cP{X &amp;gt; \frac{1}{2}}{X \in \mathbb{Q}} = 1/2$.&lt;/p&gt;
&lt;h3&gt;References:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Rosenthal, Jeffrey S. &lt;em&gt;A First Look at Rigorous Probability Theory&lt;/em&gt;. 2nd ed, World Scientific, 2006.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://math.stackexchange.com/questions/2306986/uniqueness-of-conditional-expectation"&gt;https://math.stackexchange.com/questions/2306986/uniqueness-of-conditional-expectation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stats.stackexchange.com/questions/395310/what-does-conditioning-on-a-random-variable-mean"&gt;https://stats.stackexchange.com/questions/395310/what-does-conditioning-on-a-random-variable-mean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stat.berkeley.edu/users/pitman/s205f02/lecture15.pdf"&gt;https://www.stat.berkeley.edu/users/pitman/s205f02/lecture15.pdf&lt;/a&gt; (this contains the projection proof)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.stat.cmu.edu/~arinaldo/Teaching/36752/S18/Notes/lec_notes_6.pdf"&gt;http://www.stat.cmu.edu/~arinaldo/Teaching/36752/S18/Notes/lec_notes_6.pdf&lt;/a&gt; (this too has the projection proof)&lt;/li&gt;
&lt;li&gt;Billingsley, Patrick. Probability and Measure. 3rd ed, Wiley, 1995.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;PS&lt;/h3&gt;
&lt;p&gt;Merry christmas to you if you're reading this! A junior emailed me a while back, stating that he read my blog and couldn't grasp at times why there are &lt;em&gt;random mathematical stuffs&lt;/em&gt;. In my reply, the blog was supposed to be a math/programming blog with the occasional &lt;em&gt;random personal stuff&lt;/em&gt;, but the tables seem to have turned :P&lt;/p&gt;
&lt;p&gt;I think a good new year's resolution would be to learn one new math topic every week and then blog about it. Technical blogging as of now takes a lot of time for me (this article took the good part of a day), and I think as I write and learn more, that time should go down. &lt;/p&gt;
&lt;p&gt;Here's to a more mathematical 2022!&lt;/p&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category></entry><entry><title>A Note on Random Variables</title><link href="https://aniruddhadeb.com/articles/2021/note-on-random-variables.html" rel="alternate"></link><published>2021-12-03T21:00:00+05:30</published><updated>2021-12-03T21:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2021-12-03:/articles/2021/note-on-random-variables.html</id><summary type="html">&lt;p&gt;$\newcommand{\triple}{(\Omega, \mathcal{F}, \mathbf{P})}$$\newcommand{\P}{\mathbf{P}}$
This note on random variables follows as a result of confusing notation in several math textbooks. I'll explain random variables (in measure theoretic terms) as verbosely as I can, and then prove some results. This article assumes that the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;$\newcommand{\triple}{(\Omega, \mathcal{F}, \mathbf{P})}$$\newcommand{\P}{\mathbf{P}}$
This note on random variables follows as a result of confusing notation in several math textbooks. I'll explain random variables (in measure theoretic terms) as verbosely as I can, and then prove some results. This article assumes that the reader is familiar with probability triples $\triple$, as well as a basic idea of what random variables are, in non-measure theory terms.&lt;/p&gt;
&lt;h2&gt;1. Random Variable Prerequisites&lt;/h2&gt;
&lt;p&gt;We start with defining measurable spaces and measurable functions &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Definition 1.1&lt;/strong&gt;: A Measurable space $(X,\Sigma)$ consists of a set $X$ and a $\sigma$-algebra $\Sigma$ defined on $X$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition 1.2&lt;/strong&gt;: A Generated $\sigma$-algebra is the smallest $\sigma$-algebra containing a specified collection of sets. That is, if $A$ is a set of subsets of $X$, $\sigma(A)$ is the smallest sigma-algebra such that $A \subseteq \sigma(A)$. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition 1.3&lt;/strong&gt;: A Measurable Function $f: (X,\Sigma) \to (Y,\Gamma)$ between two measurable spaces is a function such that for every $E \in \Gamma$, $\{x \in X\ |\ f(x) \in E\} \in \Sigma$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since the definition $\{x \in X\ |\ f(x) \in E\}$ is used so commonly in the context of measurable functions, this has a special notation&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Definition 1.4&lt;/strong&gt;: $$f^{-1}(E) := \{x \in X\ |\ f(x) \in E\}$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;NOTE: The above definition is confusing, but is unfortunately the norm when dealing with measurable functions. &lt;span style="color: red;"&gt;In the context of measurable functions, $f^{-1}$ does not refer to the inverse of $f$ (which is a function from $Y \to X$), but rather the set of preimages of all the elements contained in a set in the sigma algebra.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Measurable functions can also be defined in terms of the $\sigma$-algebra generated by a &lt;em&gt;function&lt;/em&gt;, rather than that of a set&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Definition 1.5&lt;/strong&gt;: The $\sigma$-algebra generated by a function $f: (X,\Sigma) \to (Y, \Gamma)$ is the collection of all inverse images $f^{-1}(S),\ S \in \Gamma$. 
$$\sigma(f) := \{ f^{-1}(S) : S \in \Gamma \}$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;According to this definition, if $\sigma(f) \subseteq \Sigma$, then $f$ is a measurable function.&lt;/p&gt;
&lt;h2&gt;2. Random Variables&lt;/h2&gt;
&lt;p&gt;Random variables are unfortunately, neither random nor variables. This is the first of many misnomers that we encounter in their study. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Definition 2.1&lt;/strong&gt;: A Random Variable $X$ defined on a probability triple $\triple$ is a measurable function $X : (\Omega, \mathcal{F}) \to (\mathbb{R}, \mathcal{B}(\mathbb{R}))$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In it's simplest terms, A random variable is simply a function from $\Omega \to \mathbb{R}$, obeying some 'nice' rules which allow us to use probability measures with it. These nice rules would come into play a bit later, after we first see how random variables and probability measures go hand in hand.&lt;/p&gt;
&lt;p&gt;Consider $$\begin{align}\Omega &amp;amp;= \{1,2,3\}\\ \mathcal{F} &amp;amp;= 2^{\Omega} \\ \mathbf{P}&amp;amp;:\mathcal{F} \to [0,1]\end{align}$$ such that $\mathbf{P}\{1\} = \mathbf{P}\{2\} = \mathbf{P}\{3\}$ (This is the discrete uniform probability space on $\{1,2,3\}$). Let our random variable $X: \Omega \to \mathbb{R}$ map $\{i\}$ to $i$, $i \in \{1,2,3\}$. A graphical depiction of this would look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="X" src="res/rv_x.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Now, suppose we had to calculate the probability that the random variable $X$ would be less than or equal to $2.5$. The probability of this event occuring is given by $\P\{\omega \in \Omega\ :\ X(\omega) \le 2.5\}$. From the inverse notation we developed in $\S$1.4, We can also write this as $\P(X^{-1}((-\infty, 2.5]))$. From the graph, we clearly see that $1$ and $2$ are the only elements in $\Omega$ that would be in this set, hence $\P\{1,2\} = 2/3$. This is how random variables and probability measures go hand in hand.&lt;/p&gt;
&lt;p&gt;Why then, do random variables need to be measurable functions? &lt;strong&gt;Note that the probability measure is only defined for sets in $\mathcal{F}$, and if $X$ is not measurable, we cannot find the probability of certain events associated with $X$&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;An example for this is to consider $$\begin{align}\Omega &amp;amp;= \{1,2,3\}\\ \mathcal{F'} &amp;amp;= \{\emptyset, \{1\}, \{2,3\}, \Omega\} \\ \mathbf{P}&amp;amp;:\mathcal{F'} \to [0,1]\end{align}$$ such that $\P\{1\} = 1/3$. Now consider $X': \Omega \to \mathbb{R}$ such that $X'(i) = i,\ i \in \Omega$. This is the same map as before. However, if we try to calculate the probability that $X$ is less than or equal to 2.5 now, &lt;strong&gt;we find that $\P\{1,2\}$ is undefined, as $\{1,2\} \not\in \mathcal{F'}$&lt;/strong&gt;. Hence, $X'$ is not a random variable, as it is not measurable on $(\Omega, \mathcal{F'})$. More specifically, $\sigma(X) = 2^\Omega \not\subseteq \mathcal{F'}$, hence, $X'$ is not measurable&lt;/p&gt;
&lt;h2&gt;3. Results on Random Variables&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Claim 3.1&lt;/strong&gt;: If $X: \Omega \to \mathbb(R)$ is a random variable on $\triple$, then $X^{-1}(B) = A \implies X^{-1}(B^C) = A^C$. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A simple (maybe even obvious) claim, the proof is by definition: $$\begin{align}
X^{-1}(B) &amp;amp;= A = \{\omega \in \Omega\ :\ X(\omega) \in B\} \\
\implies X^{-1}(B^C) &amp;amp;= \{\omega \in \Omega\ :\ X(\omega) \not\in B\} = A^C 
\end{align}$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Claim 3.2&lt;/strong&gt;: If $X = \mathbf{1}_A$ is the indicator of some event $A \in \mathcal{F}$, then $X$ is a random variable&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Proof: for all $B \in \mathcal{B}(\mathbb{R})$, we have $X(B)$ equal to any one of $A$ (if $B$ contains 1 and not 0), $A^C$ (if $B$ contains 0 and not 1), $\emptyset$ (if $B$ contains neither 0 nor 1) or $\Omega$ (if $B$ contains both 0 and 1). Hence, $X$ is a random variable.&lt;/p&gt;
&lt;p&gt;The next two claims would be key to proving results about functions of random variables&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Claim 3.3&lt;/strong&gt;: if $f: (\Omega_1, \mathcal{F}_1) \to (\Omega_2, \mathcal{F}_2)$ and $g: (\Omega_2, \mathcal{F}_2) \to (\Omega_3, \mathcal{F}_3)$ are two measurable functions, then $f \circ g : (\Omega_1, \mathcal{F}_1) \to (\Omega_3, \mathcal{F}_3)$ is also a measurable function&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Proof: For all $B \in \mathcal{F}_3$, since $g$ is measurable, $g^{-1}(B) \in \mathcal{F}_2$. Since $f$ is measurable, $f^{-1}(g^{-1}(B)) \in \mathcal{F}_1$. Hence, $f\circ g$ is measurable.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Claim 3.4&lt;/strong&gt;: $f: (\Omega_1, \mathcal{F}_1) \to (\Omega_2, \sigma(C))$ is measurable if $A \in C \implies f^{-1}(A) \in \mathcal{F}_1$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Proof: Note that $f^{-1}(\Omega_2 \setminus A) = \Omega_2 \setminus f^{-1}(A)$, and $f^{-1}(\cup_n A_n) = \cup_n f^{-1}(A_n)$. This, along with the fact that $\mathcal{F}_1$ is a $\sigma$-algebra proves that $\{A : f^{-1}(A) \in \mathcal{F}_1\}$ is a $\sigma$-algebra containing $C$. Since $\sigma(C)$ is the smallest $\sigma$-algbra containing C, $\sigma(C)$ would be a subset of the above $\sigma$-algebra, hence the claim is true.&lt;/p&gt;
&lt;p&gt;This above claim ensures that we don't need to prove that every set of a $\sigma$-algebra has a preimage in the previous $\sigma$-algebra. Proving it for only the generating set is enough eg. for $\mathcal{B}(\mathbb{R})$, it's sufficient to show that only the open sets have a preimage, something that we'll use in the next proof.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Claim 3.5&lt;/strong&gt;: Every continuous function $f: \mathbb{R} \to \mathbb{R}$ is measurable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Proof: from (3.4), it's sufficient to prove that for every open set $A$, $f^{-1}(A) \in \mathcal{B}(\mathbb{R})$. This follows from the continuity of $f$: $f$ is continuous iff $G$ is open implies that $f^{-1}(G)$ is also open. Hence, $f$ is measurable.&lt;/p&gt;
&lt;p&gt;The above three claims give us the following very powerful result: &lt;strong&gt;every continuous function of a random variable is also a random variable&lt;/strong&gt;. We can make a stronger claim, after proving the following claims as well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Claim 3.6&lt;/strong&gt;: If $X$ and $Y$ are random variables on $\triple$, then $X+Y$ and $XY$ are random variables as well&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Proof: This cute proof comes from Rosenthal. It's sufficient to prove that $X+Y$ is a random variable on the collection of sets $(-\infty, x)$, as the generated $\sigma$-algebra of this collection is $\mathcal{B}(\mathbb{R})$. Hence, consider the set $\{\omega \in \Omega : X(\omega) + Y(\omega) &amp;lt; x\}$. From the density theorem, we can find a rational number in $(X, x-Y)$ (I've dropped the $(\omega)$, as it's implicit here). hence, $$\{X + Y &amp;lt; x\} = \bigcup_{\text{r rational}} (\{X \lt r\} \cap \{Y \lt x - r\})$$ Since all the elements in the union belong to $\mathcal{F}$ and since $\mathcal{F}$ is a $\sigma$-algebra, $X+Y$ is a random variable.&lt;/p&gt;
&lt;p&gt;XY is also a random variable, as $XY = [(X+Y)^2 - (X^2+Y^2)]/2$, and a sum/function of random variables is a random variable, from the previous claims.&lt;/p&gt;
&lt;p&gt;We are now free to extend the claim that every continuous function of a random variable is a random variable, to piecewise continuity: &lt;strong&gt;every piecewise continuous function of a random variable is also a random variable&lt;/strong&gt;. If $f$ is piecewise continuous, then $f(X) = f_1(X) \mathbf{1}_{I_1} + f_2(X) \mathbf{1}_{I_2} + \ldots + f_n(X) \mathbf{1}_{I_n}$, where $f_j(X)$ are random variables as $f_j$ is continuous, and $I_j$ are disjoint intervals. From claim (3.6), $f(X)$ is a linear sum of random variables, and hence is also a random variable.&lt;/p&gt;
&lt;h2&gt;4. References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Rosenthal, Jeffrey S. &lt;em&gt;A First Look at Rigorous Probability Theory&lt;/em&gt;. World Scientific, 2006. &lt;em&gt;Open WorldCat&lt;/em&gt;, &lt;a href="http://public.ebookcentral.proquest.com/choice/publicfullrecord.aspx?p=5227675"&gt;http://public.ebookcentral.proquest.com/choice/publicfullrecord.aspx?p=5227675&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lebanon, Guy, editor. &lt;em&gt;Probability: The Analysis of Data ; Vol. 1.&lt;/em&gt; 2012. Available online at &lt;a href="http://theanalysisofdata.com/probability/0_2.html"&gt;http://theanalysisofdata.com/probability/0_2.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Math StackExchange, Wikipedia, etc etc :)&lt;/li&gt;
&lt;/ol&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category></entry><entry><title>Updates on Life in general</title><link href="https://aniruddhadeb.com/articles/2021/updates-on-life.html" rel="alternate"></link><published>2021-08-14T21:20:00+05:30</published><updated>2021-08-14T21:20:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2021-08-14:/articles/2021/updates-on-life.html</id><summary type="html">&lt;p&gt;I haven't done one of these in a year or so (&lt;a href="https://aniruddhadeb.com/articles/2020/iit-delhi-mnc.html#iit-delhi-mnc"&gt;this was the previous one&lt;/a&gt;), and neither have I written content exclusively for my blog for atleast a few months now, so it's a good time to do one of these because &lt;em&gt;a lot has changed in the past …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I haven't done one of these in a year or so (&lt;a href="https://aniruddhadeb.com/articles/2020/iit-delhi-mnc.html#iit-delhi-mnc"&gt;this was the previous one&lt;/a&gt;), and neither have I written content exclusively for my blog for atleast a few months now, so it's a good time to do one of these because &lt;em&gt;a lot has changed in the past one year&lt;/em&gt;. &lt;/p&gt;
&lt;h2&gt;Let's start with summer&lt;/h2&gt;
&lt;p&gt;The past two months have been amazing.&lt;/p&gt;
&lt;p&gt;That doesn't even sum up just how great they've been.&lt;/p&gt;
&lt;p&gt;I've done a lot of what I liked, some of what I didn't like, very little of what I hate, and everything made me a better individual. I realize that sounds straight out of the pages of a corporate brochure, but I promise it's the truth. Even though I stepped into summer without a concrete plan or project, I ended up accomplishing more than I expected, and even if you ignore all of that, I found some amazing things along the way.&lt;/p&gt;
&lt;h2&gt;Now something concrete&lt;/h2&gt;
&lt;p&gt;The most concrete thing that pops out to me is my department change. Yes, everyone knew it was coming. Yes, &lt;strong&gt;I&lt;/strong&gt; knew it was coming (so much so that I sat in the CS orientation rather than the MT orientation after the first semester), and Yes, I wasn't surprised when the official notification was finally sent out. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, as every day goes by, I come to terms a bit more with the magnitude of what truly happened. Just because you know something significant will happen, it doesn't take the edge off the magnitude of your achievement, when it finally happens. You find it hard to stand stoically and claim "&lt;span  style="font-size: 12pt;"&gt;अरे ये तो होना ही था&lt;/span&gt;", and everyday, I still ponder in amazement when I open my inbox and it reads &lt;code&gt;cs1200869&lt;/code&gt; rather than &lt;code&gt;mt6200869&lt;/code&gt;, thinking 'damn. This happened'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This couldn't have happened without everyone else who was involved, and unlike JEE, this time I didn't do it sitting alone in my room. I did it in the midst of my friends, my hostelmates and everyone else at IIT Delhi, and seeing the congratulatory messages pour in when the results finally came in was breathtaking. Thank you to everyone I've met at IITD so far; you guys and gals have been amazing, and when campus reopens, I can't wait to spend the rest of whatever little time we have with you: playing, talking or just aimlessly wandering through our campus.&lt;/p&gt;
&lt;p&gt;The next thing that happened is the elections; I'll probably write on this a bit more later, but the good part is that I'm a Quizzing Club representative now, as well as a convenor in Debating Society! Quizzing and Debating are two activites I really enjoyed doing in my first year, and it feels great to finally be more involved in both of them now. Looking forward to hosting more quizzes and adjudicating or tabulating more debates, rather than merely participating in quizzes or debates.&lt;/p&gt;
&lt;p&gt;In terms of academic things, I attended the IBM &lt;a href="https://qiskit.org/events/summer-school/"&gt;Qiskit Global Summer School in Quantum Computing&lt;/a&gt; for two weeks in July, which was also a great experience. We received a crash course in quantum computing and quantum machine learning, supplemented by five amazing labs, all of which I really enjoyed doing. I am also pleased to be a &lt;a href="https://scholarships.reliancefoundation.org/"&gt;Reliance Foundation Scholar in Artificial Intelligence and Computer Sciences&lt;/a&gt;, the onboarding event for which is scheduled on the 19th of August. Finally, it was great attending the events and camps organized by those at IITD: The Summer of Competitive Programming by ANCC and the Summer of Machine Learning by AIMLC. Both of them were great learning opportunities; the latter giving rise to &lt;a href="https://apps.aniruddhadeb.com/MathSolver"&gt;MathSolver&lt;/a&gt; (Article on that soon too, I promise).&lt;/p&gt;
&lt;h2&gt;The little things&lt;/h2&gt;
&lt;p&gt;There weren't many of these that I can remember now, but I designed the Quizzing Club Introductory poster this time.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src="res/repteam_final_2.png" style="width: 100%; height: auto; max-width: 35vw;"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;I also applied for the Board of Student Publications, the press arm of IIT Delhi, and they had a very interesting google form that we needed to fill to be shortlisted for an interview. I will be uploading my responses to that form soon enough, but I filled that out in the first week of August, and it was a fun exercise filling that in, because I hadn't written anything original in a long time.&lt;/p&gt;
&lt;p&gt;As for Quizzing and Debating, I quizzed a lot and won nothing :P (best fresher, yes but that's a club award and not a quiz). the same goes for debating, except that I managed to break in my first external debate. The external debate was fun, albeit a bit exhausting. I need to get used to those :)&lt;/p&gt;
&lt;p&gt;I did a bit of number theory and cryptography as well in the summers, learning what AES, RSA and all of those were. Some competitive programming was also on the list (&lt;a id="codeforces" href="" style="font-family: helvetica neue,Helvetica,Arial,sans-serif; font-weight: 700; font-size: 12pt"&gt;aniruddha_deb&lt;/a&gt; on CodeForces, &lt;a href="https://atcoder.jp/users/aniruddha_deb"&gt;aniruddha_deb&lt;/a&gt; on AtCoder), and I learnt a few more algorithms there. &lt;/p&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;The third semester is in full swing by now, and it's time to look beyond the horizon to further challenges. I'm enjoying all the computer courses so far, in spite of the several ominous warnings that seniors have given me, about CS being assignment hell (It's the first week, so I'll give them the benefit of doubt). Mathematics is also great (another article on some probability theory coming soon), and I'm trying to keep a healthy balance between everything else. &lt;/p&gt;
&lt;p&gt;I'd like to talk a bit more about onboarding and internships; I meditated long and hard on these two topics, and finally came to the nihilistic conclusion that in the short term, &lt;em&gt;both of them don't matter&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;Regarding onboarding, seeing everyone meeting up and enjoying life simultaneously makes me happy and fills me with the fear of missing out. I'm not going to lie that it hurts at times to imagine myself in the pictures. However, that won't help at this stage. The conclusion I had reached with my parents was that it was too risky to onboard, and even though I had to see a lot of my friends go to campus, I've stood by that decision so far, and the workload of the new semester helps solidify that stand more. Nevertheless, doesn't matter now.&lt;/p&gt;
&lt;p&gt;Regarding internships, first phase placements passed me by, and I was left wondering whether I made a mistake by not applying to them. Again, the result I reached on thinking a bit more was that second phase is always there, and if not that, I can always reach out and get internships on my own. Whatever decisions I took, I took them keeping in mind alternative actions, and it is pointless to question those decisions midway through their arc. Only after all the arrows have been shot and my quiver is empty, should I seriously question my decisions. Till then, sticking to them is my best bet.&lt;/p&gt;
&lt;p&gt;In the larger perspective of things, both of these are inconsequential; I will inevitably be onboarded sooner or later, and I will inevitably get an internship, sooner or later. It's only the local minima that is preventing me from seeing the global maxima of the landscape of life, and this too shall pass. &lt;/p&gt;
&lt;h2&gt;Anything else?&lt;/h2&gt;
&lt;p&gt;Following the Qiskit summer school, I took a break from everything for a week or so. I was yearning for a holiday, and I hadn't had one in a long time, so I switched off WhatsApp for a week and connected with the world around me. This was a refreshing experience, and it was the only time in the summer vacations that I can honestly claim felt like a 'vacation'. Some might argue that's a bad thing, and I should relax more often; In my opinion, it was just right. All I did was sketch a bit, write some poetry, play some volleyball and sleep a lot, and life was good.&lt;/p&gt;
&lt;p&gt;Anime! Yes, I watched a lot of anime. We had a clannad watchalong with friends, and I finished Steins;Gate on my own. What a show! I'm currently watching Code Geass, but that's proceeding at a snails' pace because &lt;strike&gt;I'm also watching the good doctor right now&lt;/strike&gt; there's a lot of academic workload now. I also tried my hand at the clannad visual novel, but that's very slow again, so I play that occasionally.&lt;/p&gt;
&lt;p&gt;Another thing was this &lt;a href="https://github.com/Aniruddha-Deb/strattech-intern-assignment"&gt;COVID vaccine analysis&lt;/a&gt; that I did, as part of the joining assignment for a small startup from our campus. Even though that didn't happen, I learnt a lot from this assignment, and I'll write about it a bit more sometime (this is a recurring trend; I promise more articles than I actually write :P)&lt;/p&gt;
&lt;h4&gt;(here's a bonus for you)&lt;/h4&gt;
&lt;p&gt;The CodeForces username badge uses a CF API request to change the color. This uses the CodeForces API to obtain the rank of the user, then adds that as a class, which the CSS then takes care of. Here's how it works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;getCFLink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cfId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;codeforces&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cfId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// yes, I should urlencode the usernames, but it works for now&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;cfId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://codeforces.com/profile/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;load&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;cfId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://codeforces.com/api/user.info?handles=&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;The same cannot be done for AtCoder&lt;/em&gt;, because neither does AtCoder have an API nor does it allow cross-origin requests, so the AtCoder badge would have to remain plain for now.&lt;/p&gt;
&lt;p&gt;Thank you for reading so far, and stay tuned for what's to follow :)&lt;/p&gt;
&lt;p&gt;&lt;link rel="stylesheet" type="text/css" href="styles/cftitles.css"&gt;&lt;/p&gt;
&lt;script&gt;

    function getCFLink() {
        var oReq = new XMLHttpRequest();
        var cfId = document.getElementById("codeforces");
        var username = cfId.innerText;
        cfId.href = "https://codeforces.com/profile/" + username;
        oReq.addEventListener("load", () =&gt; {
            var reply = JSON.parse(oReq.responseText);
            if (reply.status === "OK") {
                var rank = reply.result[0].rank.replace(" ", "-");
                cfId.classList.add(rank);
            }
        });
        oReq.open("GET", "https://codeforces.com/api/user.info?handles="+username);
        oReq.send();
    }

    /* Does not work because AtCoder does not allow cross-origin requests, F
    function getAtcoderLink() {
        var req = new XMLHttpRequest();
        var atcId = document.getElementById('atcoder');
        var username = atcId.innerText;
        atcId.href = "https://atcoder.jp/users" + username;

        const parser = new DOMParser();

        req.addEventListener("load", () =&gt; {
            var doc = parser.parseFromString(req.responseText);
            var span = doc.getElementsByClassName('user-red user-orange user-yellow user-blue user-cyan user-green user-brown user-gray user-unrated user-admin');
            atcId.classList.add(span.classList[0]);
        });
        req.open("GET", "https://atcoder.jp/users/"+username);
        req.send();     
    }*/

    getCFLink();

&lt;/script&gt;</content><category term="Writing"></category><category term="Writing"></category></entry><entry><title>How it Happened</title><link href="https://aniruddhadeb.com/articles/2021/how-it-happened.html" rel="alternate"></link><published>2021-08-02T13:11:00+05:30</published><updated>2021-08-02T13:11:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2021-08-02:/articles/2021/how-it-happened.html</id><summary type="html">&lt;p&gt;"Baba, I got Mathematics and Computing Dual at IITD", I told my father excitedly on the day the first round allocations were over. "It probably won't change now". Certain of this, I returned back to whatever I was doing, excitedly waiting for the seat allocations to get over (while simultaneously …&lt;/p&gt;</summary><content type="html">&lt;p&gt;"Baba, I got Mathematics and Computing Dual at IITD", I told my father excitedly on the day the first round allocations were over. "It probably won't change now". Certain of this, I returned back to whatever I was doing, excitedly waiting for the seat allocations to get over (while simultaneously crossing my fingers for the slightest hope of a branch upgrade, as we all do). Even though the campus was not opening and the semester was planned to be conducted online, I hoped to truly enjoy my first year of college life.&lt;/p&gt;
&lt;p&gt;The allocations went similarly for so many of us: get a rank, see where you fit, fill your preference and wait for the acceptance letter. In hindsight, it's amazing that such a small and short decision can influence your life's trajectory so much: it can change the people you interact with, the experiences you enjoy and the moments you cherish, but I'm getting existential at this point. I was now a student of IIT Delhi: I remember the first thing I did to show my allegiance was sketch the logo of IIT Delhi. Did you know there are 40 circles on the rim of the logo? Me neither :) &lt;/p&gt;
&lt;p&gt;After the seat allocation rounds, the ball was finally set rolling: we got an email from IIT Delhi, asking us to register on their portal. Cue a long list of paperwork (there were more than 15 forms!), lots of running around and finally we were greeted with 'your documents are pending approval'. Kind of anticlimatic, but it would get better! Our online induction videos were uploaded on 11th November, and a lot of them were quite nice, especially the director's message. However, our department introduction video was conducted by a 2nd year and a 3rd year, and the department head was nowhere in sight (Bigger F for CS people, whose department introduction was not uploaded). We had a meeting with the Dean(s) on 12th, but because of technical glitches, it was postponed to 13th. Alright, that happens sometimes, I suppose. The meeting on 13th went ahead as planned, until the chat got spammed by a certain 'Watson'. The joys of an online semester, I chuckled and moved on.&lt;/p&gt;
&lt;p&gt;We were split into two batches and forty groups, with groups 1-20 (Batch A) having a different set of courses for the first semester. We had our introductory classes from 16th-17th, with full classes scheduled to start from the 18th of November. Initially, social interaction with others from IITD was tricky: I hadn't attended a coaching and I knew absolutely no one at IIT Delhi from the first year. Fortunately, I was soon added to my department group, and I spent the first few days being moderately active there.&lt;/p&gt;
&lt;p&gt;Time seemed to dilate from then on: the bogeys was loaded, the doors were shut, the train took off from the platform and the scenery outside dissolved to a blur. Classes took over, and fortunately we had some very good professors and a light workload in the start. I interacted with a few people personally (thanks to Teams chat), and joined a few discord servers, where people were active. Soon after (I don't remember the exact date), I was put into a hostel. Just like many other important things in life: where you're born, your name or your religion, your hostel is god-given (a 'lucky draw' if you're an atheist ;)). Fortunately, god smiled at me and gave me Udaigiri: the newest and largest hostel at IIT Delhi. Speaking to the handful of people I knew at that point, everyone was positive about Udaigiri, and the positivity was truly infectious. We were introduced to our ~Babloos~ BSW representatives soon after, and got to know a lot more about the culture of the hostel, and our exploits in dance and debate.&lt;/p&gt;
&lt;p&gt;Going into the next month, IITD came alive: In spite of the online semester, the six-day work week and the ever-rising workload, the seniors did their best to give the freshers a respite, a taste of what life at IITD was like, and for many of us freshies, it worked :) we had a tour of stalls sometime early in December, followed by BRCA night, where (for me) we had our first genuinely fun face-to-face interaction with our compatriots. Even though I'm not in touch with most of the people in my breakout room, it was a great experience. The Club groups opened soon after, and our introductory club events also started taking place. Having a background in Quizzing, Debating and Arts, those were the clubs whose events I took part in majorly, and I still remember my first debate speech, where I stalled for 30 seconds in the middle of a five minute speech :P. Things got serious soon after: we had our first quizzes scheduled in early and mid-December, and they were not pleasant. I think acclimatizing to the academic environment comes as a culture shock to all here, but it was still a culture shock nevertheless. The Maths quiz was easy-ish, but Chemistry was a nightmare. I got 17/25 in my first chemistry quiz while the highest was 23, and I was clueless for quite a few questions. This was quite the shock, and I realized that this journey would be harder than I thought. The Mechanics quiz went a bit better, but since that was out of 15 and easier, everyone did well comparatively. The only silver lining of the Chemistry quiz was that Prof. Kurur stayed on after the quiz to take doubts for the chemistry quiz, but soon we were peppering him with doubts about life, the universe and everything else, and he happily obliged.&lt;/p&gt;
&lt;p&gt;Our minor examinations occured during the end of December. Barely knowing anyone forced me to spend most of my time studying, and it reflected: I got decent grades in all the papers except Mathematics (Ironic considering I had aptitude for my department, or so I believed). I was fortunate, for it didn't pan out that well for all of us: averages were low, most people cheated, a few were caught, and it was a low point for quite a few of us. I believe that the online sem exacerbated the testing scenario: giving an offline test is immensely easier than giving an online test. You have to deal with harder question papers, spotty internet connections, disturbances and sounds in your house and still answer all the questions asked in a span of less than two hours. This skewed the scenario heavily against the people with poor internet connections, or the ones with a not-so-quiet environment in their houses. While the institute was providing dongles and computer equipment to those affected, those were trying times; they still haven't ended, as I'll speak more about them up ahead, but let's return to the joys of the past for now.&lt;/p&gt;
&lt;p&gt;Soon after minors, things returned back to normal. This is the time when I believe fresher club interaction was at it's peak: I made most of my new friends in this phase, and most of them were from Quizzing Club. I would attend classes in the morning, take a nap in the afternoon, study for a while in the evening and babble about the weird and the wonderful with my friends on the myriad groups and clubs that had been created. Being an introvert like many others here, I finally began to fit in: the joys of a club are finding a group of people who resonate at the same frequency as you do, and I participated in a lot of quizzing events with them. There were quite a few events in this period as well: Literati, No Brainer, Potpourri, Quizzitch and a lot of other quizzes, which I enjoyed participating in. These took place in the middle of other quizzes as well, and juggling both academics and extracurriculars online was not great. I did mess up a quiz or two along the way (CML organic quiz I'm looking at you). &lt;/p&gt;
&lt;p&gt;Leading up to the majors, the discussion ebbed, and almost everyone returned back to studying. The majors were a make or break moment for a lot of people here, and you could sense the tension before them. Doubt groups that had been lying dormant suddenly became active, and Piazza, which nobody generally uses, started overflowing with doubts. People also started attending the academic mentorship programmes (which were quite helpful). It's said that the mind forgets bad memories more easily than good ones, and even though my majors went quite well, I can't remember what I did, or what I wrote in them (which is probably a good thing).&lt;/p&gt;
&lt;p&gt;The post-major break was the best time for a lot of us. Covid was at a low, academics were out of everyone's mind, there were quite a few events to participate in, there were a lot of meetups across all the various cities and everyone was optimistic about returning to campus for the practical component of the second semester. However, the rest is history: Covid cases have spiked, institute elections have been postponed, students are being asked to return back to their homes and the situation has taken a turn for the worse. &lt;/p&gt;
&lt;p&gt;This article was meant to be a light-hearted reminiscence about how life has been so far, but it's impossible to ignore what lies ahead. The only way to get through these trying times is positivity: stay positive. This is easier said than done, so here's a few things to do: pick up that guitar that's been gathering dust and pluck a few notes. Attend the next dance or music club workshop. Spend some time with your family members; play a game with your siblings. If you don't feel like doing these, remember that you're not alone! All of us at IITD are just a phone call or text away, so don't hesitate to pick up the phone and speak your mind out. We've been through times that have been harder than this, and given enough time this too will pass.&lt;/p&gt;
&lt;p&gt;Concluding on a positive note, I had to dig up my old calendars and schedule to write this; I haven't been completely honest if I ever mentioned that I remember it all, but there are a few moments that I do remember. I remember spending New Year with friends at IIT, playing skribbl till 1. I remember all the hostel, group and club meets that we had, most of which went on till late in the night. I remember the awkward silences online, where the TA would ask us if we understood the question, and everyone would stay quiet for 5 minutes. There are a lot of other things I will remember that I would rather not say here ;) A lot of people also feel sorry for us, saying that we won't have the memories that would be created were we on campus. I disagree. As John Milton said, "The mind is its own place, and in itself can make a heaven of hell, a hell of heaven", and though we may look back at these troubled times differently, we will cherish them nevertheless. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This article featured in &lt;a href="https://drive.google.com/file/d/1wwS-bnfLO5CfsutfuD20Vf9QpdBPam2C/view?usp=sharing"&gt;Reverie&lt;/a&gt;, Udaigiri house's submission for Gazettale 2021.&lt;/p&gt;</content><category term="Writing"></category><category term="Writing"></category></entry><entry><title>This summer</title><link href="https://aniruddhadeb.com/articles/2021/this-summer.html" rel="alternate"></link><published>2021-06-16T20:18:00+05:30</published><updated>2021-06-16T20:18:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2021-06-16:/articles/2021/this-summer.html</id><summary type="html">&lt;p&gt;What is a dream? all of us think of dreams as abstract ideals, far removed from reality, that we should chase with all the effort we can muster every day. &lt;/p&gt;
&lt;p&gt;Meditating on this a bit more, does this make sense? What is achieved by chasing an ideal when you can …&lt;/p&gt;</summary><content type="html">&lt;p&gt;What is a dream? all of us think of dreams as abstract ideals, far removed from reality, that we should chase with all the effort we can muster every day. &lt;/p&gt;
&lt;p&gt;Meditating on this a bit more, does this make sense? What is achieved by chasing an ideal when you can never reach it? also, what would you do if you reached the ideal? Would you just stop? Life would lose all it's meaning, and the only place to go then would be out of a tall window. How would you achieve this dream? It's one thing to dream of an ideal life, but quite another to actually achieve it.&lt;/p&gt;
&lt;p&gt;Coming back to practicality, I believe that dreams are pointless. All life consists of are trajectories. This is somewhat similar to the 'life is but a journey through time' analogy, but I'll get to that in a moment. A trajectory is merely a path that you follow over a certain period of time. Where one trajectory ends, another begins. &lt;/p&gt;
&lt;p&gt;What would we do if we don't have a trajectory? Well, the readers of this article are certainly not dead, so it's natural to assume they're in one. Who decides this trajectory? I believe that this trajectory is a function of your starting parameters. In the universe of life, your starting position is completely random. We don't choose our family, our name, our religion, our sex or even the brand of diaper we poop in. When you're born, you begin as a tiny rock in the gravity well of your family, and our trajectories are basically the path this small rock will take over the course of it's lifetime.&lt;/p&gt;
&lt;p&gt;The rock in a universe analogy works fairly well philosophically: similar rocks get into similar trajectories. Consider the example of nature vs nurture: some rocks are born bigger, some smaller. Some are weirdly shaped, and some are perfect spheres. All rocks however will undergo collisions in their paths that make them what they are, and these collisions will be different depending on where in the universe they spawn. As RL Stevenson said, 'a man who, when born in London, makes a conscientious Protestant, would have made an equally conscientious Hindu if he had first seen daylight in Benares'&lt;/p&gt;
&lt;p&gt;Coming to trajectories: rocks at similar potentials will traverse similar trajectories. A child born in Delhi will attend school in Delhi whereas a child born in Pune will attend school in Pune. One may point out the case when the Delhi kid's parents transfer to Pune, and I would say 'Well, the parent is bigger than the child, so the child would orbit the parent and go where the parent goes'. But enough of specifics.&lt;/p&gt;
&lt;p&gt;Without getting into emotions right now (which would need their own framework, because emotions are amazingly complicated), what determines the 'quality' of a path? Does a longer trajectory mean better quality? What about one with fewer obstacles? Before long, we start questioning what it means to be 'happy', and then branch out into emotions, which as I said I couldn't model. For now, let's use a first approximation: a good trajectory is one which gives us a sense of accomplishment. In rockland, if we dodge or stabilise a rock around us without colliding with it and losing massive amounts of mass, we've accomplished something. The larger the rock we dodge or stabilize, the greater the accomplishment.&lt;/p&gt;
&lt;p&gt;I've done a terrible job of explaining that, but it suffices. The objective of our trajectory then is to give us the greatest feeling of accomplishment we can obtain, starting from our position in the universe. If we need to maximize accomplishment, then we would need to change our trajectory at times, which brings up the question: just how much control do we have over our trajectories?&lt;/p&gt;
&lt;p&gt;I'm afraid this is the crux of the subject matter of this article, and I won't mind if you slept through the previous paragraphs. Many of us have our trajectories decided for us: go to school with your fellow rocks, then go to whichever college allows you to orbit it, then go to whichever company allows you to orbit it, then find another rock to orbit it with, so that your centre of mass is outside you and is preferably between both of you. Why? So that you can make more tiny rocks with the rock you paired up with. Then once your tiny little rocks have followed the same trajectory and your surface becomes more and more pockmarked with craters, spend your time reminiscing about what could have been. &lt;/p&gt;
&lt;p&gt;The thought that we can change our paths or stray off the beaten path almost seems alien: what would happen if we float out, with nothing to tether us to or to orbit around? What would happen if we face too much debris in the way, and are eventually reduced to stardust? The bigger question is "What if we could? Would you?"&lt;/p&gt;
&lt;p&gt;Occasionally, something happens in the universe sending out wobbles of gravitational waves, and this was a major wobble, never seen before. A year back, I was sitting at home twiddling my thumbs. JEE had been postponed yet again, and I was at my wit's end, finding it amazingly hard to cope and losing motivation every day. Life back then was easy, when there was One trajectory to follow. One path to tread. One line to take. One singular goal. Now, I'm yet again twiddling my thumbs as my first year is at it's end. What's even more scary this time is that I realize I have no concrete goals. All I have are Passions. Dreams. No trajectories.&lt;/p&gt;
&lt;p&gt;I should consider myself fortunate: atleast I have my passions to work with. All that's left now is to chart my trajectory and follow it. What the next few years look like. What the next few chapters in my memoirs read.&lt;/p&gt;
&lt;p&gt;So that's what I'm doing this summer.&lt;/p&gt;</content><category term="Writing"></category><category term="Writing"></category></entry><entry><title>Setting up (and shifting to) Sublime Text 4</title><link href="https://aniruddhadeb.com/articles/2021/sublime-text-setup.html" rel="alternate"></link><published>2021-06-01T08:03:00+05:30</published><updated>2021-06-01T08:03:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2021-06-01:/articles/2021/sublime-text-setup.html</id><summary type="html">&lt;p&gt;After using vim for a &lt;em&gt;long&lt;/em&gt; time, I realized that vim would be very tricky to
use for larger projects; there are a few reasons behind this, which are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hard to set up and use autocomplete&lt;/strong&gt;: I've tried omnicomplete, but it just didn't cut the mustard. I very seldom need …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;After using vim for a &lt;em&gt;long&lt;/em&gt; time, I realized that vim would be very tricky to
use for larger projects; there are a few reasons behind this, which are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hard to set up and use autocomplete&lt;/strong&gt;: I've tried omnicomplete, but it just didn't cut the mustard. I very seldom need something like whole line completion and all the other gimmicky stuff that was in it. I heard that setting up other autocompletes on vim were really tricky, and that vim by virtue of being single-threaded wasn't great at this stuff. I had used VSCode once, and the only thing I really took away was how great intellisense is. I really didn't want to go back to VSCode, so sublime seemed like a good alternative&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Where are the directories?&lt;/strong&gt; There is no way to view folders in vim unless you have a folder viewing plugin. Once you have a good grip on the way of the keyboard, Vim is kind of pointless until you start adding plugins. You even need a plugin to add auto-completing brackets! I finally realized that vim would be hard to use realistically if I have to tackle a larger programming project, where I would need to see the folders and files and have autocomplete on hand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Neovim? Do I have to set that up?&lt;/strong&gt; NeoVim is the 'better' version of vim that everyone uses, because it's multithreaded and more of a community effort. however that has another bunch of setup for making it usable, and coc.nvim is the completion tool of choice there. Though I could have gone the nvim way, I decided that setting up sublime text would be effort better spent, since it's already usable and fast. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So here's the way I made sublime my own over a tuesday evening:&lt;/p&gt;
&lt;h3&gt;Update, Update, Update!&lt;/h3&gt;
&lt;p&gt;Everytime I opened up Sublime, I was greeted with the annoying update window&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Yes I didn't screenshot it on my mac, which is why it's a windows SS, thanks to Colonel Panic at StackOverflow for the image" src="res/sublime_update.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;I finally went ahead and updated it. Sublime text had come up with version 4 recently, and the only change was &lt;em&gt;drumrolls&lt;/em&gt; A new default color scheme! How original.&lt;sup&gt;2&lt;/sup&gt;. Well, it's still a great color scheme, even I was getting bored of monokai.&lt;/p&gt;
&lt;h3&gt;Installing the smaller plugins&lt;/h3&gt;
&lt;p&gt;There are 3 'small' plugins I installed (plugins that require minimal work to setup):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A file Icon - cool file icons in the sublime text sidebar&lt;/li&gt;
&lt;li&gt;Terminal - open a terminal with the current file with one keystroke (⌘⇧T)&lt;/li&gt;
&lt;li&gt;NeoVintageous - &lt;em&gt;much&lt;/em&gt; improved vim plugin; vintageous pales in comparision&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;all of these (except Terminal) required no setup; I just hit ⌘⇧P -&amp;gt; install packages -&amp;gt; type the package name in, hit enter and done. Terminal required that I specify that I have iTerm2 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;terminal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;iTerm2-v3.sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;parameters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--open-in-tab&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Installing the larger autocomplete plugins&lt;/h3&gt;
&lt;p&gt;I mainly code in C/C++/Python nowadays, so I needed a Python autocomplete, as well as a C/C++ autocompleter. Jedi is what I used to use for python a long time back, and surprisingly it's still quite well maintained and documented. I installed Jedi via the package control. Jedi has some interesting settings regarding projects and virtual environments; I didn't get to try any of those out, but I did set it up on the default python interpreter on my system. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;python_interpreter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Users/Sensei/.pyenv/versions/3.9.0/bin/python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;python_package_paths&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Users/Sensei/.pyenv/versions/3.9.0/lib/python3.9/site-packages&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and that's it! Jedi now autocompletes both normal python and all packages that I install with pip (numpy, scipy etc). Great!&lt;/p&gt;
&lt;p&gt;I was left with setting up a C++ autocompleter, and this was a bit tricky. The first recommendation that I encountered was for ClangAutoComplete, but after downloading it, it stated that the plugin is still maintained, but not very actively. ClangAutoComplete instead recommended EasyClangComplete, so I uninstalled it and downloaded ECC. ECC had a few setup issues; everything is hunky-dory if you use CMake, but since I don't, I had to tweak the preferences a bit. I had already ranted about &lt;a href="https://aniruddhadeb.com/articles/2021/c-mac.html"&gt;How the C header locations on mac are screwed&lt;/a&gt;, and fortunately the ECC folks were kind enough to provide a recommended path list for mac.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;common_flags&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-I/usr/include/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-I/usr/local/include&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-I/Library/Developer/CommandLineTools/usr/lib/clang/12.0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-I/Library/Developer/CommandLineTools/usr/include/c++/v1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;lang_flags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-std=c99&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;CPP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-std=c++14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;OBJECTIVE_C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-std=c11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;OBJECTIVE_CPP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-std=c++14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;libclang_path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Library/Developer/CommandLineTools/usr/lib/&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Further updates&lt;/h3&gt;
&lt;p&gt;The next day, I went ahead and realized that terminal wouldn't cut it, and I needed a terminal integrated into sublime text. I went ahead and installed the Terminus plugin for that. Terminus by default hides some of it's keybindings, so I had to go and change the keybinding user preferences. Now &lt;code&gt;alt+`&lt;/code&gt; opens up a terminal where the default sublime terminal goes, and &lt;code&gt;ctrl+alt+T&lt;/code&gt; opens up a terminal in place of a text pane. The default user theme was too dark for my taste, so I changed it with the 3024-dark theme that terminus ships with. This config works perfectly: no need to split sublime into two with a terminal, or open iTerm every time I use sublime! Here's a screenshot (the project in question is &lt;a href="https://github.com/Aniruddha-Deb/PyGameOfLife"&gt;PyGameOfLife&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Current sublime setup" src="res/sublime_ss.png"&gt;&lt;/p&gt;
&lt;p&gt;That's about it; everything now works and works well! NeoVintageous is probably the thing that is the best; it is miles ahead of vintageous, and it works brilliantly here. I don't feel like I've left vim, until sublime writes methods for me, closes braces/tags for me and also autocompletes my 3 dimensional vector definition. Which is great. I'll post more updates here if I do install/delete some plugins, but I have a feeling sublime is here to stay.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;Yes I didn't screenshot it on my mac, which is why it's a windows SS, thanks to Colonel Panic at StackOverflow for the image&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt;They did change a lot of stuff; the rendering is now faster on newer devices, and a lot of updates would have gone into it behind the scenes, so this is just a joke :P gg @SublimeHQ, Sublime text 4 does look amazing :)&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Text Editor"></category></entry><entry><title>The Last Time</title><link href="https://aniruddhadeb.com/articles/2021/last-time.html" rel="alternate"></link><published>2021-05-29T14:43:00+05:30</published><updated>2021-05-29T14:43:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2021-05-29:/articles/2021/last-time.html</id><summary type="html">&lt;p&gt;Soft sunlight streaked in through the curtains, illuminating the room in a warm glow. Of course, I noticed none of that. The only thing I was aware of was my phone's alarm clock ringing. After drowsily hitting the snooze button, I realized that I had done this twice already, so …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Soft sunlight streaked in through the curtains, illuminating the room in a warm glow. Of course, I noticed none of that. The only thing I was aware of was my phone's alarm clock ringing. After drowsily hitting the snooze button, I realized that I had done this twice already, so I started scrolling through the notifications. It was 8:30, and my friends were abuzz with excitement. "Oh! The JEE Advanced results are coming out today!", I suddenly recalled while jumping out of bed, almost falling over in the process.&lt;/p&gt;
&lt;p&gt;The next few moments were a blur as I got ready and had breakfast. I had given the JEE Advanced a while back, and was quite sure of a good rank in it. However, my father had fallen ill a few days after we came back from giving the exam. Initially thinking it was COVID, we got an RT-PCR test done, which came out to be negative. We then shrugged it off as a seasonal cold, and dad had been taking antibiotics and paracetamol and keeping well. At 55 years, he was a frail old man by now, and a heart patient, so it really pained my mother to see him ill. He was feeling worse than usual today, so he was not up when I was having breakfast&lt;/p&gt;
&lt;p&gt;"Baba kaise hai?" I asked Ma with my mouth stuffed full of paratha&lt;/p&gt;
&lt;p&gt;"Kal raat unhe sardard hua tha. Ek aur COVID test karane ki soch rahe hai"&lt;/p&gt;
&lt;p&gt;"Accha. Aaj mera result aayega, and friends ke saath baahar party ka plan hai"&lt;/p&gt;
&lt;p&gt;"Ok. I would suggest you don't go, because Baba is really not keeping well"&lt;/p&gt;
&lt;p&gt;I thought about this for a while. I hadn't seen him, so I couldn't really comment. I was going insane staying inside the house, though. I hadn't been out anywhere after the JEE exams, and (quite obviously) before them as well. I was really aching to see my friends (and my girlfriend :P), and speak to them face to face. The network connection around our house didn't help either, and I couldn't speak to them properly or join the among us sessions that they used to hold regularly post JEE.&lt;/p&gt;
&lt;p&gt;"Mumma, I really want to go. Please, bahut bore ho raha hoon ghar pe", I protested.&lt;/p&gt;
&lt;p&gt;Ma nodded silently for now. This was a common action for "We'll see", so I stayed quiet for now.&lt;/p&gt;
&lt;p&gt;The next hour was spent furiously chatting with my friends over WhatsApp, while the network connection permitted me to do so. All of us discussed our future plans: which IIT we intended to go to and which branch we would prefer. All of us had a fair idea of how our exam went, and most of us were doing quite well. My girlfriend was iffy on her decisions, and said that she would take a final decision only after her rank came out. &lt;/p&gt;
&lt;p&gt;Finally, the opportune moment came, and I tensely reloaded the page to see the result portal. With trembling hands, I typed my details in as Ma stood behind me reassuringly. I hesitated for a moment before clicking; should I check someone else's result first so that I can get an idea how mine will be? My parasympathetic nervous system took over, and I pressed the left mouse button. The page took a few seconds to load, and I skimmed through the information to finally come to my rank: 323. "Mixed feelings" would describe how I felt at that time; I wanted to get under 270, which would have gotten me into IITB EE. I doubted I would get CSE at an old 5 IIT with this rank; would probably have to settle for IITD MnC or IITR CSE.&lt;/p&gt;
&lt;p&gt;Ma was very happy; she embraced me and congratulated me, and went to tell Baba. I ran to my phone and saw the group; everyone had done slightly worse than they expected, but my girlfriend Swati still hadn't posted her marks. Strange, I thought. I sent her a personal message, which wasn't delivered immediately. Damn this spotty Internet! Slightly dejected, I went to see dad to inform him of the good news. I kept my distance from him, as he had asked me to do so. &lt;/p&gt;
&lt;p&gt;"Baba, I got 323"&lt;/p&gt;
&lt;p&gt;Even though Ma had already told him the marks, he broke into a huge smile as I said them. He was very happy, happier than I've seen him in quite a long time.&lt;/p&gt;
&lt;p&gt;"Shabash bete. You're truly independent now. Where do you plan on going?"&lt;/p&gt;
&lt;p&gt;"IIT Delhi Maths and Computing most probably, or IIT Roorkee Computer Science"&lt;/p&gt;
&lt;p&gt;"Good, good. No IITB? I think your friends were planning on going there"&lt;/p&gt;
&lt;p&gt;"No, no IITB. Listen Baba, mai doston se milne jaa raha hoon ab. Pehle ka hi plan tha, we'll go to pavillion mall. I'll be back by evening most probably"&lt;/p&gt;
&lt;p&gt;Baba's face turned slightly pale. "Kidhar mat jaa", he croaked. "I might have COVID, and if I have it, you and your mother have it too. Don't spread it among others"&lt;/p&gt;
&lt;p&gt;"Nahi baba, you don't have it. Aaj test karaane kab jaa rahe ho?"&lt;/p&gt;
&lt;p&gt;"Right now, by 12"&lt;/p&gt;
&lt;p&gt;"Don't worry, COVID nahi hai aapko. It's just some normal sickness and aap kaise bhi thode boodhe ho rahe ho"&lt;/p&gt;
&lt;p&gt;He chuckled softly. "Beta sun, don't go anywhere. It's very risky."&lt;/p&gt;
&lt;p&gt;I was getting impatient by now. I had planned this for a long time, and I was getting impulsive after being bounded in these four walls for over 5 months. I resisted: "Baba please! I really want to go, bahut bore ho raha hoon! I don't even talk properly to my friends because signal nahi aati hai idhar! Just let me enjoy today, please, after getting my rank and results!"&lt;/p&gt;
&lt;p&gt;Ma also took Baba's side, and firmly said "Vishnu, No! You're not going". Baba finally caved in. He was truly proud of my IIT marks, it seemed. With a smile, he replied "Nahi, jaane do usse. He's still a kid, let him enjoy now. Go, maze karke aao."&lt;/p&gt;
&lt;p&gt;I didn't expect Baba to cave in so quickly; he has a reputation of being very strict. I started to second guess myself. Maybe this is serious and he has COVID? Is he using negative psychology or something to get me to stay? Or is he really so happy with my marks? These thoughts evaporated as my phone pinged; Swati had texted me, "Can we talk when we meet?" I decided to go to the meet. I changed quickly and went to my parents' room, where I proclaimed "Ma, Baba, I'm going. Taking the Activa. Call if needed. See you!". Baba nodded with a smile and Ma said in a motherly fashion "Stay Safe!". &lt;/p&gt;
&lt;p&gt;I reached the mall by 11:30 and strolled in. Swati was already there, and so were some of my friends. I said hi, and asked her how her results were. She replied with a smile "You First!"&lt;/p&gt;
&lt;p&gt;"Aw cmon, you must have checked the group for my marks"&lt;/p&gt;
&lt;p&gt;"Phir bhi, bol de"&lt;/p&gt;
&lt;p&gt;"323"&lt;/p&gt;
&lt;p&gt;My friends let out a whoop of joy. Vedant said "Really? Tu itna accha kab ban gaya padhai me?"&lt;/p&gt;
&lt;p&gt;I was laughing as well by now. After some more small talk, I finally got around to asking Swati her marks&lt;/p&gt;
&lt;p&gt;"Uh, 1302"&lt;/p&gt;
&lt;p&gt;"Oh nice, congrats! IIT Delhi Electrical milega tujhe with that rank!"&lt;/p&gt;
&lt;p&gt;"Yeah, I guess"&lt;/p&gt;
&lt;p&gt;"Itni dukhi mat ho, I'm also going to IITD Maths and Computing most probably. We'll still be together"&lt;/p&gt;
&lt;p&gt;She smiled back faintly. &lt;/p&gt;
&lt;p&gt;The rest of the day was a blur, as more friends came and we went over every minute detail of our lives during the lockdown; who got fat and who got thin and who got smarter, all was laid bare amid much laughter and camaderie. We finally got around to discussing where everyone was going, and everyone had a good idea of where they were going. A lot of us were going to IIT Delhi, so I realized that we'll all spend the next four years together as well.&lt;/p&gt;
&lt;p&gt;Once we were done with our bickering, it was 6pm. Just as we were about to leave, Swati said "Can we stay for a few minutes more? I want to tell you something" All of our friends gave us the teenage grin, and I said "sure!" Once everyone had left and we had strolled around and made some more small talk, I asked her, "So what did you want to tell me?"&lt;/p&gt;
&lt;p&gt;"I didn't get 1302"&lt;/p&gt;
&lt;p&gt;"Oh, Ok. What was your rank then?"&lt;/p&gt;
&lt;p&gt;"102"&lt;/p&gt;
&lt;p&gt;I could slowly feel the ground slipping out under me. I knew what this meant, but I put on a brave face for now and said "Wow, congrats! Why didn't you tell this to all of us then? 1302 kyun bolte gayi?"&lt;/p&gt;
&lt;p&gt;"You know I can't just do that! I was the weakest in our batch, the one who used to get the lowest marks in every test! How do you think everyone would feel if they found out I studied hard during the lockdown and jumped them? Do you feel happy that I got more than you even though you taught me 90% of what I know? Admit it!"&lt;/p&gt;
&lt;p&gt;Silence followed. It took me a minute to gather up my thoughts.&lt;/p&gt;
&lt;p&gt;"So what are you doing now? I'm guessing it's IITB CSE for you then"&lt;/p&gt;
&lt;p&gt;"Yes. Girls quota ki wajah se mil jaayega, and my parents want me to go there as well"&lt;/p&gt;
&lt;p&gt;This was playing out like one of those clichéd romance tragedies. I played along and said "I can come to IITB! Mechanical mil jaayega mujhe, we can be together"&lt;/p&gt;
&lt;p&gt;"Forget it, Vishnu. You saw that everyone's going to Delhi, and you also want to go there."&lt;/p&gt;
&lt;p&gt;I couldn't deny this. I came back to reality, and an awkward silence followed.&lt;/p&gt;
&lt;p&gt;"I think it's best we break up. Long distance nahi ho paayega mujhse. We can still be friends"&lt;/p&gt;
&lt;p&gt;That's when the ground slipped out from under me; this was not happening. I asked her in anguish "Why don't you come to Delhi? IITD CSE is no less than IITB!"&lt;/p&gt;
&lt;p&gt;"My parents won't let me, they think Delhi is not a good place."&lt;/p&gt;
&lt;p&gt;"I'm ready to come to Bombay for you, but you're not coming to Delhi? After the three years we've been through together, all those times I taught you, all the times we went out, you're just..."&lt;/p&gt;
&lt;p&gt;I choked up; I couldn't speak any more. I didn't have to. She completed the words for me&lt;/p&gt;
&lt;p&gt;"Well, I guess this is the last time we meet. Best of luck for whatever you do in life."&lt;/p&gt;
&lt;p&gt;I nodded, and watched her walk away.&lt;/p&gt;
&lt;p&gt;I turned the other way and walked the mall a few times. It was relatively empty because of COVID, and I had the floors to myself and my thoughts. Stupidly, I realized that this was coming; there's a reason why teenage love is called puppy love, and I should have seen it earlier. There was no way our relationship would continue if she didn't need me academically, and I was too naïve to see that. I went through the five stages of grief all to quickly, blaming everyone from her parents to the girl quota, without which she would have come to Delhi. Eventually, I calmed down enough to ride my scooter home.&lt;/p&gt;
&lt;p&gt;Once I came home by 7:30, I realized that in haste, I had forgotten to take the house keys. "No Worries, Ma must have come back home" I thought as I rang the bell. No response. I waited for 5 minutes and rang the bell again. No response yet again. Frustrated, I spammed the bell. Once I finally accepted that my parents weren't home, I tried calling them, only for the cell phone signal to not reach them. I was cursing myself by now; what was a very happy day for everyone else was turning out to be my worst nightmare. &lt;/p&gt;
&lt;p&gt;It struck me at once; they weren't back because dad had tested positive for COVID. Which meant that they were in one of the many hospitals in the city. This meant that I was also, in all probability, COVID positive. "Damnit" I cursed myself. I shouldn't ask my neighbours for help, in this case. In fact, there was nobody I could ask for help! I must have spread it to all my friends, and to Swati as well. This cooled the fire burning in me. Somewhat. My thoughts immediately turned to Baba and Ma; Baba was definitely not looking well today morning. Weary at the end of this long day, I sat down in front of the door, too mentally tired to go anywhere. I have been a lifelong atheist, but that was the only time I reached out to god with all the willpower I could muster, and asked him to save my father.&lt;/p&gt;
&lt;p&gt;It was around 8 by the time I heard footsteps approaching me. I looked up and saw my uncle Jitendra; Uncle had already got COVID recently and he was now immune to it. I asked him "Uncle, Where is Baba? Why haven't they come home?"&lt;/p&gt;
&lt;p&gt;Jitendra uncle sat down, and it was then that I realized his eyes were red and glazed over. He said softly, "Baba was waiting for a long time until he tested positive for COVID, and they had to shift him to hospital immediately. He had a heart attack at around 7:15, and didn't make it. Your Mummy was trying to call you but you were unreachable, so I decided to find you and tell you. I'm sorry."&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This story was originally written for BSP IIT Delhi's Muse magazine, but that 
hasn't been published yet :P&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; This is a work of fiction. Unless otherwise indicated, all the names, characters, businesses, places, events and incidents in this book are either the product of the author's imagination or used in a fictitious manner. Any resemblance to actual persons, living or dead, or actual events is purely coincidental.&lt;/p&gt;</content><category term="Writing"></category><category term="Writing"></category></entry><entry><title>Function transforms (providing a broader picture of Laplace Transforms)</title><link href="https://aniruddhadeb.com/articles/2021/function-transforms.html" rel="alternate"></link><published>2021-05-12T00:00:00+05:30</published><updated>2021-05-12T00:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2021-05-12:/articles/2021/function-transforms.html</id><summary type="html">&lt;p&gt;I'll begin this article by brushing up a few definitions:&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;function&lt;/strong&gt; is a &lt;strong&gt;mapping&lt;/strong&gt; between two sets: the domain D and the codomain C.&lt;/p&gt;
&lt;p&gt;&lt;img alt="function definition" src="/articles/2021/res/function.png"&gt;&lt;/p&gt;
&lt;p&gt;It's very important to note here that the function is &lt;strong&gt;the mapping itself&lt;/strong&gt;, and
not an element in the codomain or the domain. The function …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'll begin this article by brushing up a few definitions:&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;function&lt;/strong&gt; is a &lt;strong&gt;mapping&lt;/strong&gt; between two sets: the domain D and the codomain C.&lt;/p&gt;
&lt;p&gt;&lt;img alt="function definition" src="/articles/2021/res/function.png"&gt;&lt;/p&gt;
&lt;p&gt;It's very important to note here that the function is &lt;strong&gt;the mapping itself&lt;/strong&gt;, and
not an element in the codomain or the domain. The function operates on an element
in the domain to give an element in the codomain. Formally, we would write this 
function as $f:D \to C$&lt;/p&gt;
&lt;p&gt;I'll also brush up on what a &lt;strong&gt;Vector Space&lt;/strong&gt; is: a vector space $V$ is a set of 
vectors over a given field $F$ on which two operations (functions) are defined:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$+:V \times V \to V$ - this is called Addition&lt;/li&gt;
&lt;li&gt;$\cdot : V \times F \to V$ - this is called Scalar Multiplication.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are some other requisites of a vector space, such as the existence of 
an additive inverse and identity elements, but I won't get into the nitty-gritties
of those. Just keep in mind that &lt;strong&gt;addition and scalar multiplication over a 
vector space are closed.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Function Spaces&lt;/h2&gt;
&lt;p&gt;Suppose for a function $f:X \to V$, the codomain of a function is a vector space 
$V$ over $F$ ($X$ is the domain, which can be any set). Then, by definition, for any two elements $\vec{a}, \vec{b} \in V$ 
and a scalar $k \in F$, $\vec{a} + \vec{b} \in V$ and $k \cdot \vec{a} \in V$.&lt;/p&gt;
&lt;p&gt;Consider another function $g: X \to V$. Suppose now that for any $x \in X$, 
$f(x) = \vec{a}$ and $g(x) = \vec{b}$ for some $\vec{a}, \vec{b} \in V$. Therefore,
$\vec{a} + \vec{b} = f(x) + g(x) \in V$. We can define another function
$(f+g)$ such that $(f+g)(x) = f(x) + g(x)$. Note that &lt;strong&gt;this is valid
because V is a vector space, and because addition is closed under a vector space&lt;/strong&gt;.
The sum of two functions from $X \to V$ is also a function from $X \to V$!&lt;/p&gt;
&lt;p&gt;Let's try proving the same for scalar multiplication. For any $c \in F$, we have
$c\cdot\vec{a} = c\cdot f(x) \in V$. Define $(c \cdot f)$ such that 
$(c \cdot f)(x) = c \cdot f(x)$. This is also a function from $X \to V$.&lt;/p&gt;
&lt;p&gt;From the above two statements, we can see that the &lt;em&gt;maps themselves are linear&lt;/em&gt;:
that is, they can be added and scalarly multiplied, with the resulting map
preserving the domain and codomain. We can thus say that &lt;strong&gt;the functions thus
defined form a vector space themselves, which we call a function space&lt;/strong&gt;.
Note that there are a few more details involved, such as the existence
of an identity function and an additive inverse. Similar to the additive/multiplicative
proofs, these follow from the properties of the vector space. One interesting question to note
is &lt;em&gt;what if there is no function in the space that maps an element of $X$ to the identity element
$\vec{0}$ of $V$?&lt;/em&gt; Would the resulting function space still be a vector space?&lt;sup&gt;1&lt;/sup&gt; &lt;/p&gt;
&lt;h2&gt;Function transformations&lt;/h2&gt;
&lt;p&gt;If function spaces behave like vector spaces, this begs the question: what's the
equivalent of linear transformations for function spaces? The equivalent is called
a &lt;strong&gt;function transformation&lt;/strong&gt;, and it converts a function $f:X \to V$ to another 
function $T(f) = F:Y \to W$. Note that if $f$ lies in a function space $\mathcal{S}_f$, then 
$F$ need not lie in a function space! Consider the counterexample $P(f)$ on $f:X \to V$, which maps
all $x \in X$ to $1$. This is not a function space, as $F(x_1) + F(x_2) = 2 \not\in {1}$.
We would need to prove the linearity of $F$ independently of $f$ being a function 
space. Note also that this particular transform doesn't have an inverse. Transforms
that are linear in nature generally have an inverse transform associated with them.&lt;/p&gt;
&lt;p&gt;Some examples of function transformations include $Df = \frac{df}{dx}$ (the 
differential transform), as well as $I(f) = \int_a^b f dx$, the integral transform.
Note that these are both simple examples of transforms which preserve mapping, that is
if $f:\Bbb{R} \to \Bbb{R}$ and f is differentiable on $\Bbb{R}$, then $Df:\Bbb{R} \to \Bbb{R}$ as well. An example
of something that doesn't preserve mapping would be the parameterization 
transform for a multivariate function: if we have $f:\Bbb{R^3} \to \Bbb{R}$, then
the parameterization transform $P(f(x,y,z)) = F(x(t), y(t), z(t)) = F(t)$ gives
$F: \Bbb{R} \to \Bbb{R}$. &lt;/p&gt;
&lt;h2&gt;Integral transformations&lt;/h2&gt;
&lt;p&gt;Integral transformations are just one type of functional transform, but they're 
the most used type of transform due to their usefulness. A general integral
transform takes the form&lt;/p&gt;
&lt;p&gt;$$I(f) = \int_{x_1}^{x_2} K(s,x)f(x)dx$$&lt;/p&gt;
&lt;p&gt;$K(s,x)$ is called the &lt;em&gt;kernel&lt;/em&gt; of the integral transform, and the transform
has different intuitive meanings depending on the kernel and the limits used.
A full list of common kernels can be found at the &lt;a href="https://en.wikipedia.org/wiki/Integral_transform"&gt;Wikipedia page&lt;/a&gt; of
Integral transforms. A few key things to note however are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The integral transform exists only if the integral &lt;strong&gt;converges&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All integral transforms are linear&lt;/strong&gt;: this stems from the linearity property
   of the integral itself. Therefore, for a given function space, applying an 
   integral transform on every member of that function space would also give 
   us a function space.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The Laplace transform&lt;/h2&gt;
&lt;p&gt;We finally come to the &lt;a href="https://en.wikipedia.org/wiki/Laplace_transform"&gt;Laplace transform&lt;/a&gt;: for the laplace transform, the kernel
is $K(s,x) = e^{-px}$ and the limits are $x_1 = 0$ and $x_2 = \infty$. 
Plugging this into the general integral transform gives us the laplace transform:&lt;/p&gt;
&lt;p&gt;$$\boxed{\mathcal{L}(f(x)) = F(p) = \int_0^\infty e^{-px}f(x)dx}$$&lt;/p&gt;
&lt;p&gt;Another bit of intuition regarding the laplace series comes from thinking about it
as a &lt;em&gt;continuous version of a power series&lt;/em&gt;. If we consider the power series&lt;/p&gt;
&lt;p&gt;$$F(x) = \sum_{n=0}^\infty f(n)x^n$$&lt;/p&gt;
&lt;p&gt;The continuous analogue of this power series is the integral&lt;/p&gt;
&lt;p&gt;$$F(x) = \int_0^\infty f(t)x^t\ dt = \int_0^\infty f(t)\left(e^{\ln x}\right)^t\ dt$$&lt;/p&gt;
&lt;p&gt;For this integral to converge, $\ln x &amp;lt; 0$. Let $p = -\ln x, p &amp;gt; 0$. The transform
then becomes&lt;/p&gt;
&lt;p&gt;$$F(p) = \int_0^\infty f(t)e^{-pt}\ dt$$&lt;/p&gt;
&lt;p&gt;Therefore, the laplace transform is like a continuous analogue of the power series.&lt;/p&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;p&gt;I haven't covered the several properties of the laplace transform: those specific
details can be found on the &lt;a href="https://en.wikipedia.org/wiki/Laplace_transform#Properties_and_theorems"&gt;Wikipedia page&lt;/a&gt;. 
This was mainly to give an overview of the mathematical backbone that goes into
transformations such as the laplace and fourier transforms.&lt;/p&gt;
&lt;p&gt;For further reading on function spaces, see &lt;a href="https://files.vipulnaik.com/exposition/functionspaces.pdf"&gt;Vipul Naik's notes&lt;/a&gt; and
&lt;a href="https://terrytao.files.wordpress.com/2008/03/function_spaces1.pdf"&gt;Terry Tao's notes&lt;/a&gt; on the same.
More on laplace transforms (including problems) are given in George Simmons' 
&lt;em&gt;Differential Equations with Applications and Historical Notes&lt;/em&gt;, chapter 9.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;No, it wouldn't. This is analogous to having $\vec{0}$ as an element
of a vector space: if a vector space doesn't have $\vec{0}$, then it's not a 
vector space as there is no element $k \in V$ such that for every element $v \in V$,
$k + v = v$.&lt;/p&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category></entry><entry><title>LaTeX primer</title><link href="https://aniruddhadeb.com/articles/2021/latex-primer.html" rel="alternate"></link><published>2021-03-21T21:36:00+05:30</published><updated>2021-03-21T21:36:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2021-03-21:/articles/2021/latex-primer.html</id><summary type="html">&lt;p&gt;This is a short &lt;em&gt;getting started&lt;/em&gt; article on LaTeX; Recently, one of our courses
involved a bit of LaTeX work, and this is meant to be a short introduction on 
how to use LaTeX to explain one's working.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;LaTeX (Pronounced &lt;em&gt;lay-tech&lt;/em&gt;, stylized $\LaTeX$), at it's core, is merely …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a short &lt;em&gt;getting started&lt;/em&gt; article on LaTeX; Recently, one of our courses
involved a bit of LaTeX work, and this is meant to be a short introduction on 
how to use LaTeX to explain one's working.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;LaTeX (Pronounced &lt;em&gt;lay-tech&lt;/em&gt;, stylized $\LaTeX$), at it's core, is merely a text formatting system. One of the main differences
between LaTeX and other programs such as MS word is that LaTeX is a WYSIWYM 
(What you see is what you mean) system, as compared to WYSIWYG (What you see 
is what you &lt;em&gt;get&lt;/em&gt;) systems. This means that you won't be able to see your changes
while editing, say LaTeX in your moodle explanation. &lt;/p&gt;
&lt;p&gt;To test small LaTeX snippets without installing anything, you can use 
&lt;a href="https://quicklatex.com"&gt;quicklatex.com&lt;/a&gt; or &lt;a href="http://texrendr.com"&gt;texrendr.com&lt;/a&gt;.
The former renders it using an actual LaTeX engine, while the latter uses 
MathJax (there are minor differences, which I'll get to later). For now, both
are equivalent, and you should be able to use both without problems. You could
also try testing with the &lt;a href="https://top.gg/bot/510789298321096704"&gt;TeXit discord bot&lt;/a&gt;, on
one of the many servers which have it. It also works if you Directly message it
your code, which is nice.&lt;/p&gt;
&lt;h2&gt;Basic commands&lt;/h2&gt;
&lt;p&gt;Getting started is quite easy: here's an example of some LaTeX code which does stuff&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\int&lt;/span&gt; &lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;dx&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\sqrt&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;1-x&lt;span class="nb"&gt;^&lt;/span&gt;2&lt;span class="nb"&gt;}}&lt;/span&gt; = &lt;span class="k"&gt;\sin&lt;/span&gt;&lt;span class="nb"&gt;^{&lt;/span&gt;-1&lt;span class="nb"&gt;}&lt;/span&gt;(x) + c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and here's the output it generates:&lt;/p&gt;
&lt;p&gt;$$\int \frac{dx}{\sqrt{1-x^2}} = \sin^{-1}(x) + c$$&lt;/p&gt;
&lt;p&gt;Let's go over what the code does, command by command:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;\&lt;/code&gt; (backslash) is used to represent a &lt;em&gt;command&lt;/em&gt;: prefixing a word with 
   a backslash identifies it as a command, and commands are used to either
   render specific symbols (&lt;code&gt;\int&lt;/code&gt;, &lt;code&gt;\alpha&lt;/code&gt;) or typeset text in a specific way
   (&lt;code&gt;\frac&lt;/code&gt;, &lt;code&gt;\sqrt&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\int&lt;/code&gt; renders an integral sign, and &lt;code&gt;\frac&lt;/code&gt; creates a fraction of the form
   &lt;code&gt;\frac{numerator}{denominator}&lt;/code&gt;. Braces are used in latex to demarcate parts
   of a command. They are optional, and in a pinch you could skip them
   altogether; for example, &lt;code&gt;\frac 1n&lt;/code&gt; renders as $\frac 1n$&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;\sqrt&lt;/code&gt; sign is self-explanatory. Note that $\sin$ is prefixed with a 
   backslash. There's a very minor difference here: &lt;code&gt;\sin&lt;/code&gt; would render $\sin$
   (upright), while &lt;code&gt;sin&lt;/code&gt; would render $sin$ (slanting). Hence, it's a good
   practice to prefix trig functions with a backslash. Raising -1 to the power
   requires explicit braces, as &lt;code&gt;\sin^-1&lt;/code&gt; would render $\sin^-1$ rather than
   $\sin^{-1}$, which is not what we need.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This small example covers most of what we'll use. The real power comes from
the fact that &lt;em&gt;by nesting these commands, we can create as complex an 
expression as we like&lt;/em&gt;. Here's an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\int&lt;/span&gt; &lt;span class="k"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\sin&lt;/span&gt;&lt;span class="nb"&gt;^&lt;/span&gt;3&lt;span class="k"&gt;\frac\theta&lt;/span&gt; 2&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\cos\frac\theta&lt;/span&gt;2 &lt;span class="k"&gt;\sqrt&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\cos&lt;/span&gt;&lt;span class="nb"&gt;^&lt;/span&gt;3&lt;span class="k"&gt;\theta&lt;/span&gt; + &lt;span class="k"&gt;\cos&lt;/span&gt;&lt;span class="nb"&gt;^&lt;/span&gt;2&lt;span class="k"&gt;\theta&lt;/span&gt; + &lt;span class="k"&gt;\cos\theta&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt; d&lt;span class="k"&gt;\theta&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;gives us
$$\int \frac{\sin^3\frac\theta 2}{\cos\frac\theta2 \sqrt{\cos^3\theta + \cos^2\theta + \cos\theta}} d\theta$$&lt;/p&gt;
&lt;p&gt;Notice how this is only made up of the simple commands that we used (and &lt;code&gt;\theta&lt;/code&gt;
to render the $\theta$ symbol)&lt;/p&gt;
&lt;p&gt;There's a nice list of latex symbols &lt;a href="https://www.egr.msu.edu/~renjian/LaTeX-Math-Symbols.pdf"&gt;here&lt;/a&gt;.
If you ever get stuck, or come across a weird symbol not mentioned here, 
&lt;a href="https://detexify.kirelabs.org/classify.html"&gt;Detexify&lt;/a&gt; is a tool for converting
handwritten math symbols into LaTeX, so use that. &lt;/p&gt;
&lt;h2&gt;Environments&lt;/h2&gt;
&lt;p&gt;An environment is used to format a block of text in latex. Environments 
generally begin with a &lt;code&gt;\begin&lt;/code&gt; tag and end with a &lt;code&gt;\end&lt;/code&gt; tag. &lt;/p&gt;
&lt;p&gt;Let's say you have a set of linear equations and you want to align all of them
so that they look neat and tidy, something like the example below:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
5x + y - 3z &amp;amp;= 6 \\
2x + 3y + 4z &amp;amp;= 8 \\
x + 9y + 7z &amp;amp;= 3 
\end{align}
$$&lt;/p&gt;
&lt;p&gt;The way to do this is using the &lt;code&gt;align&lt;/code&gt; environment, The code to generate this
is below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;align&lt;span class="nb"&gt;}&lt;/span&gt;
5x + y - 3z &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt;= 6 &lt;span class="k"&gt;\\&lt;/span&gt;
2x + 3y + 4z &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt;= 8 &lt;span class="k"&gt;\\&lt;/span&gt;
x + 9y + 7z &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt;= 3 
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;align&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some key points here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;\begin{align}&lt;/code&gt; and &lt;code&gt;\end{align}&lt;/code&gt; commands demarcate the environment: 
   similar to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tags in HTML. There are different 
   environments, such as &lt;code&gt;center&lt;/code&gt; and &lt;code&gt;bmatrix&lt;/code&gt;, but we'll get to those in a 
   minute&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;\\&lt;/code&gt; command tells latex to end that equation and start the next equation
   on a new line.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;&amp;amp;&lt;/code&gt; character tells latex to align the commands at that character. 
   A small exercise for the reader would be to align the equations at the yth term
   (eg &lt;code&gt;5x + &amp;amp;y - 3z = 6&lt;/code&gt; and so on) and see what happens. Note that the meaning
   of &lt;code&gt;&amp;amp;&lt;/code&gt; changes depending on context, but in an align environment, this is 
   what it's used for.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another example: say you want to express this set of equations in a matrix. 
Something like this:&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix}
5 &amp;amp; 1 &amp;amp; -3 \\
2 &amp;amp; 3 &amp;amp; 4 \\
1 &amp;amp; 9 &amp;amp; 7 \\
\end{bmatrix}
\begin{bmatrix}x \\ y \\ z\end{bmatrix}
= 
\begin{bmatrix} 6 \\ 8 \\ 3 \end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;bmatrix&lt;/code&gt; environment for this. The code is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;bmatrix&lt;span class="nb"&gt;}&lt;/span&gt;
5 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 1 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; -3 &lt;span class="k"&gt;\\&lt;/span&gt;
2 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 3 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 4 &lt;span class="k"&gt;\\&lt;/span&gt;
1 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 9 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 7 &lt;span class="k"&gt;\\&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;bmatrix&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;bmatrix&lt;span class="nb"&gt;}&lt;/span&gt;x &lt;span class="k"&gt;\\&lt;/span&gt; y &lt;span class="k"&gt;\\&lt;/span&gt; z&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;bmatrix&lt;span class="nb"&gt;}&lt;/span&gt;
= 
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;bmatrix&lt;span class="nb"&gt;}&lt;/span&gt; 6 &lt;span class="k"&gt;\\&lt;/span&gt; 8 &lt;span class="k"&gt;\\&lt;/span&gt; 3 &lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;bmatrix&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice the different use of &lt;code&gt;&amp;amp;&lt;/code&gt; here.&lt;/p&gt;
&lt;p&gt;Let's say you want to solve this system of equations using cramer's rule, and 
want to write it as a determinant. Here's how that's done, using &lt;code&gt;array&lt;/code&gt;:
$$
\Delta = \left| \begin{array}{ccc}
5 &amp;amp; 1 &amp;amp; -3 \\
2 &amp;amp; 3 &amp;amp; 4 \\
1 &amp;amp; 9 &amp;amp; 7 \\
\end{array} \right|
$$&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\Delta&lt;/span&gt; = &lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;array&lt;span class="nb"&gt;}{&lt;/span&gt;|ccc|&lt;span class="nb"&gt;}&lt;/span&gt;
5 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 1 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; -3 &lt;span class="k"&gt;\\&lt;/span&gt;
2 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 3 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 4 &lt;span class="k"&gt;\\&lt;/span&gt;
1 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 9 &lt;span class="nb"&gt;&amp;amp;&lt;/span&gt; 7 &lt;span class="k"&gt;\\&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;array&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice how &lt;code&gt;array&lt;/code&gt; has an additional set of parameters here: &lt;code&gt;{|ccc|}&lt;/code&gt; denotes
that this array has three columns, and that we want vertical lines at the start
of the first column and the end of the last column. If we wanted something
like a table, then &lt;code&gt;{c|c|c}&lt;/code&gt; is what we would have used. Inserting horizontal
lines in an array can be done using &lt;code&gt;\hline&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Some more tips&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;If you want to add a small space between terms in math mode, prefix the space
   with a backslash. LaTeX ignores whitespace and a few special characters, so
   displaying them requires that we escape them with a backslash, similar to
   most other programming languages. For example, &lt;code&gt;\int x dx&lt;/code&gt; gives $\int x dx$, whereas 
   &lt;code&gt;\int x\ dx&lt;/code&gt; gives $\int x\ dx$. Similarly, for special characters, try 
   printing &lt;code&gt;5%&lt;/code&gt; in latex and be surprised :) how would you display the % symbol?&lt;/li&gt;
&lt;li&gt;If you come across an interesting LaTeX snippet online (rendered with MathJaX),
   right-click on it to open up the MathJaX context menu, and click on &lt;em&gt;show 
   math as -&amp;gt; TeX commands&lt;/em&gt; to see the code that went into creating that.
   This is a great way of learning LaTeX. You could &lt;a href="https://aniruddhadeb.com/articles/2020/hard-limits.html"&gt;skim through some of the
   math-heavy content in this blog to get a taste of that&lt;/a&gt;
   &lt;small&gt;&amp;lt;/self-promotion&amp;gt;&lt;/small&gt;
   &lt;img alt="img" src="res/math_disp.png"&gt;&lt;/li&gt;
&lt;li&gt;Brackets are not auto-resizing in latex. Say you want to write the product 
   of two integrals, such as &lt;code&gt;(\int x\ dx)(\int x^2\ dx)&lt;/code&gt;.This gives
   us very puny brackets: $$(\int x\ dx)(\int x^2\ dx)$$ If we have to remedy
   this, we use the &lt;code&gt;\left(&lt;/code&gt; and &lt;code&gt;\right)&lt;/code&gt; commands to auto-resize the enclosing
   brackets to fit the content within: $$\left(\int x\ dx\right)\left(\int x^2\ dx\right)$$ This is
   much nicer, and works with other brackets as well&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Difference between LaTeX and MathJax&lt;/h2&gt;
&lt;p&gt;The pero few among you must have noticed that this was barely a LaTeX introduction
(sorry for the misnomer :P) There is quite a bit of difference between MathJaX
and LaTeX; LaTeX is an end-to-end typesetting system, while MathJaX is a javascript
library that displays math online. A typical LaTeX document begins with the
&lt;code&gt;\begin{document}&lt;/code&gt; environment, and a few imports before that. However, &lt;strong&gt;this
was meant to be a tutorial on merely typesetting math using a few LaTeX commands,
and I think it serves it's purpose&lt;/strong&gt;. There are quite a few links and resources
in the conclusion section, which you should check out for more info on LaTeX.&lt;/p&gt;
&lt;p&gt;Note that MathJaX requires you to enclose math within either &lt;code&gt;$ $&lt;/code&gt; or &lt;code&gt;\( \)&lt;/code&gt; 
for inline math and &lt;code&gt;$$ $$&lt;/code&gt; or &lt;code&gt;\[ \]&lt;/code&gt; for displayed math (centered, on a 
new line). &lt;strong&gt;Don't forget to do this, otherwise the math would not render&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Concluding notes &amp;amp; References&lt;/h2&gt;
&lt;p&gt;LaTeX is far larger than what I've covered in this article, but hopefully this
shows you that there exists an elegant way to typeset math. For more information,
check out the extensive LaTeX documentation on &lt;a href="https://www.overleaf.com/learn"&gt;Overleaf&lt;/a&gt;.
If you have any doubts, check out the TeX community over at 
&lt;a href="https://tex.stackexchange.com"&gt;tex.stackexchange.com&lt;/a&gt;, there's a high chance
that your doubt is already answered. &lt;/p&gt;
&lt;p&gt;Happy Math-ing!&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Mathematics"></category></entry><entry><title>C development on a Mac</title><link href="https://aniruddhadeb.com/articles/2021/c-mac.html" rel="alternate"></link><published>2021-03-18T11:46:00+05:30</published><updated>2021-03-18T11:46:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2021-03-18:/articles/2021/c-mac.html</id><summary type="html">&lt;p&gt;C development on a Mac has it's fair share of traps and pitfalls, even though
Mac is supposed to be POSIX compliant. I'll cover a few of them here, with the
hope that nobody repeats the same mistakes :)&lt;/p&gt;
&lt;h2&gt;XCode CLT Pitfalls&lt;/h2&gt;
&lt;p&gt;The first thing one does while starting out with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;C development on a Mac has it's fair share of traps and pitfalls, even though
Mac is supposed to be POSIX compliant. I'll cover a few of them here, with the
hope that nobody repeats the same mistakes :)&lt;/p&gt;
&lt;h2&gt;XCode CLT Pitfalls&lt;/h2&gt;
&lt;p&gt;The first thing one does while starting out with C development is to install
a compiler. This is slightly more complicated than it looks on Mac: the simple
way is to go the way of installing XCode command line tools, but there's a few
things here to note:&lt;/p&gt;
&lt;h3&gt;You have to be an apple developer&lt;/h3&gt;
&lt;p&gt;This means that you can't have a C/C++ toolchain without being a part of
of their developer program. There is a (messy) way of working around this, by instead
installing and using GCC with HomeBrew, but I'll get to that in a minute. &lt;/p&gt;
&lt;h3&gt;XCode CLT uses the &lt;code&gt;clang&lt;/code&gt; toolchain&lt;/h3&gt;
&lt;p&gt;This is by far the most important pitfall, as XCode purposefully misaliases 
a lot of stuff. After installing XCode CLT (and provided that you don't have
GCC installed or aliased), try doing a &lt;code&gt;gcc -v&lt;/code&gt; or &lt;code&gt;g++ -v&lt;/code&gt;. You'd get&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Configured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/usr/include/c++/4.2.1
Apple clang version 12.0.0 (clang-1200.0.32.27)
Target: x86_64-apple-darwin19.6.0
Thread model: posix
InstalledDir: /Library/Developer/CommandLineTools/usr/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is quite misleading, as &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;clang&lt;/code&gt; are fundamentally different 
compilers. &lt;a href="https://stackoverflow.com/questions/25745759/clang-vs-gcc-vs-msvc-template-conversion-operator-which-compiler-is-right/25758367#25758367"&gt;Here's one example of that&lt;/a&gt;.
A more accessible example would be this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/++&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;try compiling this with &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;clang&lt;/code&gt;, and be surprised*.&lt;/p&gt;
&lt;h3&gt;Headers? What Headers?&lt;/h3&gt;
&lt;p&gt;Headers are also &lt;em&gt;very weirdly located&lt;/em&gt; in &lt;code&gt;/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include&lt;/code&gt;,
and these headers are also &lt;strong&gt;not&lt;/strong&gt; symlinked to &lt;code&gt;/usr/include&lt;/code&gt; by the installer.
This sucks, and I struggled with making vim autocomplete work because of this
reason; vim's path searches &lt;code&gt;/usr/include&lt;/code&gt; and not this weird obscure path.
Once I manually included it, it &lt;strike&gt;looked horrible and I needed to symlink it
to /usr/include&lt;/strike&gt; worked okayish.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="res/vim_autocomp.png"&gt;&lt;/p&gt;
&lt;p&gt;One note is that you could also use the path &lt;code&gt;/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include&lt;/code&gt;,
as &lt;code&gt;MacOSX.sdk&lt;/code&gt; is linked to the latest version of SDK installed. This does not
make the location of includes any less weird. &lt;/p&gt;
&lt;p&gt;Another thing to note is that other libraries install their headers in &lt;code&gt;/usr/local/include&lt;/code&gt;,
so this discrepancy is bad. This has also not been fixed in Big Sur: how hard
is it to keep a set of headers in &lt;code&gt;/usr/include&lt;/code&gt; rather than in this unsightly
place! I mean every UNIX system does this! Ugh&lt;/p&gt;
&lt;h3&gt;CTags&lt;/h3&gt;
&lt;p&gt;CLT also ships with the old ctags rather than exuberant ctags, which is basically
useless. Neither is there a simple way to distinguish between the ctags that
it ships and exuberant ctags until it fails hard when you go to make your tags
file, since they have the same &lt;code&gt;ctags&lt;/code&gt; command. The way of fixing this is to 
install the proper ctags with &lt;code&gt;brew install ctags&lt;/code&gt; and then add 
&lt;code&gt;alias ctags=/usr/local/include/ctags&lt;/code&gt; to your &lt;code&gt;.zshrc&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Using GCC&lt;/h2&gt;
&lt;p&gt;So you decide that the &lt;code&gt;clang&lt;/code&gt; toolchain is not working out for you (maybe because
it's slow or for other reasons), and you decide to switch to the &lt;code&gt;gcc&lt;/code&gt; toolchain
(by Toolchain, I refer to all associated tools, so that's &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;g++&lt;/code&gt;, &lt;code&gt;gdb&lt;/code&gt; etc).
Installing the tools are quite easy, and they just happen with 
&lt;code&gt;brew install gcc gdb&lt;/code&gt;. However, &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;g++&lt;/code&gt; are already taken by &lt;code&gt;clang&lt;/code&gt;,
so you'll have to export them in your &lt;code&gt;.zshrc&lt;/code&gt; again&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;gcc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/gcc-10
&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;g++&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/g++-10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;GDB, however, is &lt;em&gt;very&lt;/em&gt; tricky to get working right; MacOS due to SIP and 
Gatekeeper, does not allow running processes to latch on to other processes.
For GDB to work, it would need to be signed. For this, you'll have to sign
it yourself with a certificate, and add that certificate to the trusted
keychain in your system. I &lt;em&gt;still&lt;/em&gt; could not get it to work after this (more
info &lt;a href="https://dev.to/jasonelwood/setup-gdb-on-macos-in-2020-489k"&gt;here&lt;/a&gt;), and 
just using &lt;code&gt;sudo&lt;/code&gt; was a hack that I used while I tried to get GDB to work. 
LLDB, however, is much better integrated with debugging, and I eventually
shifted over to using LLDB rather than GDB (aided by &lt;a href="https://lldb.llvm.org/use/map.html"&gt;this&lt;/a&gt;
resource). &lt;/p&gt;
&lt;p&gt;The GCC/G++ aliasing is highly recommended, and you could leave out GDB (which
is what I've done in my current setup)&lt;/p&gt;
&lt;h2&gt;Other stuff&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; seems to work without a hitch so far, which is a good thing. &lt;code&gt;cscope&lt;/code&gt; 
also had to be installed with brew, and cscope also works well now. I'll need 
to finish setting up my vim environment for C autocompletion and play around
more with CTags and cscope (maybe write about it in the next post :)) For 
now, this has unfortunately turned into more of a rant than a how-to, but I
still hoped it help some of you avoid these traps and pitfalls.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;*: GCC gives the output as 1, while clang gives it as 0&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="C"></category></entry><entry><title>Understanding Jacobians</title><link href="https://aniruddhadeb.com/articles/2021/understanding-jacobians.html" rel="alternate"></link><published>2021-01-29T15:11:00+05:30</published><updated>2021-01-29T15:11:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2021-01-29:/articles/2021/understanding-jacobians.html</id><summary type="html">&lt;p&gt;$\newcommand{\pdv}[2]{\frac{\partial{#1}}{\partial{#2}}}$
$\newcommand{\ah}{\pmb{a} + \pmb{h}}$
$\newcommand{\a}{\pmb{a}}$
$\newcommand{\h}{\pmb{h}}$&lt;/p&gt;
&lt;h2&gt;The Jacobian Matrix&lt;/h2&gt;
&lt;p&gt;Consider a function that maps reals to reals, $f:\Bbb{R} \to \Bbb{R}$. The linear
approximation of this function is given by 
$$f(a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;$\newcommand{\pdv}[2]{\frac{\partial{#1}}{\partial{#2}}}$
$\newcommand{\ah}{\pmb{a} + \pmb{h}}$
$\newcommand{\a}{\pmb{a}}$
$\newcommand{\h}{\pmb{h}}$&lt;/p&gt;
&lt;h2&gt;The Jacobian Matrix&lt;/h2&gt;
&lt;p&gt;Consider a function that maps reals to reals, $f:\Bbb{R} \to \Bbb{R}$. The linear
approximation of this function is given by 
$$f(a+h) \approx f(a) + hf'(a)$$
This is pretty simple to do, and follows from taylor's expansion upto the first order.&lt;/p&gt;
&lt;p&gt;Let's try expanding this concept to vector spaces. For a function $f:\Bbb{R}^n \to \Bbb{R}$, 
it's linear approximation is given by 
$$f(\pmb{a} + \pmb{h}) \approx f(\pmb{a}) + \pmb{h}\cdot\nabla{f}(\a)$$
(bold type indicates vectors). This also follows from the taylor theorem for 
multivariable functions.&lt;/p&gt;
&lt;p&gt;What do we do when we have a function mapping vector spaces to vector spaces?
Consider the function $f:\Bbb{R}^n \to \Bbb{R}^m$. What would be the approximation
term here?
$$f(\pmb{a} + \pmb{h}) \approx f(\pmb{a})\ +\ ???$$&lt;/p&gt;
&lt;p&gt;Let's try to solve this by decomposing the function $f:\Bbb{R}^n \to \Bbb{R}^m$
into $f_i:\Bbb{R}^n \to \Bbb{R}$, $i = 1, 2, \cdots ,m$. For each $f_i$, we get
$$f_i(\pmb{a} + \pmb{h}) \approx f_i(\pmb{a}) + \pmb{h}\cdot\nabla{f_i}(\a)$$&lt;/p&gt;
&lt;p&gt;If we collect all these approximations into a vector by representing the term 
$\pmb{h}\cdot\nabla f_i(\a)$ as a matrix product, we get our approximation for $f$:&lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix} f_1(\ah) \\ f_2(\ah) \\ \vdots \\ f_m(\ah) \end{bmatrix}
\approx 
\begin{bmatrix} f_1(\a) \\ f_2(\a) \\ \vdots \\ f_m(\a) \end{bmatrix} + 
\begin{bmatrix} \nabla^T f_1(\a) \\ \nabla^T f_2(\a) \\ \vdots \\ \nabla^T f_m(\a) \end{bmatrix}
\begin{bmatrix} h_1 \\ h_2 \\ \vdots \\ h_n \end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;I've written the functions out in matrix form for clarity. $\nabla^T$ denotes 
the transpose of the gradient vector. In simpler terms, we can rewrite this as
$$f(\a + \h) \approx f(\a) + \pmb{\mathrm{J}}_f(\a)\h$$&lt;/p&gt;
&lt;p&gt;Here, $\pmb{\mathrm{J}}_f(\a)$ is called the &lt;strong&gt;Jacobian matrix&lt;/strong&gt;, and when expanded, it looks
something like this:&lt;/p&gt;
&lt;p&gt;$$\pmb{\mathrm{J}} = \begin{bmatrix} \pdv{f_1}{x_1} &amp;amp; \cdots &amp;amp; \pdv{f_1}{x_n} \\
\vdots &amp;amp; \ddots &amp;amp; \vdots \\ \pdv{f_m}{x_1} &amp;amp; \cdots &amp;amp; \pdv{f_m}{x_n}\end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;The Jacobian Matrix thus, is an analog of the gradient vector for functions that
map vector spaces to vector spaces. Everything that we can do using gradients
can be done in a more general form using the Jacobian Matrix. Consider the 
condition for differentiability of a multivariate scalar function $f:\Bbb{R}^n \to \Bbb{R}$:
for $f$ to be differentiable at $\a$, we have the condition
$$\lim_{||\h|| \to 0} \frac{f(\ah) - f(\a) - \h \cdot \nabla f(\a)}{||\h||} = 0$$
For a function $f:\Bbb{R}^n \to \Bbb{R}^m$, the condition would be:
$$\lim_{||\h|| \to 0} \frac{||f(\ah) - f(\a) - \pmb{\mathrm{J}}_f(\a)\h||}{||\h||} = 0$$&lt;/p&gt;
&lt;p&gt;here, $||\cdot||$ is the euclidean norm of the vector.&lt;/p&gt;
&lt;h2&gt;Relating Jacobian Matrices and Transformation Matrices&lt;/h2&gt;
&lt;p&gt;If you notice, the Jacobian Matrix need not be square; for the special case 
$n = m$, that is for $f:\Bbb{R}^n \to \Bbb{R}^n$, the Jacobian matrix is square 
and acts as a linear transformation between the two n-dimensional vector spaces,
as shown below:
$$\begin{bmatrix} df_1 \\ \vdots \\ df_n \end{bmatrix} = 
\begin{bmatrix} \pdv{f_1}{x_1} &amp;amp; \cdots &amp;amp; \pdv{f_1}{x_n} \\
\vdots &amp;amp; \ddots &amp;amp; \vdots \\ \pdv{f_n}{x_1} &amp;amp; \cdots &amp;amp; \pdv{f_n}{x_n}\end{bmatrix} 
\begin{bmatrix} dx_1 \\ \vdots \\ dx_n \end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;Therefore, this acts like a linear transformation between the infinitesimal 
elements in the space of $f$ and in the space of $x$. One more proof of scaling
is involved before the use of jacobian matrices in integrals becomes clear.&lt;/p&gt;
&lt;h2&gt;Scaling factor and the Jacobian Determinant&lt;/h2&gt;
&lt;p&gt;Recall that for any linear transformation, &lt;strong&gt;the determinant of the transformation
gives us the scaling factor&lt;/strong&gt;, that is the ratio of the change in 'volume' occupied
by the vector. This is also known as a dilation transformation (because just the 
size is involved, without worrying about orientation). &lt;/p&gt;
&lt;p&gt;I'll provide a proof for the statement highlighted above in $\Bbb{R}^3$, but 
extending it to $\Bbb{R}^n$ is easy enough (an exercise for the reader, as they 
say in math textbooks :)). Consider the unit cube centered at origin, ie 
having it's 3 vectors as $(1,0,0), (0,1,0)$ and $(0,0,1)$. On applying a transformation
to this cube, we get the vertices as the transformation matrix itself. Here's 
an image that speaks a thousand words (taken from &lt;a href="http://hopsblog-hop.blogspot.com/2017/02/"&gt;Hop's Blog&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img alt="scaling" src="res/cube_transform.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In algebra terms, we get &lt;/p&gt;
&lt;p&gt;$$\begin{bmatrix} a &amp;amp; x &amp;amp; l \\ b &amp;amp; y &amp;amp; m \\ c &amp;amp; z &amp;amp; n \end{bmatrix} \begin{bmatrix} 1&amp;amp;0&amp;amp;0\\0&amp;amp;1&amp;amp;0\\0&amp;amp;0&amp;amp;1 \end{bmatrix} = 
\begin{bmatrix} a &amp;amp; x &amp;amp; l \\ b &amp;amp; y &amp;amp; m \\ c &amp;amp; z &amp;amp; n \end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;The volume of a parallelepiped is given by the determinants of the 3 edge vectors,
and hence the volume of the transformed cube is 
$$V = \left| \begin{array}{c c c} a &amp;amp; x &amp;amp; l \\ b &amp;amp; y &amp;amp; m \\ c &amp;amp; z &amp;amp; n \end{array}\right|$$
Which is the determinant of the linear transform that we started with. $\blacksquare$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is the main principle that allows us to use the Jacobian in multiple 
integrals while changing variables&lt;/strong&gt;: it scales up or down the size of the 
area or volume element we are using proportionately to the change of variables.&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://math.stackexchange.com/questions/14952/what-is-the-jacobian-matrix"&gt;What is the Jacobian Matrix&lt;/a&gt;, a good MSE thread
   on the Jacobian Matrix&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Jacobian_matrix_and_determinant"&gt;Jacobian Matrix and Determinant Wikipedia page&lt;/a&gt;, of course&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/What-is-the-Jacobian-how-does-it-work-and-what-is-an-intuitive-explanation-of-the-Jacobian-and-a-change-of-basis#"&gt;A Quora question on Jacobian matrices&lt;/a&gt; with another very nice answer&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Personal comments:&lt;/h2&gt;
&lt;p&gt;I thoroughly enjoyed writing so much 'hard' mathematics on this blog after a 
long time (last proper math post was on 11th September of Last year, and other 
math notes in the interim were published on the &lt;a href="https://aniruddhadeb.com/MathNotes"&gt;MathNotes site&lt;/a&gt;).
A lot of calc textbooks don't go into detail on Jacobians, instead just using 
them like a gift of god that fell out of the sky. The bare minimum they would 
provide would be a diagram of domain transformation, and the cliched example of 
converting to polar integrals (the disc is transformed into a rectangle), but that
would still not make intuitive sense: &lt;strong&gt;why the determinant? And why this 
weird matrix?&lt;/strong&gt; were the questions that popped up in my head, and I hope I've done
justice to those questions in this article.&lt;/p&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category></entry><entry><title>Intro to FreeCAD</title><link href="https://aniruddhadeb.com/articles/2020/freecad-intro.html" rel="alternate"></link><published>2020-12-31T18:41:00+05:30</published><updated>2020-12-31T18:41:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-12-31:/articles/2020/freecad-intro.html</id><summary type="html">&lt;p&gt;MCP100 is a course that all first year undergrads in IITD have to go through. 
It consists of two parts: the first part is engineering drawing, using rulers
and pencils, and CAD. After a disastrous drawing minor, the next phase involved
getting to terms with CAD. The CAD package our …&lt;/p&gt;</summary><content type="html">&lt;p&gt;MCP100 is a course that all first year undergrads in IITD have to go through. 
It consists of two parts: the first part is engineering drawing, using rulers
and pencils, and CAD. After a disastrous drawing minor, the next phase involved
getting to terms with CAD. The CAD package our course instructor decided on was
FreeCAD, and since the minor ended, I've done nothing but create FreeCAD models.&lt;/p&gt;
&lt;p&gt;I'm not a &lt;em&gt;pero&lt;/em&gt;&lt;sup&gt;1&lt;/sup&gt; at it though, (there's still plenty to learn), and 
once that is done, there are plenty of bugs to fix :P. I do think I've got a 
decently good footing in it, and I'll be sharing my experiences here.&lt;/p&gt;
&lt;h2&gt;Parametric Modelling&lt;/h2&gt;
&lt;p&gt;While the basic concepts of Drafting are pretty easy to pick up (parallel lines,
projections, isometric view etc), the concepts of 3D CAD are a bit different. 
Most 3D CAD packages you'll encounter will belong to a family of softwares 
called &lt;strong&gt;Parametric Modellers&lt;/strong&gt;: Fusion 360, Inventor, SolidWorks, Siemens NX are
all parametric modellers. What 'Parametric' means is that the geometry of your 
part is determined by parameters, and changing the parameters changes the 
geometry. Here's a small example: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Parametric Modeling" src="res/parametric_modelling.gif"&gt;&lt;/p&gt;
&lt;p&gt;Notice how changing the parameters of the sketch change the values of the model
as well. As opposed to this &lt;strong&gt;Direct Modelling&lt;/strong&gt; is a method of modelling which
is more like molding clay: once the hole is made, changing it's parameters are
trickier. This is used more in the art industry, and softwares such as Blender
Maya and 3DSMax are direct modellers.&lt;/p&gt;
&lt;p&gt;Parametric modeling has it's benefits in manufacturing; it is very easy to 
translate exact dimensions to the part when using this methodology as opposed
to direct modelling. One downside is that modelling curves and free-form surfaces
is notoriously difficult. There are many more articles on parametric vs direct
modelling on the internet &lt;a href="https://www.ptc.com/en/blogs/cad/parametric-vs-direct-modeling-which-side-are-you-on"&gt;here&lt;/a&gt;, 
&lt;a href="https://www.designworldonline.com/what-is-parametric-modeling/"&gt;here&lt;/a&gt; and 
&lt;a href="https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/16587/Whats-the-Difference-Between-Parametric-and-Direct-Modeling.aspx"&gt;here&lt;/a&gt;,
so I won't go further in this article.&lt;/p&gt;
&lt;h2&gt;FreeCAD: 3D Parametric Modelling for Free&lt;/h2&gt;
&lt;p&gt;Notice something common in all the aforementioned softwares? &lt;em&gt;Their prices&lt;/em&gt;. All
of them, with the exception of Blender, cost over $1000 for a single license. The
ones that don't come with a license, generally tie you to their platform with
a notorious subscription-based model (Autodesk, I'm looking at you). FreeCAD 
in this manner is pretty good, but you get what you pay for. I was expecting it
to be like Blender&lt;sup&gt;2&lt;/sup&gt;, but became pretty disappointed when I saw that it's pretty
buggy and not as fully featured as other packages. &lt;/p&gt;
&lt;p&gt;I'm not a n00b to parametric modelling, having done it multiple times in Fusion
360 for several projects, so jumping into FreeCAD was relatively painless. Much
of the workflow is the same; create a sketch, extrude (they call it 'pad' here),
create another sketch, push (they call it 'pocket' here), rinse and repeat. &lt;/p&gt;
&lt;p&gt;In a few hours time, I was done with the assignment that was uploaded.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Yes I know this was done by Sir, do you really think I'll post snaps of the others so that you can copy them? ;)" src="res/assignment.png"&gt;&lt;/p&gt;
&lt;p&gt;Here are some observations I picked up while doing the assignment:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Change the line drawing to 4xMSAA for smoother lines&lt;/li&gt;
&lt;li&gt;Change navigation style to Blender (More intuitive for me, as I have prior 
   experience with Blender)&lt;/li&gt;
&lt;li&gt;Change orbit style to 'Turntable'. Trackball is a nightmare&lt;/li&gt;
&lt;li&gt;Change to a dark theme &lt;strong&gt;If you're on Windows or Linux&lt;/strong&gt;. Any theme is 
   horribly glitchy on Mac&lt;/li&gt;
&lt;li&gt;Background color for the viewport can be changed in settings as well, if you're more used to AutoCAD/Blender dark backgrounds&lt;/li&gt;
&lt;li&gt;The Cube is the best way to navigate; try to spend most of your time in 
   isometric views and front/side/back views. Panning/rotating is not too
   smooth here compared to the other packages.&lt;/li&gt;
&lt;li&gt;If you've zoomed in too much or too little, use the 'fit contents to viewport'
   button or just hit V and F&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;More Complex models&lt;/h2&gt;
&lt;p&gt;I then decided to do something a bit more complex: create and assemble an entire
product using FreeCAD. I have done this with Fusion 360 twice, and since FreeCAD
is not very different, it should handle this workload fine as well.&lt;/p&gt;
&lt;p&gt;Wrong.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There are so many features that other CAD packages have, which have no analogue
in FreeCAD, or a very half-baked implementation&lt;/strong&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You created a sketch with multiple faces in it and want to extrude only a 
   select few of those? Nope, sorry, can't do that&lt;/li&gt;
&lt;li&gt;You created all your parts and want to assemble them? Nope, FreeCAD doesn't
   ship with an assembly workbench. You need to install another assembly
   workbench. By 'Other', there is only one assembly workbench for v18.x (A2Plus),
   and Assembly3 and Assembly4 are for v19+ only.&lt;/li&gt;
&lt;li&gt;Now you want to install this workbench? Well, good luck if you're on Mac, because
   the addon manager seems to be broken. Here's what it looks like on the FreeCAD
   wiki, and here's what it looks like on my machine&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="On Windows" src="res/addonmgr.png"&gt; &lt;img alt="On Mac" src="res/addonmgr_mac.png"&gt;&lt;/p&gt;
&lt;p&gt;So much for platform independence. I had to install the addon manually which, 
thankfully, was painless enough. No proprietrary formats involved, just clone 
the git repo into the &lt;code&gt;Mod&lt;/code&gt; directory&lt;/p&gt;
&lt;p&gt;Once the assembly was imported, using A2Plus, &lt;strong&gt;I had to manually import 
all the parts in one file separately&lt;/strong&gt;. A2Plus didn't pick them up automatically
and add the parts as different parts: if you open the file normally, it just 
mushes all the parts up as one big 'blob', which is then inserted.&lt;/p&gt;
&lt;p&gt;After some frustration, the Assembly was finally complete.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Assembly" src="res/assembly.png"&gt;&lt;/p&gt;
&lt;p&gt;I now had to generate a top view and a cross-sectional view. The procedure for
this was pretty simple: go into TechDraw, insert a top view, then insert a 
sectional view. This would be great and smooth, &lt;strong&gt;if only the section view 
wasn't so glitchy&lt;/strong&gt;. I couldn't find options to change hatching patterns for 
individual parts, and the handle for the vice glitched out and wasn't shaded. 
Instead, there were these two long, parallel lines that I couldn't delete. 
&lt;strong&gt;And how do you scale views in TechDraw!?&lt;/strong&gt; Everything I tried didn't work, 
and finally I had to increase the paper size to fit the diagram in 1:1. 
This was ok for a vice, but could you imagine designing your next aeroplane
in this software?&lt;/p&gt;
&lt;p&gt;&lt;img alt="1:1 Projection on an A2 sheet" src="res/A2.png"&gt;&lt;/p&gt;
&lt;h2&gt;Concluding remarks&lt;/h2&gt;
&lt;p&gt;I do have mixed feelings for this software: on one side, it represents that 
large softwares with multimillion dollar licenses can also have open-source
alternatives. On the other hand, it's bugginess, glitchiness and lack of 
industry-grade features truly disappoint me. Of course, since it's open source,
sitting on the sidelines and pointing fingers won't help. The only way to 
fix the software is to wade into the muck yourself and help with reporting and 
fixing bugs. This is a double-edged sword, because in one way it gives you 
freedom and absolute control, but on the other hand, for a student looking to 
use a glitch-free software on his computer to pass a course, well...&lt;/p&gt;
&lt;p&gt;I would like to point out that even though I've bashed FreeCAD quite a bit for
bugs, do note that &lt;a href="https://www.cadalyst.com/cad/product-design/what-grounded-airbus-a380-10903"&gt;even using the most premier CAD packages don't save you
from bugs&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; IITD lingo for Pro :P&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; Blender was initially started as an in-house creation tool and 
had significant corporate backing from the start, which explains it's superiority
in overall fit, finish and polish to other kludgy open-source softwares. The 
Blender community (Both developers and artists) have also done an awesome job 
keeping the software relevant and up-to-date. More on this &lt;a href="https://www.blender.org/foundation/history/"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="Engineering"></category><category term="CAD"></category></entry><entry><title>Sorting Testbench in C</title><link href="https://aniruddhadeb.com/articles/2020/algorithms-in-c.html" rel="alternate"></link><published>2020-11-11T19:20:00+05:30</published><updated>2020-11-11T19:20:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-11-11:/articles/2020/algorithms-in-c.html</id><summary type="html">&lt;p&gt;I started reading CS theory in anticipation of my upcoming curriculum and I found
that CLRS starts the reader off with sort algorithms (technically they start with 
math and basic CS, but I've already covered that). I decided to make a Sorting 
testbench, whose requirements were pretty simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It should …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I started reading CS theory in anticipation of my upcoming curriculum and I found
that CLRS starts the reader off with sort algorithms (technically they start with 
math and basic CS, but I've already covered that). I decided to make a Sorting 
testbench, whose requirements were pretty simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It should be able to generate arrays of a given entropy: the entropy of an 
  array is defined as the number of swaps required to sort the array.&lt;/li&gt;
&lt;li&gt;It should be able to benchmark the time taken by each sort&lt;/li&gt;
&lt;li&gt;It should be able to plot the benchmark results in a single scatter plot, 
  using different colours for the different sorts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first implementation of this was done using Java and JavaFX (ps: setting up
JavaFX with Java 15 is a pain in the ass, but more on that in a later blog). 
The results were not too shabby, and I was able to accomplish a lot with 
very little code. However, I was unhappy with the performance: I believed that 
running the sorts on a JVM were not the way to go, and there were a lot of 
outliers in the data, where I believed the JVM paused for it's GC cycle and that
got recorded by the benchmarker. This was the reason I decided to switch to 
a language that was closer to the system, and that language was C.&lt;/p&gt;
&lt;p&gt;Before that, here are some graphs from the Java version. This graph shows the 
time taken in nanos (y axis) vs array size (x axis). The $O(n^2)$ characteristic is 
clearly visible.&lt;/p&gt;
&lt;p&gt;&lt;img alt="time taken vs array size" src="res/javasort_svt.png"&gt;&lt;/p&gt;
&lt;p&gt;Here's one more, showing the time taken vs array entropy, which is linear in 
nature.&lt;/p&gt;
&lt;p&gt;&lt;img alt="time taken vs array entropy" src="res/javasort_tve.png"&gt;&lt;/p&gt;
&lt;h2&gt;Moving to C&lt;/h2&gt;
&lt;p&gt;Moving to C was difficult. The things I had to implement manually were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ArrayList&lt;/li&gt;
&lt;li&gt;PriorityQueue (via a Heap)&lt;/li&gt;
&lt;li&gt;BitSet&lt;/li&gt;
&lt;li&gt;Random int generator&lt;/li&gt;
&lt;li&gt;Swap inserter&lt;/li&gt;
&lt;li&gt;Circle drawing/filling algorithm&lt;/li&gt;
&lt;li&gt;Dashed line drawing algorithm&lt;/li&gt;
&lt;li&gt;Graph scale derivation algorithm&lt;/li&gt;
&lt;li&gt;Sort algorithms&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;ArrayList&lt;/h3&gt;
&lt;p&gt;Implementing an ArrayList was quite easy. The only tricky parts were resizing the 
ArrayList if the index overshot the current size. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;_ArrayList_expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MULTIPLIER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;realloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;ArrayList_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;_ArrayList_expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ERR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;log_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Added element at %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;PriorityQueue&lt;/h3&gt;
&lt;p&gt;This was trickier. PriorityQueues are very well explained by &lt;a href="https://algs4.cs.princeton.edu/24pq/"&gt;Algorithms, 4th ed&lt;/a&gt;
with adequate code examples and all I did was implement them. The core concepts
are the same as that of a heap: data is stored in a binary tree represented as an 
array, where the parent node of node $n$ is $\lfloor n/2 \rfloor$. This binary 
heap has an $O(\log n)$ access and removal time. The elements are inserted in 
any order and when they are removed, they are removed in sorted order. The link
does a better job of explaining it than I do, but here's how I implemented the 
primary methods in C&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;IntPQ_insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntPQ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MULTIPLIER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;realloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;emap_lb&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;emap_lb&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;emap_size&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;set_bit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;emap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;emap_lb&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// swim element up&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;IntPQ_remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntPQ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;log_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Stack is empty&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// sink first element&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ipq&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;BitSet&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;set_bit&lt;/code&gt; function in the previous code sample must have raised some questions. 
The PriorityQueue has a Bitset that facilitates $O(1)$ checking for elements in the array. Generally, a 
HashTable would be better suited, but I didn't get around to implementing one 
of those. A BitSet implementation is well described 
&lt;a href="https://stackoverflow.com/questions/4372515/how-to-implement-a-bitset-in-c"&gt;here&lt;/a&gt;
and I did something similar here, so no worries there. It's not very memory efficient, 
but it's good enough for the range of integers I generate.&lt;/p&gt;
&lt;h3&gt;Random Number Generator&lt;/h3&gt;
&lt;p&gt;C comes with a built-in random number generator, implemented with the &lt;code&gt;rand()&lt;/code&gt; 
and &lt;code&gt;srand()&lt;/code&gt; functions. However, the implementation of those functions varies
wildly from platform to platform, which I documented in 
&lt;a href="https://stackoverflow.com/questions/64619808/clang-poor-rand-implementation"&gt;this question&lt;/a&gt;
and the algorithm is also well documented in &lt;a href="https://medium.com/macoclock/are-random-number-on-mac-truly-random-c70e65630ce"&gt;this medium post&lt;/a&gt;.
&lt;code&gt;rand()&lt;/code&gt; on mac is taken from BSD, which says in it's own documentation that 
it's a bad random number generator. The solution is to use &lt;code&gt;random()&lt;/code&gt; and &lt;code&gt;srandom()&lt;/code&gt;
on mac, which is comparatively better. The maximum value of the random number 
generated using this method is $2^{31} - 1$. Using this, generating random 
number within a given range is simple, and can be done using the following 
snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;gen_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(((&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;RANDOM_MAX&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ub&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lb&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using this along with the PriorityQueue, we can generate an array of sorted 
random numbers, into which swaps are then inserted.&lt;/p&gt;
&lt;h3&gt;Swap Inserter&lt;/h3&gt;
&lt;p&gt;A swap or inversion is defined as a pair of integers at indices $i$ and $j$ 
such that $i &amp;lt; j$ and $A[i] &amp;gt; A[j]$, assuming the array is to be sorted in 
ascending order. An array of length $n$ sorted in descending order has $\frac{n(n-1)}{2}$
inversions. If we have to insert $k$ inversions into a sorted array, take the 
first $m$ integers such that $m(m-1)/2 &amp;lt; k$. Reverse the order of these first 
$m$ integers so that they're in descending order. We now have to insert 
$k - m(m-1)/2$ swaps in the leftover array. To do this, take the last element 
in the array (which is the largest) and move it back by $k - m(m-1)/2$ steps, 
thereby inserting those many number of swaps.&lt;/p&gt;
&lt;h3&gt;Circle drawing &amp;amp; filling algorithm&lt;/h3&gt;
&lt;p&gt;Now that the integer generation side of things is done, we can move on to the 
graphics side of things. I use SDL for all my graphics work with C and SDL 
does not have a &lt;code&gt;SDL_RenderDrawCircle&lt;/code&gt; or &lt;code&gt;SDL_RenderFillCircle&lt;/code&gt; method. Since 
circles are a must have primitive, I implemented my own circle drawing and 
filling algorithm. This is based on the &lt;a href="https://en.wikipedia.org/wiki/Midpoint_circle_algorithm"&gt;midpoint circle algorithm&lt;/a&gt; and draws 
(and fills) non-antialiased circles.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;render_circ_pts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_Renderer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;render_circ_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_Renderer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// renders every point only once, so rendering with alpha &amp;lt; 0xFF is not an issue. &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// also note the +1 for x2; SDL does not draw the last point in a line&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SDL_RenderDrawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;SDL_RenderDrawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;SDL_RenderDrawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;SDL_RenderDrawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;render_circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_Renderer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1-2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;render_circ_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;render_circ_pts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;xch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;xch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;SDL_RenderDrawCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_Renderer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;render_circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;SDL_RenderFillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_Renderer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;render_circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the entire algorithm, capable of drawing both filled and unfilled circles. 
it's easy to draw filled circles as shown by the algorithm here as well as in 
Wikipedia, but drawing filled circles is trickier, because you don't want to 
go over a single point multiple times. This raises problems if your alpha is 
less than 1. To counter this, you only draw lines when the x (or the y) changes
and if x is not equal to y. Here's what the result would look like if you went 
over lines multiple times:&lt;/p&gt;
&lt;p&gt;&lt;img alt="multiple rendering" src="res/circle_fill_mult.png"&gt;&lt;/p&gt;
&lt;p&gt;Here's what it looks like if you go over each pixel once&lt;/p&gt;
&lt;p&gt;&lt;img alt="single rendering" src="res/circle_fill_sing.png"&gt;&lt;/p&gt;
&lt;p&gt;Much better!&lt;/p&gt;
&lt;h3&gt;Dashed Line Drawing Algorithm&lt;/h3&gt;
&lt;p&gt;This is an implementation of the Bresenham algorithm for drawing lines. I needed 
to draw only horizontal and vertical dashed lines to make the graph gridlines, 
but I decided to make a full-fledged implementation of Bresenham's algorithm 
to draw dashed lines. Again, this is an algorithm that SDL does not ship with; it 
can only make solid lines and I had to implement this myself. Bresenham's 
algorithm is decently simple and can be found in any graphics programming book. 
The main concept behind the algorithm is making a choice between plotting 
$(x+1, y+1)$ or $(x+1, y)$ for a line with a slope between 0 and 1. Mirroring / 
flipping the algorithm gives you the line in the eight other octants. &lt;/p&gt;
&lt;p&gt;This implementation for all 8 octants took quite a bit of head scratching as 
most of the algorithms online used to work only in the first quadrant, or they 
had different algorithms for other quadrants with repeated code, which was 
messy. The key here is to realize that the increment can be either positive 
or negative, but the error term will always be positive. The comments should 
clarify this algorithm, as I wrote them to help me understand what's happening
where and when.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Bresenham line algorithm&lt;/span&gt;
&lt;span class="c1"&gt;// similar to SDL_RenderDrawLine: draws x0, y0 and does not draw x1, y1 (x0 &amp;lt;= L &amp;lt; x1)&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;SDL_RenderDrawDashedLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_Renderer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dashlen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blanklen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Dx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Dy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// dirx, diry - direction of line&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// the direction being iterated over is 1 or -1, and the other one is 0&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dirx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;diry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// incx, incy - increment of line&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// the direction being iterated over is set to the same as dirx, while &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// the other one is 1, -1 or 0 depending on line direction.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;incx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;incy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// first find the variable we will be iterating over - X or Y&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;longest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shortest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;longest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shortest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// We&amp;#39;ll iterate over y, so swap longest and shortest and then set dir* &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// and inc* appropriately&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;longest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;shortest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;dirx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;incx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;incx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;diry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;diry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;incy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;diry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Iterating over x&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;diry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;incy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;incy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dirx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dirx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;incx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dirx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// main drawing loop&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;longest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dashlen&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;blanklen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dashlen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;SDL_RenderDrawPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shortest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;shortest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;longest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dirx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;diry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;longest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;incx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;incy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This produces some pretty good results, and I can live with the distances not 
exactly adhering to Pythagoras theorem, as highlighted by the rectangular rather 
than radial boundaries for the dashes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="dashed line" src="res/dotted_line.png"&gt;&lt;/p&gt;
&lt;h3&gt;Graph Scale Derivation Algorithm&lt;/h3&gt;
&lt;p&gt;After making the primitive drawing algorithms, we can move on to drawing the 
graph. Determining the scale of the graph is the only mathematical and challenging 
part of drawing the graph, because the rest is mostly drudgework. I used 
&lt;a href="https://stackoverflow.com/questions/326679/choosing-an-attractive-linear-scale-for-a-graphs-y-axis"&gt;this StackOverFlow question&lt;/a&gt;
as a base and developed my algorithm using that. The only difference is that 
I floor the value while calculating lower bound rather than rounding it. The 
following code should make the algorithm clear&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;round_tr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.75&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c1"&gt;// in the range determination function. Do similarily for y&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xMin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xMax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xMax&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xMin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gd&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;xtickrange&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;round_tr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;numxticks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gd&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;xlbound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gd&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;xtickrange&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;xMin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gd&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;xtickrange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Sort Algorithms&lt;/h3&gt;
&lt;p&gt;After the amount of stuff we have gone through, the sort algorithms now seem 
trivial and easy. I just implemented some $O(n^2)$ algorithms to start off 
with: Selection sort, bubble sort and insertion sort. I also created a &lt;code&gt;Sort&lt;/code&gt; 
structure containing a function pointer and a string, which I would use to 
link the sort with a name. Here are the sorts I started off with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;selection_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;bubble_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;insertion_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's the timing and plotting main function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;srandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new_ArrayList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ArrayList_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new_Sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Selection Sort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;selection_sort&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ArrayList_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new_Sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Insertion Sort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;insertion_sort&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ArrayList_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new_Sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bubble Sort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;bubble_sort&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ArrayList_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new_Sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Merge Sort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;merge_sort&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dataList&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new_ArrayList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Sort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;ArrayList_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new_DataSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;log_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Creating random array of size %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ranarr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gen_ints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LBOUND&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UBOUND&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;log_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;allocating array of size %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ranarr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Sort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ArrayList_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kt"&gt;clock_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kt"&gt;clock_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time_spent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1000000.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;CLOCKS_PER_SEC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;is_sorted_asc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;log_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sort %d failed&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;log_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sort %d passed&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;DataSet_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new_Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time_spent&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ranarr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;plotAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dataList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sorts - Time (us) vs Array Size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;destroy_Sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;destroy_DataSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataList&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;destroy_ArrayList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;destroy_ArrayList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This didn't work the first time and threw a segfault in my face :_( How typical 
of C. I did debug it, and I'm pretty pleased with the results.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Plotter example" src="res/plotter_example.png"&gt;&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;There are a lot of things that I have to improve here, some of which include&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Antialiasing circles and lines&lt;/li&gt;
&lt;li&gt;More sorts - $O(n\log(n))$ and $O(n)$ sorts&lt;/li&gt;
&lt;li&gt;Resizeable graphics&lt;/li&gt;
&lt;li&gt;More customizable layouts&lt;/li&gt;
&lt;li&gt;More flexible graphing - lines, histograms etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I could have left the graphing to R or Python and just exported a CSV, but 
where's the fun in that. &lt;/p&gt;
&lt;p&gt;This project taught me more about graphics than it did about sorts and will continue to teach me more 
as I keep working on it. For more updates, check out the repository &lt;a href="https://github.com/Aniruddha-Deb/Algorithms"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="C"></category><category term="Algorithms"></category></entry><entry><title>IIT Department Finder Launch (plus personal website domain)</title><link href="https://aniruddhadeb.com/articles/2020/iit-dep-finder.html" rel="alternate"></link><published>2020-10-28T20:39:00+05:30</published><updated>2020-10-28T20:39:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-10-28:/articles/2020/iit-dep-finder.html</id><summary type="html">&lt;p&gt;For IIT admissions, I had created a small command line tool called &lt;code&gt;iit_dep_finder.py&lt;/code&gt; 
to check the departments I would get, given a particular rank. Once the round 
one allocation results came out, I decided to create a web version, for others 
to use as well. This article chronicles the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For IIT admissions, I had created a small command line tool called &lt;code&gt;iit_dep_finder.py&lt;/code&gt; 
to check the departments I would get, given a particular rank. Once the round 
one allocation results came out, I decided to create a web version, for others 
to use as well. This article chronicles the steps I took, and while I did get 
the department finder up and running, I also did a lot of other stuff in the 
process (including changing the domain name, in case you haven't noticed :). 
It's a long and uncensored article, so be warned.&lt;/p&gt;
&lt;h2&gt;Index:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Flask Backend app Development&lt;/li&gt;
&lt;li&gt;Frontend Development&lt;/li&gt;
&lt;li&gt;NGINX and GUnicorn local setup&lt;/li&gt;
&lt;li&gt;Lightsail (VPS) setup and deployment&lt;/li&gt;
&lt;li&gt;Domain acquisition and Setup&lt;/li&gt;
&lt;li&gt;Enabling SSL and Security&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Flask App Development&lt;/h2&gt;
&lt;p&gt;Developing the Flask app was probably the most rewarding part of the process, 
considering that the rest of it was DevOps, which is not exactly my cup of 
tea. I started out by downloading the data from 
&lt;a href="https://josaa.nic.in/Result/Result/currentorcr.aspx"&gt;https://josaa.nic.in/Result/Result/currentorcr.aspx&lt;/a&gt;
as a set of HTML files, to retain their tabular format. The data was then 
scraped with BeautifulSoup and LXML into a CSV intermediate using the following
snippet of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;main_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;table&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;border_table_at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;table_rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;main_table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;table_rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;td&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Female-only (including Supernumerary)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; (including Supernumerary)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The CSV file was then cleaned up a bit manually, such as removing commas at the
end of the line and changing a few typos and values. After this, I created the 
SQLite database and added a table, whose schema was as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;IF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;NOT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;EXISTS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;orcr_2020_r1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;institute&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;department&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;quota&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;OPR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;OPR_prep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;CPR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;CPR_prep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;integer&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This was enough to store the required data. Notice the &lt;code&gt;OPR\_prep&lt;/code&gt; and &lt;code&gt;CPR\_prep&lt;/code&gt; 
fields, which are there for &lt;a href="https://www.iitism.ac.in/assets/pdfs/rules/pcr.pdf"&gt;Preparatory Course ranklists&lt;/a&gt;.
The ranks for these ranklists have a 'P' appended to the number. Since we want 
to store the number as an integer for sorting purposes, the 'P' needs to be 
abstracted into this boolean-esque field. After the table was created, it was 
a matter of inserting all the records in the CSV file into the table. The CSV 
file was used as a sort of 'staging location' for easily editing any errors in 
the data or tweaking formatting. &lt;/p&gt;
&lt;p&gt;Once the data creation methodology and tools were done, I moved on to developing
the flask backend. There's nothing spectacular here, it was just querying the 
database based on the JSON data it received from the frontend and returning 
the results as a JSON encoded string. This part was probably the simplest, 
because the rest was pretty tricky.&lt;/p&gt;
&lt;h2&gt;Frontend Development&lt;/h2&gt;
&lt;p&gt;I'm finally able to understand why Javascript developers use such humongous 
frontend development frameworks like Angular and React: Frontend development
without those is a huge pain in the ass&lt;/p&gt;
&lt;p&gt;&lt;img alt="Commitstrip comic" src="https://www.commitstrip.com/wp-content/uploads/2018/01/Strip-Les-bonnes-r%C3%A9solutions-650-finalenglish.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This is a close second for the most disliked part of this entire development 
cycle: writing HTML and CSS gets extremely repetitive. Since I was not using 
any framework, all the CSS (including the little dropdown transitions for 
advanced options) were written by hand. The JavaScript backend was slightly 
better, but JS does indeed feel like a hacky kludge of a language rather than
something you can write an entire frontend app with (like google sheets), or 
maybe that's because I'm an amateur at the language.&lt;/p&gt;
&lt;p&gt;Once the frontend was done, it didn't look too nasty. I still have to optimize 
the frontend for mobile devices, but since I used &lt;code&gt;div&lt;/code&gt;'s for the layout, I don't 
think there's going to be much to do.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Frontend preview" src="res/iit_dep_finder_frontend.gif"&gt;&lt;/p&gt;
&lt;h2&gt;NGINX and GUnicorn local setup&lt;/h2&gt;
&lt;p&gt;This is where the 'Flask 101' tutorials generally stop. Flask uses Werkzeug to
serve it's files in the development stage, and you cannot carry that forward
to production. Flask is merely a microframework to do the routing and keep 
the application logic in the backend. You need an application server to act as 
an interface for Flask and a web server to serve the static files, because 
the application server is not optimized to do that. I went with NGINX because 
it's light and smaller than apache, and GUnicorn because it's pretty well 
documented. &lt;/p&gt;
&lt;p&gt;Before deploying the app on a VPS, I had to setup the same environment on my 
local machine. I was following this brilliant &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04"&gt;DigitalOcean tutorial&lt;/a&gt;
but it proved to be tedious, because I'm using a mac, and UNIX-y
stuff like &lt;code&gt;systemctl&lt;/code&gt; and &lt;code&gt;launchd&lt;/code&gt; don't play well (actually they don't play
at all) on a mac. I then had to switch gears a bit and follow some part of 
&lt;a href="http://cheng.logdown.com/posts/2015/01/27/deploy-django-nginx-gunicorn-on-mac-osx"&gt;Cheng's blog&lt;/a&gt;
on setting up a similar development setup on Mac OS X. The long and short of it 
is that NGINX on Mac doesn't ship with the &lt;code&gt;sites-available&lt;/code&gt; and &lt;code&gt;sites-enabled&lt;/code&gt;
folders, so you will have to create them manually and add the &lt;code&gt;sites-enabled&lt;/code&gt; one
to &lt;code&gt;nginx.conf&lt;/code&gt;. Once that is done, I made the &lt;code&gt;iit_dep_finder.conf&lt;/code&gt; config 
file in &lt;code&gt;sites-available&lt;/code&gt; and linked it to &lt;code&gt;sites-enabled&lt;/code&gt;. One point of difference
is the redirection of the API commands to the server; on the Mac machine, 
GUnicorn runs on port 9000, whereas on the Ubuntu server, I can create a service 
which has it's own socket, with the &lt;code&gt;unix:&lt;/code&gt; prefix. This difference is 
reflected in the server, where I made a custom &lt;code&gt;gunicorn_prod.conf.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I had a lot of troubles with routing: the NGINX config files are not exactly 
very intuititve, and finally going to the docs and learning the difference 
between &lt;code&gt;root&lt;/code&gt; and &lt;code&gt;alias&lt;/code&gt; fixed it. &lt;code&gt;root&lt;/code&gt; appends everything in the location
to the specified path, whereas &lt;code&gt;alias&lt;/code&gt; appends only the content after the 
location to the specified path. &lt;/p&gt;
&lt;p&gt;Once routing was fixed on the Mac, I did a test deployment to a Ubuntu machine
I had hooked up to my local network, which was a success. I was then ready to 
move to the next part&lt;/p&gt;
&lt;h2&gt;Lightsail (VPS) Setup and Deployment&lt;/h2&gt;
&lt;p&gt;This part ran in parallel with the development for a few days: turns out that 
Amazon needs you to fill in your payment details along with doing a phone 
number verification before your account setup is complete and you can use any
of their services. This is really misleading, when they advertise a 'free month'.
It's free only in the sense that they're not drawing any blood, but the needle 
will be firmly inserted and kept in your flesh, ready to draw blood once the 
month is over. Amazon is not the only provider to use this strategy: all SaaS/PaaS/Services
companies are doing this now. This will turn into a full fledged rant if I 
continue, so more on this in a later blog post maybe.&lt;/p&gt;
&lt;p&gt;After going back and forth with Amazon support over a couple days, my account 
was finally given a stamp of approval and allowed to partake in the holy services
of AWS. I created the cheapest LightSail instance (with a free month :P) and 
&lt;strong&gt;assigned a static IP to it&lt;/strong&gt;. This step is important, and Amazon does not 
do it automatically. After that, download the default SSH key and use it to 
SSH into the server from your terminal. You can now proceed to start installing
stuff: &lt;code&gt;apt&lt;/code&gt; works here, so does &lt;code&gt;snap&lt;/code&gt;. The setup was pretty similar to the 
stuff I did on the local ubuntu machine, and once it was done, I could access
the site by entering the static IP in my web browser.&lt;/p&gt;
&lt;h2&gt;Domain Acquisition and Setup&lt;/h2&gt;
&lt;p&gt;This was decently tricky for me, as I knew nothing about DNS and domain routing 
and related concepts. I purchased a domain off GoDaddy, and it was not a good 
experience. GoDaddy provides pretty cheap domains compared to the competition, 
and they try to poke money out of you in every other way. Still, the domain 
setup and update times were pretty good, and I had linked my primary domain to 
my server in under 2 hours. Not bad for a n00b like me.&lt;/p&gt;
&lt;p&gt;The following day, I read more about DNS records, what A, CNAME and TXT records
are. I then went ahead and created a small sitemap for my website, since I 
would also host my blog on the website&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;www.aniruddhadeb.com - Blog linked to GitHub pages
    - /&amp;lt;Project&amp;gt; - Project websites from GitHub

apps.aniruddhadeb.com - My webapps
    - /&amp;lt;App&amp;gt; - single webapp page (in this case, IIT_dep_finder)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The URL for this project would then be &lt;code&gt;http://apps.aniruddhadeb.com/IIT_dep_finder&lt;/code&gt;. 
I then had to add a CNAME to my DNS record with the &lt;code&gt;apps&lt;/code&gt; prefix and redirect
it to the LightSail static IP. Following this, I linked up a custom domain with
GitHub Pages, the process for which is well documented &lt;a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site"&gt;here&lt;/a&gt;.
This was all on the domain side of things, and I had to configure my NGINX server
to serve from &lt;code&gt;/IIT_dep_finder&lt;/code&gt; instead of from the root, which was frustruating 
because I'm not that good with the NGINX config. Practice makes perfect, as they 
say, and I'm a greenfoot when it comes to full stack development.&lt;/p&gt;
&lt;p&gt;When all was said and done, I had a running website, with my blog on the main 
page and IIT dep finder on the URL above. All was good! or was it?&lt;/p&gt;
&lt;h2&gt;Enabling SSL and Security&lt;/h2&gt;
&lt;p&gt;This takes the cake for the most frustruating part of development. Not because 
acquiring and setting up an SSL certificate was hard (Thank you to &lt;code&gt;certbot&lt;/code&gt;!), 
but because &lt;strong&gt;Amazon has their own fucking firewall in front of the LightSail 
instance&lt;/strong&gt;, and it took me 3 hours to figure that out. Important disclaimer for
all out there on LightSail: &lt;strong&gt;If you create a default ubuntu instance, ONLY 
ports &lt;code&gt;22&lt;/code&gt; and &lt;code&gt;80&lt;/code&gt; are enabled by default, which is why my server was getting 
NO HTTPS requests on &lt;code&gt;443&lt;/code&gt;&lt;/strong&gt;. Setting up certbot was easy, as shown in the 
DigitalOcean tutorial above. CertBot takes your domain and hooks you up with an 
SSL certificate, which you have to renew every 90 days by typing in &lt;code&gt;certbot renew&lt;/code&gt;.
Certbot also takes care of adding the certificate to your NGINX config automatically
so you don't have to do anything. However, when I tried hitting the link via 
&lt;code&gt;https://&lt;/code&gt; instead of &lt;code&gt;http://&lt;/code&gt;, the web browser would time out. I tried all 
of the follwing, in order after that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chrome inspector, to see if the request is going through. Request was going through&lt;/li&gt;
&lt;li&gt;Change NGINX config to listen on port 80 and serve pages. Worked on port 80&lt;/li&gt;
&lt;li&gt;Duplicated the NGINX config and ripped the SSL stuff, to go back to normal. Worked&lt;/li&gt;
&lt;li&gt;Tried restoring the SSL config lines one line at a time. Did not work&lt;/li&gt;
&lt;li&gt;Tailed the logs. Nothing coming in.&lt;/li&gt;
&lt;li&gt;Realized that there might be a firewall. Checked &lt;code&gt;sudo ufw status&lt;/code&gt;. Firewall 
  was inactive&lt;/li&gt;
&lt;li&gt;Created a firewall and allowed selective ports through. No change, https:// 
  requests still timed out&lt;/li&gt;
&lt;li&gt;Realized that LightSail might have it's own firewall. Logged in to lightsail
  and saw the firewall settings. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="motherfucker" src="https://i.gifer.com/2Jc.gif"&gt;&lt;/p&gt;
&lt;p&gt;Needless to say, I took the rest of the day off after that.&lt;/p&gt;
&lt;h2&gt;Conclusion and next steps&lt;/h2&gt;
&lt;p&gt;While I have a website that is fortunately up and running well, there are still
a lot of things left to do. Some of those include:
- Registering on search engines
- SEO with sitemaps and &lt;code&gt;robots.txt&lt;/code&gt;
- Adding Google Analytics
- Adding some ads?
- Improvements on the app itself: more cutoff data and smarter suggestions&lt;/p&gt;
&lt;p&gt;All of these things will be tackled one by one, but developing and setting up
my first full stack app was a challenging experience and certainly one of the
trickier projects I have undertaken so far.&lt;/p&gt;
&lt;p&gt;The WebApp is live at &lt;a href="https://apps.aniruddhadeb.com/IIT_dep_finder"&gt;https://apps.aniruddhadeb.com/IIT_dep_finder&lt;/a&gt;.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category><category term="Python"></category><category term="Web Development"></category></entry><entry><title>To IIT Delhi and beyond</title><link href="https://aniruddhadeb.com/articles/2020/iit-delhi-mnc.html" rel="alternate"></link><published>2020-10-19T14:23:00+05:30</published><updated>2020-10-19T14:23:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-10-19:/articles/2020/iit-delhi-mnc.html</id><summary type="html">&lt;p&gt;I think an update on the JEE Situation has been due for a long time, and I'll 
try to compress the past few months into this single post. Long story
short, my JEE(M) was held on 2nd September, in the evening shift. After giving 
my best and getting a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I think an update on the JEE Situation has been due for a long time, and I'll 
try to compress the past few months into this single post. Long story
short, my JEE(M) was held on 2nd September, in the evening shift. After giving 
my best and getting a 260/300, I was disappointed (putting it mildly) to see 
the CRL of 1861 on my screen. AITS JEE(A) Mocks followed, and after giving three 
of them, I had to give my BITSAT. I did not do any preparation, went and gave 
the exam and got a 422/450 (including bonus marks). This was enough for BITSP 
CSE, so my safety net was intact. &lt;/p&gt;
&lt;p&gt;Another AITS Mock followed, which I pretty much aced (got an AIR of 28ish) and 
I was feeling pretty pumped up for the final exam. I chilled out post the mock, 
hanging out on StackExchage and revising the odd inorganic formula or two. The 
date of the exam finally came, and the papers were no easier than the AITS 
test I gave a week back (lol for those who say AITS are hard). I left 4 questions 
in the first paper, 6 in the second and did 2-3 silly mistakes overall. &lt;/p&gt;
&lt;p&gt;Over the next week, I checked my paper out, computed the score from the answer 
key and saw that I was getting 245ish. I had taken a ton of negatives in Chem 
paper 2 and had also taken Giga as $10^6$ instead of $10^9$. I was expecting a 
rank in the 250-400 bracket, with 500 being an absolute worst case result. 
Best case department was Bombay EE, whereas worst case was Madras EE. &lt;/p&gt;
&lt;p&gt;Result day finally rolled around and I got a CRL rank of &lt;strong&gt;323&lt;/strong&gt; with 249 marks 
(258 positive marks). I had fallen in a little pocket, just outside of CSE but 
ahead of EE. Following an intensive search of the available departments and 
programmes, I realized that EE would be an absolute bore. I liked EE and had 
experience in it, but looking at the course structure and hearing about the 
profs, I stayed back from EE. KGP CSE closed at 30 ranks above me, so tough 
luck there. Maths and Computing at Delhi emerged as the frontrunner here, with
a CR of 314 last year. The Dual Degree programme was more optimistic for me, 
with a CR of 373. At this point, I was in a massive conundrum: a Dual Degree was
something that I was not considering from the start; is doing a Dual worth it? 
There were positives and negatives; positives being that I get an extra year 
to explore stuff and that I can skip a year on an MS and directly do a PhD if 
I want to. Negatives were that the value of an MTech from an IIT is very low
(IIT Lingo for MTech's is 'Matkas' (pots)). 
If I was considering Duals, then IITB EE Dual also entered the fray, because 
of it's CR of 500ish something, and IITB had been a target of sorts during my 
preparation, so an emotional factor was also present.&lt;/p&gt;
&lt;p&gt;In the end, I decided to screw emotion; taking EE dual with hopes of a Department 
change was not a good decision, and IIT Delhi Maths and Computing won over. 
I would get the 4 year degree if I was lucky or I
would take the dual degree, without any regrets. I got the dual in both my 
mock seat allocations and also in the first round of seat allocation. Looking 
at the closing ranks across all 7 rounds from last year, I realized that there
is no change in the top 100 and very little (couple seats) in the top 500, so
this is it. The fat lady has sung, and I'll be packing my bags for Delhi whenever 
the pandemic blows over.&lt;/p&gt;
&lt;p&gt;I thought about offering some pearls of advice to others by penning down the 
story of the past two years; I wrote a draft, but it was too lengthy, too 
egocentric and too offensive. Unfortunately, I'm not very good at talking or 
writing about myself, and the story would piss off more people than I can count. 
I would like to thank those who have been on this journey with me, starting with
my Parents: suffice it to say that I wouldn't have made it this far in life without 
them, and any attempts to thank them in words will not do their efforts justice.
Most of my time was spent with my Textbooks (mostly Cengage series and couple of 
Sri Balaji texts), so kudos to the authors of those. My Notebooks were amazing 
(I filled around 60-70 of those, and each was ~120 pages) and bore my frustrated 
scribbles without complaint when I couldn't solve problems. Thank you as well 
to all nonliving things and articles I used in this journey. &lt;/p&gt;
&lt;p&gt;I did not take a classroom coaching course, so no teachers to be thanked there. 
I would like to thank FIITJEE for AITS: the hardest test series 
out there. The problems from here were great (note that not all of them were 
original; quite a few were lifted from IPhO, IChO, INPhO, IMO, HMMT etc) and 
truly tested my abilities. Shout out to the community over at Physics, Chemistry 
and Math StackExchange for answering most of my stupid questions, and some 
not-so-stupid ones. Another mention for my school, for indirectly helping me 
out with the ISC curriculum. Thanks also to all the seniors whom I reached out 
to following the JEE results for talking time out to connect with me and help
me out: you guys are the read MVP's! Finally, thanks to anybody I missed out on 
here and who has been a part of this journey: this includes my friends, family
members and anybody who directly or indirectly guided me. Thank you!&lt;/p&gt;</content><category term="JEE"></category><category term="JEE"></category></entry><entry><title>Setting up MathNotes - an online math repository</title><link href="https://aniruddhadeb.com/articles/2020/mathnotes-launch.md.html" rel="alternate"></link><published>2020-10-16T12:54:00+05:30</published><updated>2020-10-16T12:54:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-10-16:/articles/2020/mathnotes-launch.md.html</id><summary type="html">&lt;p&gt;Just after 10th and as I was beginning my JEE Preparation, I felt the need for 
an extensible note-taking apparatus. Online notes would be too much trouble 
and would keep me hooked to the computer. Notebooks were also difficult, as 
I wanted my notes to be extensible; adding pages in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just after 10th and as I was beginning my JEE Preparation, I felt the need for 
an extensible note-taking apparatus. Online notes would be too much trouble 
and would keep me hooked to the computer. Notebooks were also difficult, as 
I wanted my notes to be extensible; adding pages in the middle of a notebook 
is extremely difficult. I finally settled on using Binders; you can add/remove
pages quite easily and they're decently sized to accommodate all the notes you
could ever need.&lt;/p&gt;
&lt;p&gt;I took out two old binders; they had ~120 pages each and used one for math and 
one for physics. Soon enough, I had to get more pages and by the end of my 
JEE Journey, the binders had somewhere around 200 pages, each filled with notes&lt;/p&gt;
&lt;p&gt;&lt;img alt="Binders" src="res/mathnotes/binders.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;Left one is maths, right one is physics&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="monotonicity" src="res/mathnotes/monotonicity.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="PnC" src="res/mathnotes/PnC.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="MI" src="res/mathnotes/MI.jpg"&gt;&lt;/p&gt;
&lt;p&gt;These tend to follow a very hierarchical format, and also tend to be extremely 
diverse with symbols and diagrams (I did all the notes in pencil, so that if 
any errors arise, I can change the content). &lt;/p&gt;
&lt;p&gt;I now needed a note-taking repository that had the same level of extensibility 
and one that I could use through college life. The computer was not a limitation 
now, and I was also decently skilled in LaTeX by now. I decided to make an 
online website using Sphinx and Read the docs, for keeping my math notes. &lt;/p&gt;
&lt;p&gt;I followed the great guide by Ryan Dale on &lt;a href="https://daler.github.io/sphinxdoc-test/includeme.html"&gt;settting up sphinx on GitHub Pages&lt;/a&gt;. 
I took a few liberties with the folder structure, but now setting up the repo
for contributors is as simple as cloning the repo and running the &lt;code&gt;install.sh&lt;/code&gt; 
script in it. 
The website is now live at &lt;a href="https://aniruddha-deb.github.io/MathNotes"&gt;https://aniruddha-deb.github.io/MathNotes&lt;/a&gt;, 
and I will be porting all my math and physics content over, and also creating 
notes in the future, for the math courses that I take.&lt;/p&gt;
&lt;p&gt;This means that this blog would feature fewer 'Math Notes' sections that I 
spoke about previously (link &lt;a href="https://aniruddha-deb.github.io/articles/2020/math-notes-1.html"&gt;here&lt;/a&gt;).
The math content will also go down, but I will continue to write about math 
stuff that made me go 'wow' (there are a few of those coming in the future, 
so stay tuned)&lt;/p&gt;
&lt;p&gt;If you would like to contribute to the math notes repository, feel free to 
reach out to me on my eMail, by clicking the mail icon in the sidebar.&lt;/p&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category><category term="Programming"></category></entry><entry><title>Setting up my Mac (again)</title><link href="https://aniruddhadeb.com/articles/2020/mac-system-setup.html" rel="alternate"></link><published>2020-10-14T22:48:00+05:30</published><updated>2020-10-14T22:48:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-10-14:/articles/2020/mac-system-setup.html</id><summary type="html">&lt;p&gt;This was also published on &lt;a href="https://github.com/Aniruddha-Deb/SystemSetup"&gt;GitHub&lt;/a&gt;. 
The GitHub version is more up-to-date, and I won't be updating this one as 
frequently.&lt;/p&gt;
&lt;h1&gt;System Setup Log&lt;/h1&gt;
&lt;p&gt;My MacBook battery started to swell around a year back, and the machine 
became unusable 6 months ago and was put into temporary hibernation. Post my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This was also published on &lt;a href="https://github.com/Aniruddha-Deb/SystemSetup"&gt;GitHub&lt;/a&gt;. 
The GitHub version is more up-to-date, and I won't be updating this one as 
frequently.&lt;/p&gt;
&lt;h1&gt;System Setup Log&lt;/h1&gt;
&lt;p&gt;My MacBook battery started to swell around a year back, and the machine 
became unusable 6 months ago and was put into temporary hibernation. Post my 
exams, I did a battery replacement and the computer was out of the hospital 
today, with a fresh operating system and a formatted disk. The last time I set 
this machine up, I did a halfhearted job of logging the process. This time, I've
done it properly :)&lt;/p&gt;
&lt;h2&gt;The Procedure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;User Settings&lt;ul&gt;
&lt;li&gt;System came with my home directory set as 'aniruddadeb' and User name as 
  'Anirudda Deb'&lt;/li&gt;
&lt;li&gt;Create a new admin account, log out of current account and into admin account&lt;/li&gt;
&lt;li&gt;In admin account, rename home directory to 'Sensei' (or whatever name), 
  and then in Preferences-&amp;gt;Users and Groups, unlock and ctrl-click on your 
  account for 'advanced settings'&lt;/li&gt;
&lt;li&gt;In advanced settings, change the name to your name and name of the home 
  directory to the name of your home directory. Make sure user name is same 
  as that of home directory.&lt;/li&gt;
&lt;li&gt;Restart, log back in and delete admin account.&lt;/li&gt;
&lt;li&gt;Set the computer HostName, LocalHostName and ComputerName to MacBook-Pro:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;scutil&lt;span class="w"&gt; &lt;/span&gt;--set&lt;span class="w"&gt; &lt;/span&gt;HostName&lt;span class="w"&gt; &lt;/span&gt;MacBook-Pro&lt;span class="w"&gt;  &lt;/span&gt;
sudo&lt;span class="w"&gt; &lt;/span&gt;scutil&lt;span class="w"&gt; &lt;/span&gt;--set&lt;span class="w"&gt; &lt;/span&gt;LocalHostName&lt;span class="w"&gt; &lt;/span&gt;MacBook-Pro&lt;span class="w"&gt;  &lt;/span&gt;
sudo&lt;span class="w"&gt; &lt;/span&gt;scutil&lt;span class="w"&gt; &lt;/span&gt;--set&lt;span class="w"&gt; &lt;/span&gt;ComputerName&lt;span class="w"&gt; &lt;/span&gt;MacBook-Pro&lt;span class="w"&gt;  &lt;/span&gt;
dscacheutil&lt;span class="w"&gt; &lt;/span&gt;-flushcache&lt;span class="w"&gt;  &lt;/span&gt;
&amp;lt;restart&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;System Prefs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Resolution of 1440x900 (Displays)&lt;/li&gt;
&lt;li&gt;Uncheck natural scroll direction (Trackpad-&amp;gt;Scroll and Zoom)&lt;/li&gt;
&lt;li&gt;Use F1, F2 as function keys (Keyboard)&lt;/li&gt;
&lt;li&gt;Don't show input menu in menu bar (Keyboard-&amp;gt;Input Sources)&lt;/li&gt;
&lt;li&gt;Dark Mode&lt;br&gt;
&lt;img alt="dark side meme" src="res/darkside.jpeg"&gt;&lt;/li&gt;
&lt;li&gt;Change computer name to MacBook-Pro (Sharing)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google Chrome:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download, drag and drop&lt;/li&gt;
&lt;li&gt;Sign in and sync stuff&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sublime Text&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download, drag and drop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Content&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transfer personal files from HDD&lt;/li&gt;
&lt;li&gt;Screen background to &lt;code&gt;hackerfx_img.jpg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Things 3&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install from Mac App Store&lt;/li&gt;
&lt;li&gt;Sign in and sync tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;iTerm 2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download, drag and drop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By now, the system should be looking pretty good. Catalina uses &lt;code&gt;zsh&lt;/code&gt; rather than 
bash, and clang rather than gcc, so porting some stuff over will be tricky, but 
we'll get to that in a minute.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git&lt;ul&gt;
&lt;li&gt;download mac installer from &lt;code&gt;git-scm.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ctrl-click and click 'open' (security won't let you click to open)&lt;/li&gt;
&lt;li&gt;follow installer guidelines
? Will xcode command line tools eat this up?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;\&amp;lt;DON'T DO THIS!&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;ul&gt;
&lt;li&gt;Download latest stable installer from web&lt;/li&gt;
&lt;li&gt;Double click and install &lt;br&gt;
! Don't do this because this does not install python properly; you have to 
  hack around it and do a ton of exports and stuff. I had to uninstall
  python after this, using instructions from &lt;a href="https://stackoverflow.com/questions/3819449/how-to-uninstall-python-2-7-on-a-mac-os-x-10-6-4/3819829#381982"&gt;here&lt;/a&gt;9
  and &lt;a href="https://superuser.com/questions/276840/uninstalling-python-3-on-a-mac"&gt;here&lt;/a&gt;. 
  Best way to install is to use &lt;code&gt;brew&lt;/code&gt; (this keeps the python updated) and 
  &lt;code&gt;pyenv&lt;/code&gt;, so first install &lt;code&gt;brew&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;\&amp;lt;/DON'T DO THIS!&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;XCode Command Line Tools&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC, &lt;code&gt;clang&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt; etc etc&lt;/li&gt;
&lt;li&gt;Download from developer.apple.com, mount, use .pkg installer&lt;/li&gt;
&lt;li&gt;It's a 400 MB download and takes 2.54 GB of space on the system.&lt;/li&gt;
&lt;li&gt;This doesn't eat up git (&lt;code&gt;git --version&lt;/code&gt; still gives git 2.27, so yay!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Homebrew&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Needed for practically everything :P&lt;/li&gt;
&lt;li&gt;visit brew.sh and copy-paste the installation command&lt;/li&gt;
&lt;li&gt;Again, a huge download here (350 MB)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;pyenv&lt;/code&gt; to download and install python, as shown in the article https://opensource.com/article/19/5/python-3-default-mac&lt;/li&gt;
&lt;li&gt;In short, do the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pyenv
pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# replace with latest python version&lt;/span&gt;
pyenv&lt;span class="w"&gt; &lt;/span&gt;global&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9.0&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# set 3.9.0 as global version&lt;/span&gt;
pyenv&lt;span class="w"&gt; &lt;/span&gt;version&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# double check version&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;if command -v pyenv 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then\n  eval &amp;quot;$(pyenv init -)&amp;quot;\nfi&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.zshrc&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# voodoo magic that allows pyenv to work&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and now do &lt;code&gt;python -V&lt;/code&gt; and &lt;code&gt;pip -V&lt;/code&gt; to verify that python 3.9.0 is loaded&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Vim&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Copy &lt;code&gt;.vim&lt;/code&gt; and &lt;code&gt;.vimrc&lt;/code&gt; from previous system&lt;/li&gt;
&lt;li&gt;check if clipboard copy/paste is enabled: &lt;code&gt;vim --version | grep clipboard&lt;/code&gt;, 
  a + sign appears if clipboard is enabled&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ZSH&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edit &lt;code&gt;.zprofile&lt;/code&gt; and add &lt;code&gt;export CLICOLOR=1&lt;/code&gt; for coloured output from commands&lt;/li&gt;
&lt;li&gt;add prompt tweaks &lt;code&gt;PS1='%F{green}%n@%m:%f %F{blue}%~%f %% '&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;iTerm2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tweak profile; first, create a new profile&lt;/li&gt;
&lt;li&gt;Change background color to &lt;code&gt;333333&lt;/code&gt;, foreground to &lt;code&gt;dddddd&lt;/code&gt; and other colors
  to pastel colours&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mail&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Log in to google&lt;/li&gt;
&lt;li&gt;Configure signatures, calendars, mail folders etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Projects&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is the meaty part. Start with the blog:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;--select-branch&lt;span class="w"&gt; &lt;/span&gt;--branch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;https://github.com/Aniruddha-Deb/aniruddha-deb.github.io&lt;span class="w"&gt; &lt;/span&gt;
mv&lt;span class="w"&gt; &lt;/span&gt;aniruddha-deb.github.io&lt;span class="w"&gt; &lt;/span&gt;blog
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;blog
virtualenv&lt;span class="w"&gt; &lt;/span&gt;venv
&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;venv/bin/activate
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;venv&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;.gitignore
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;then whip up this article. I ran into a small hiccup while using &lt;code&gt;make html&lt;/code&gt;: 
the version of Pelican that &lt;code&gt;pip&lt;/code&gt; installed was 4.5.0, and that broke with the 
old Flex theme. I had made some modifications to the theme (MathJax) and didn't 
want to lose them by upgrading. So, I downgraded pelican to 4.2.0 and then made
the files. Takeaway is use &lt;code&gt;make html DEBUG=1&lt;/code&gt; for debugger output. Do a &lt;code&gt;make serve&lt;/code&gt;
to check out formatting, after which do &lt;code&gt;make github&lt;/code&gt; to push to github pages, which is what
you're reading now (this article has been made from the mac :)&lt;/p&gt;
&lt;p&gt;for further updates, refer to the repository linked above.&lt;/p&gt;</content><category term="Programming"></category><category term="Programming"></category></entry><entry><title>A Good JEE Main (September) problem</title><link href="https://aniruddhadeb.com/articles/2020/good-jee-main-problem.html" rel="alternate"></link><published>2020-09-11T09:01:00+05:30</published><updated>2020-09-11T09:01:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-09-11:/articles/2020/good-jee-main-problem.html</id><summary type="html">&lt;p&gt;This beauty came in the 2nd September shift 2 paper:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let $A = \{ X = (x, y, z)^T : PX = 0 \text{ and } x^2+y^2+z^2=1 \}$, where 
$$P = \left[ \begin{array}{l l l}1&amp;amp;2&amp;amp;1 \\ -2&amp;amp;3&amp;amp;-4 \\ 1&amp;amp;9&amp;amp;-1 \end{array}\right]$$
then the …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;This beauty came in the 2nd September shift 2 paper:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let $A = \{ X = (x, y, z)^T : PX = 0 \text{ and } x^2+y^2+z^2=1 \}$, where 
$$P = \left[ \begin{array}{l l l}1&amp;amp;2&amp;amp;1 \\ -2&amp;amp;3&amp;amp;-4 \\ 1&amp;amp;9&amp;amp;-1 \end{array}\right]$$
then the set A:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;is a singleton&lt;/li&gt;
&lt;li&gt;is an empty set&lt;/li&gt;
&lt;li&gt;contains exactly two elements&lt;/li&gt;
&lt;li&gt;contains more than two elements&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a great problem, one that should have featured in advanced rather than 
main. It involves matrices and 3D Geometry and fits in to linear algebra more 
than any other topic.&lt;/p&gt;
&lt;p&gt;To solve this, notice that $A$ is a set of column vectors which lie on the intersection
of the three planes determined by $PX = 0$. The three planes are:
$$\begin{align}
x + 2y + z &amp;amp;= 0 \\
-2x + 3y - 4z &amp;amp;= 0 \\
x + 9y - z &amp;amp;= 0 \\
\end{align}$$&lt;/p&gt;
&lt;p&gt;These three planes have a trivial solution $x = y = z = 0$. Let's see if they
have non-trivial solutions by obtaining $det(P)$:
$$\begin{align}
|P| &amp;amp;= \left| \begin{array}{l l l}1&amp;amp;2&amp;amp;1\\ -2&amp;amp;3&amp;amp;-4\\ 1&amp;amp;9&amp;amp;-1\end{array} \right| = -3 -8 -18 -3 +36 -4 \\
|P| &amp;amp;= 0 \
\end{align}$$&lt;/p&gt;
&lt;p&gt;Thus, they have non-trivial solutions. All the planes are concurrent and form a 
line that passes through origin. Thus, if $S = \{ X = (\lambda_1x,\  \lambda_2y,\  \lambda_3z)^t : 
\lambda_1,\  \lambda_2,\  \lambda_3 \in R \}$ is the line formed by the planes, 
then S has only two elements for which the magnitude of $X$ is 1. These two elements
are the only elements of $A$, thus $A$ contains exactly two elements. $\blacksquare$&lt;/p&gt;
&lt;p&gt;A great problem, that required good thinking and visualization skills. The JEE
was a toss-up between great problems like this and stupid ones like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you spill a chemical toilet cleaning liquid on your hand, your first aid 
would be : &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;vinegar&lt;/li&gt;
&lt;li&gt;aqueous $\ce{NH3}$&lt;/li&gt;
&lt;li&gt;aqueous $\ce{NaHCO3}$&lt;/li&gt;
&lt;li&gt;aqueous $\ce{NaOH}$&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's to hoping the JEE advanced has better chemistry problems :)&lt;/p&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category><category term="JEE"></category></entry><entry><title>Math Notes: Lagrange interpolation</title><link href="https://aniruddhadeb.com/articles/2020/math-notes-1.html" rel="alternate"></link><published>2020-08-14T17:37:00+05:30</published><updated>2020-08-14T17:37:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-08-14:/articles/2020/math-notes-1.html</id><summary type="html">&lt;p&gt;This is a small set of posts that come into the category of "notes": 
self-explanations of concepts that I have recently picked up and found 
interesting.&lt;/p&gt;
&lt;h2&gt;Lagrange Interpolation&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Lagrange_multiplier"&gt;Lagrange Interpolation&lt;/a&gt; is a concept that allows us to find a polynomial of 
least degree passing through a given set of points …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a small set of posts that come into the category of "notes": 
self-explanations of concepts that I have recently picked up and found 
interesting.&lt;/p&gt;
&lt;h2&gt;Lagrange Interpolation&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Lagrange_multiplier"&gt;Lagrange Interpolation&lt;/a&gt; is a concept that allows us to find a polynomial of 
least degree passing through a given set of points. Specifically:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If $S = {(x_i, y_i) : x_i, y_i \in R, 1 \lt i \le n}$, then the polynomial
of least degree passing through all the points in $S$ is given by
$$P(x) = \sum_{i=1}^n L_i(x) \cdot y_i$$
where $$L_i(x) = \frac{(x-x_1)(x-x_2)...(x-x_{i-1})(x-x_{i+1})...(x-x_n)}
{(x_i-x_1)(x_i-x_2)...(x_i-x_{i-1})(x_i-x_{i+1})...(x_i-x_n)}$$
or simply,
$$P(x) = \sum_{i=1}^n \frac{\prod_{r \ne i}(x-x_r)}{\prod_{r \ne i}{(x_i-x_r)}} \cdot y_i$$
note that the degree of polynomial $P &amp;lt; n$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's an example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If $P(x)$ is a function such that $P(-1) = -2,  P(0) = 2, P(1) = 0, P(2) = 2$, 
then find $P(x)$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we have $S = {(-1,-2), (0,2), (1,0), (2,2)}$. Using lagrange interpolation 
gives us $P(x)$ as:
$$\begin{gather}
P(x) = \frac{(x-0)(x-1)(x-2)}{(-1-0)(-1-1)(-1-2)} \cdot -2 + \\
\frac{(x+1)(x-1)(x-2)}{(0+1)(0-1)(0-2)} \cdot 2 + \\
\frac{(x+1)(x-0)(x-2)}{(1+1)(1-0)(1-2)} \cdot 0 + \\
\frac{(x+1)(x-0)(x-1)}{(2+1)(2-0)(2-1)} \cdot -2
\end{gather}$$
or, once simplified,
$$P(x) = x^3 - 3x + 2$$&lt;/p&gt;
&lt;p&gt;This technique is also useful for other stuff, such as finding patterns in 
hard-to-decipher sequences:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Find the nth term of the sequence $$5, 65, 325, 1025, 2501 ...$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Letting $T(1) = 5, T(2) = 65$ and so on, lagrange interpolation gives us:
$$\begin{gather}
T(n) = \frac{5(x-2)(x-3)(x-4)(x-5)}{(-1)(-2)(-3)(-4)} + \\ 
\frac{65(x-1)(x-3)(x-4)(x-5)}{(1)(-1)(-2)(-3)} + \\
\frac{325(x-1)(x-2)(x-4)(x-5)}{(2)(1)(-1)(-2)} + \\
\frac{1025(x-1)(x-2)(x-3)(x-5)}{(3)(2)(1)(-1)} + \\
\frac{2501(x-1)(x-2)(x-3)(x-4)}{(4)(3)(2)(1)}
\end{gather}$$
simplified:
$$T(n) = 4n^4 + 1$$&lt;/p&gt;
&lt;p&gt;Of course, there are some problems that cannot be solved by this technique, 
namely problems where it is specified that the polynomial is of a higher order
than the number of points it passes through:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let $P(x)=x^4+ax^3+bx^2+cx+d$. If $P(1) = 1, P(2)=8, P(3)=27, P(4)=64$, then 
  the value of $P(5)$ is?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The lagrange interpolated polynomial for the above values is $P(x) = x^3$. However, 
this gives the wrong answer of $P(5) = 125$. The correct answer is $P(5) = 149$, 
because we have been asked to fit a polynomial of higher order in this equation.&lt;/p&gt;
&lt;p&gt;Also, this technique should only be used as a last resort for pattern finding. 
This is extremely computation heavy and is more of a bruteforce algorithm, that 
is better suited to computers rather than manual calculation. Most math softwares
have a lagrange interpolation function in them. Geogebra's is called &lt;code&gt;Polynomial()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As a bonus, here's the code I used to generate the above function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;pts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])])&lt;/span&gt;

&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;P(x) = &amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;nr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;dr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="n"&gt;dr&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;nr&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(x+&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;nr&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(x-&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;frac{{&lt;/span&gt;&lt;span class="si"&gt;{2}{0}&lt;/span&gt;&lt;span class="s2"&gt;}}{{&lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s2"&gt;}} + &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category><category term="Math Notes"></category></entry><entry><title>Is the shortest solution to a problem the best?</title><link href="https://aniruddhadeb.com/articles/2020/shortest-solution-best-or-not.html" rel="alternate"></link><published>2020-07-26T21:00:00+05:30</published><updated>2020-07-26T21:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-07-26:/articles/2020/shortest-solution-best-or-not.html</id><summary type="html">&lt;p&gt;My old man always used to say that there are two ways to solve a problem: there's 
the horse way, and there's the donkey way. The donkey way involves tedious 
calculations, whereas the horse way 'cuts' through the problem. Take this problem
as an example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For each positive integer $n …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;My old man always used to say that there are two ways to solve a problem: there's 
the horse way, and there's the donkey way. The donkey way involves tedious 
calculations, whereas the horse way 'cuts' through the problem. Take this problem
as an example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For each positive integer $n$, let $$y_n = ((n+1)(n+2)...(n+n))^\frac1n$$ for
$x \in \mathbb{R}$. Let $[x]$ be the greatest integer less than or equal to $x$. 
If $\lim_{n \to \infty} y_n = L$, then the value of $[L]$ is ______ ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This problem is taken from the JEE(A) 2018 Paper 1 Math section. There are two 
ways of doing this: the first one is the naive, or donkey way:
$$\begin{gather}
L = \lim_{n \to \infty} \left((1+\frac1n)(1+\frac2n)....(1+\frac nn)\right)^\frac1n \\
\log L = \lim_{n \to \infty} \frac{1}{n} \sum_{r=0}^n \log\left(1+\frac rn\right) \\
\log L = \int_0^1 \log(1+x)dx \\
\log L = (1+x)\log(1+x) - x |_0^1 \\
\log L = 2\log2 - 1 \\
L = \frac{4}{e} \\
\boxed{[L] = 1} \\
\end{gather}$$&lt;/p&gt;
&lt;p&gt;It looks simple, because I've made it look simple. The integration by parts step
is time consuming, as well as the substitution and conversion into Riemann sum.
They're all simple steps, but quite lengthy when done in succession. This is 
how we are taught to approach most problems: do the steps to yield an answer. 
Here's an example of the 'horse' way:
$$\begin{gather}
(1+0)(1+0)(1+0)...(1+0) &amp;lt; (1+\frac1n)(1+\frac2n)...(1+\frac nn) &amp;lt; (1+1)(1+1)(1+1)...(1+1) \\
\lim_{n \to \infty} 1^\frac1n &amp;lt; \lim_{n \to \infty} \left((1+\frac1n)(1+\frac2n)....(1+\frac nn)\right)^\frac1n &amp;lt; \lim_{n \to \infty} 2^{n \cdot \frac1n} \\
1 &amp;lt; L &amp;lt; 2 \\
\boxed{[L] = 1}
\end{gather}$$&lt;/p&gt;
&lt;p&gt;And we're done! Simple application of sandwich theorem gives us the answer here
to the required accuracy. Looking at both techniques, the way of the horse 
always seems smarter and more elegant than the way of the donkey... or does it?
Here's an example of another problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If 
$$a = 1 + \frac{x^3}{3!} + \frac{x^6}{6!} + \frac{x^9}{9!} + ...$$
$$b = x + \frac{x^4}{4!} + \frac{x^7}{7!} + \frac{x^{10}}{10!} + ...$$
$$c = \frac{x^2}{2!} + \frac{x^5}{5!} + \frac{x^8}{8!} + \frac{x^{11}}{11!} + ...$$
the value of $a^3 + b^3 + c^3 - 3abc = ?$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This looks like an interesting problem. The horse way of doing this would be to
first make a (perfectly valid) assumption that the answer is independent of $x$, 
because the answer is a constant and if it was dependent on $x$, it would be 
of the form $f(x)$, which it clearly isn't. Since it is independent of $x$, 
let $x=0$, giving us $a=1, b=0, c=0$. Thus, $a^3 + b^3 + c^3 - 3abc = 1$, which
is the correct answer.&lt;/p&gt;
&lt;p&gt;This solution looks good, but it is hacky at best and incomplete at worst. 
Note that the problem setters have not defined the domain of $a,b,c$. An interesting
twist would have been if $x \in \mathbb{R}^+$, then this hack would have been 
&lt;a href="https://www.google.com/search?q=defenestrated"&gt;defenestrated&lt;/a&gt;. Here, the donkey method, though longer, 
is more elegant and meaningful than the horse method. To solve this the right 
way, recall the identity
$$a^3 + b^3 + c^3 - 3abc = (a+b+c)(a+b\omega+c\omega^2)(a+b\omega^2+c\omega)$$
where $\omega$ is the complex cube root of unity.
If we substitute $a,b,c$ in the RHS and use the taylor expansion of $e^x$, then 
we get:
$$e^x \cdot e^{x\omega} \cdot e^{x\omega^2}$$
this is the same as $e^{x(1+\omega+\omega^2)}$, and, as $1 + \omega + \omega^2 = 0$,
the final answer is 
$$e^{x \cdot 0} = \boxed{1}$$&lt;/p&gt;
&lt;p&gt;This is The Right Way&lt;sup&gt;TM&lt;/sup&gt; of solving the problem. Even though it is 
the lengthier, more mentally strenuous way, this is a case where the 'donkey'
method is more elegant than the 'horse' method.&lt;/p&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category></entry><entry><title>Testing</title><link href="https://aniruddhadeb.com/articles/2020/subdir-test.html" rel="alternate"></link><published>2020-07-13T03:44:00+05:30</published><updated>2020-07-13T03:44:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-07-13:/articles/2020/subdir-test.html</id><summary type="html">&lt;p&gt;This is a scratchpad of sorts to test the capabilities of Pelican.&lt;/p&gt;
&lt;p&gt;Let's start with an Image:
&lt;img alt="Test Image" src="https://aniruddhadeb.com/articles/2020/res/test_post/big_buck_bunny.png"&gt;
Big buck bunny looking real handsome ;) Some tweaks have to be made to expand 
the image on click but this is ok for now..&lt;/p&gt;
&lt;p&gt;Let's try headings!&lt;/p&gt;
&lt;h1&gt;Echo&lt;/h1&gt;
&lt;h2&gt;Echo&lt;/h2&gt;
&lt;h3&gt;Echo&lt;/h3&gt;
&lt;h4&gt;Echo&lt;/h4&gt;
&lt;h5&gt;Echo&lt;/h5&gt;
&lt;h6&gt;Echo …&lt;/h6&gt;</summary><content type="html">&lt;p&gt;This is a scratchpad of sorts to test the capabilities of Pelican.&lt;/p&gt;
&lt;p&gt;Let's start with an Image:
&lt;img alt="Test Image" src="https://aniruddhadeb.com/articles/2020/res/test_post/big_buck_bunny.png"&gt;
Big buck bunny looking real handsome ;) Some tweaks have to be made to expand 
the image on click but this is ok for now..&lt;/p&gt;
&lt;p&gt;Let's try headings!&lt;/p&gt;
&lt;h1&gt;Echo&lt;/h1&gt;
&lt;h2&gt;Echo&lt;/h2&gt;
&lt;h3&gt;Echo&lt;/h3&gt;
&lt;h4&gt;Echo&lt;/h4&gt;
&lt;h5&gt;Echo&lt;/h5&gt;
&lt;h6&gt;Echo&lt;/h6&gt;
&lt;p&gt;looking good, although I will personally never use anything lower than H4 (if 
you're nesting these many headings, you should just go write a book).&lt;/p&gt;
&lt;p&gt;Lists looking fine as well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This&lt;/li&gt;
&lt;li&gt;is &lt;/li&gt;
&lt;li&gt;an &lt;/li&gt;
&lt;li&gt;unordered&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ordered list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Law&lt;/li&gt;
&lt;li&gt;And&lt;/li&gt;
&lt;li&gt;Order&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tables (top 10 chess players as of 19th July 2020):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Country&lt;/th&gt;
&lt;th&gt;Rating&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Magnus Carlsen&lt;/td&gt;
&lt;td&gt;NOR&lt;/td&gt;
&lt;td&gt;2863&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Fabiano Caruana&lt;/td&gt;
&lt;td&gt;USA&lt;/td&gt;
&lt;td&gt;2835&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Liren Ding&lt;/td&gt;
&lt;td&gt;CHN&lt;/td&gt;
&lt;td&gt;2791&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Ian Nepomniachtchi&lt;/td&gt;
&lt;td&gt;RUS&lt;/td&gt;
&lt;td&gt;2784&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Maxime Vachier-Lagrave&lt;/td&gt;
&lt;td&gt;FRA&lt;/td&gt;
&lt;td&gt;2778&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Alexander Grischuk&lt;/td&gt;
&lt;td&gt;RUS&lt;/td&gt;
&lt;td&gt;2777&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;Levon Aronian&lt;/td&gt;
&lt;td&gt;ARM&lt;/td&gt;
&lt;td&gt;2773&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Wesley So&lt;/td&gt;
&lt;td&gt;USA&lt;/td&gt;
&lt;td&gt;2770&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;Teimour Radjabov&lt;/td&gt;
&lt;td&gt;AZE&lt;/td&gt;
&lt;td&gt;2765&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Anish Giri&lt;/td&gt;
&lt;td&gt;NED&lt;/td&gt;
&lt;td&gt;2764&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Some MathJax, and a quote/hyperlink example (this is taken from 
&lt;a href="https://math.stackexchange.com/questions/3761395/will-t12-x-substitution-work-for-this-integral/3761410#3761410"&gt;Math SE&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;let $x = t^{12} \implies dx = 12t^{11} dt$
$$A = \int \left( \frac{1}{t^4+t^3} + \frac{\ln(1+t^2)}{t^4 + t^6} \right) 12t^{11}dt \ 
= \underbrace{\int \frac{12t^8}{t+1}dt}_{A_1} + \underbrace{\int \frac{\ln(1+t^2)}{1+t^2}12t^7dt}_{A_2} $$
$A_1$ can be written as:
$$A_1 = 12 \int \frac{x^8 - 1 + 1}{x+1} dx= 12 \int (x^4+1)(x^2+1)(x-1) + \frac{1}{x+1}dx$$
Which is doable. For $A_2$, make the substitution $1+t^2 = k \implies 2tdt = dk$
$$A_2 = 6 \int \frac{\ln(k)}{k}(k-1)^3dk$$
This can be integrated by parts as follows:
$$A_2 = 6\left( \ln(k) \cdot \left( \frac{k^3}{3} - \frac{3k^2}{2} + 3k - \ln(k)\right) + \int \frac 1k \cdot \left( \frac{k^3}{3} - \frac{3k^2}{2} + 3k - \ln(k)\right) dk\right)$$
$A_2$ is also now doable. Add $A_1$ and $A_2$ to get $A$ and substitute back till you get $A = f(x) + c$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's an example of some embedded HTML: (using the &lt;a href="chess.com"&gt;chess.com&lt;/a&gt; 
chess player to show one of my games)&lt;/p&gt;
&lt;iframe id="6878876" allowtransparency="true" frameborder="0" style="width:760px;height:480px;margin:auto;display:block;border:none;" src="//www.chess.com/emboard?id=6878876"&gt;&lt;/iframe&gt;
&lt;script type="text/javascript"&gt;window.addEventListener("message",e=&gt;{e['data']&amp;&amp;"6878876"===e['data']['id']&amp;&amp;document.getElementById(\`${e['data']['id']}\`)&amp;&amp;(document.getElementById(\`${e['data']['id']}\`).style.height=\`${e['data']['frameHeight']+60}px\`)});&lt;/script&gt;

&lt;p&gt;Here's some code to generate a minefield (Taken from the &lt;a href="https://github.com/Aniruddha-Deb/Mines/blob/master/src/com/sensei/mines/core/MinefieldGenerator.java"&gt;Mines&lt;/a&gt; repo):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRows&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCols&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numMines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMines&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;numMines&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xLoc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yLoc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yDiff&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yLoc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xDiff&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xLoc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;putable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yDiff&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xDiff&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buttons&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;yLoc&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;xLoc&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasMine&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;putable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;                 &lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;buttons&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;yLoc&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;xLoc&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buttons&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasMine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;padAround&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buttons&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Everything looks in place! Looking forward to writing some great content here.
Next post: How I migrated from Blogger to github-pages.&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>ISC 2020 Analysis: An application of Data Science and Statistics</title><link href="https://aniruddhadeb.com/articles/2020/isc-2020-analysis.html" rel="alternate"></link><published>2020-07-11T16:30:00+05:30</published><updated>2020-07-11T16:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-07-11:/articles/2020/isc-2020-analysis.html</id><summary type="html">&lt;p&gt;The ISC Exam results were released on 10th June, 3 PM IST. In this article, I'll be analyzing the results of the 117 students in the science stream of my school and showing how they performed. I'll also weave a story with the data and point out things that could …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The ISC Exam results were released on 10th June, 3 PM IST. In this article, I'll be analyzing the results of the 117 students in the science stream of my school and showing how they performed. I'll also weave a story with the data and point out things that could have been improved, which would be helpful for future students.&lt;/p&gt;
&lt;h3&gt;Index:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Elementary inferences: How have people fared overall?&lt;/li&gt;
&lt;li&gt;Frequency Distribution of Marks: How many people got the same marks in a subject?&lt;/li&gt;
&lt;li&gt;Quartiles: What score is comparatively a good score?&lt;/li&gt;
&lt;li&gt;Corellation Analysis: Is there a relation between marks scored in different subjects?&lt;/li&gt;
&lt;li&gt;Using other datapoints: Do girls perform better than boys? Are back-benchers doing poorly?&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Elementary Inferences&lt;/h3&gt;
&lt;p&gt;The Science Stream consists of 117 Students, with 80 boys and 37 girls, all of whom passed.&lt;/p&gt;
&lt;p&gt;$$\begin{array}{|c|c|}
\hline
\text{Dataset} &amp;amp; \text{mean} &amp;amp; \text{median} &amp;amp; \text{mode} &amp;amp; \text{max} &amp;amp; \text{min} &amp;amp; \sigma \\
\hline
\text{Bo4%} &amp;amp; 83.11 &amp;amp; 84.75 &amp;amp; - &amp;amp; 97.75 &amp;amp; 57.5 &amp;amp; 8.86 \\
\text{Overall %} &amp;amp; 80.32 &amp;amp; 82.6 &amp;amp; 85.8 &amp;amp; 97.6 &amp;amp; 52.6 &amp;amp; 10.10 \\
\text{Boys Bo4%} &amp;amp; 83.70 &amp;amp; 85.5 &amp;amp; 80.25 &amp;amp; 97.75 &amp;amp; 57.5 &amp;amp; 8.62 \\
\text{Boys overall %} &amp;amp; 80.94 &amp;amp; 82.70 &amp;amp; - &amp;amp; 97.6 &amp;amp; 52.6 &amp;amp; 9.61 \\
\text{Girls Bo4 %} &amp;amp; 81.84 &amp;amp; 81.25 &amp;amp; - &amp;amp; 95.25 &amp;amp; 59.5 &amp;amp; 9.34 \\
\text{Girls overall %} &amp;amp; 78.98 &amp;amp; 80.5 &amp;amp; - &amp;amp; 94.8 &amp;amp; 54.6 &amp;amp; 11.10 \\
\hline
\end{array}$$
&lt;center&gt;&lt;sup&gt;(Bo4 = Best of 4, - = no mode exists, $\sigma$ = standard deviation)&lt;/sup&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;The mean, median and mode lie in the $80-85 %$ range for almost all datasets. There is a standard deviation of 8.86 from the mean and the toppers lie $1.5\sigma$ right of mean ($&amp;gt;96.4\%$). Interestingly, the people who scored the least lie $3\sigma$ left of mean ($~56 \%$), which is more than the toppers lie right of the mean. The Boys and Girls datasets are compared in more detail in Section 5: Using other datapoints&lt;/p&gt;
&lt;p&gt;A similar raw data comparision can also be done with subjectwise marks:
$$\begin{array}{|c|c|}
\hline
\text{Dataset} &amp;amp; n &amp;amp; \text{mean} &amp;amp; \text{median} &amp;amp; \text{max} &amp;amp; \text{min} &amp;amp; \sigma \\
\hline
\text{English} &amp;amp; 117 &amp;amp; 87.54 &amp;amp; 88 &amp;amp; 96 &amp;amp; 70 &amp;amp; 4.46 \\
\text{Physics} &amp;amp; 117 &amp;amp; 78.75 &amp;amp; 81 &amp;amp; 100 &amp;amp; 45 &amp;amp; 13.94 \\
\text{Chemistry} &amp;amp; 116 &amp;amp; 72.49 &amp;amp; 71.50 &amp;amp; 98 &amp;amp; 42 &amp;amp; 13.65 \\
\text{Mathematics} &amp;amp; 107 &amp;amp; 73.98 &amp;amp; 77 &amp;amp; 100 &amp;amp; 16 &amp;amp; 19.32 \\
\text{Computer Science} &amp;amp; 80 &amp;amp; 88.85 &amp;amp; 91 &amp;amp; 100 &amp;amp; 54 &amp;amp; 8.20 \\
\text{Biology} &amp;amp; 28 &amp;amp; 89.14 &amp;amp; 90 &amp;amp; 97 &amp;amp; 75 &amp;amp; 5.35 \\
\text{Environmental Science} &amp;amp; 7 &amp;amp; 80.71 &amp;amp; 78 &amp;amp; 94 &amp;amp; 72 &amp;amp; 6.85 \\
\text{Art} &amp;amp; 4 &amp;amp; 88.25 &amp;amp; 88 &amp;amp; 91 &amp;amp; 86 &amp;amp; 2.22 \\
\hline
\end{array}$$&lt;/p&gt;
&lt;p&gt;This is an interesting dataset; looking at it, a few stories are evident:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Low Standard deviation in English and Computer Science: This is an interesting theme. English, given it's size, has the lowest standard deviation of $4.46$. Computer Science has a remarkably high mean of $88.85$ and a median of $91$. &lt;del&gt;Most students in class do not go to external tuitions for these subjects&lt;/del&gt;(see edit). This means that the quality of education imparted in the class room is quite good and brings results for English and Computer Science.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;EDIT: Turns out that quite a few people who have taken Computer Science and scored above 90 went for tuitions. A Majority of students don't go to tuitions for English, though, and I believe that our school has an above-average showing in English this time. (reference)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;High standard deviation and low mean in Physics, Chemistry and Mathematics: Another very interesting (and scary) theme: these subjects make up the core of science and it is shocking to see students perform badly in these core subjects. Most students seek external help for these subjects, and in spite of the external help, are not able to perform well. The mean marks in Math are 74, while they should ideally be close to 90, due to the precise nature of the subject. The education system needs to have a serious rethink on where they are going wrong in imparting the knowledge of these core subjects to the students.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the following sections, I won't be focusing too much on Arts, EVS and Biology: Arts and EVS make up a very small dataset, whose results may not be reliable. The marks obtained in Biology are not representative of the students' potential: due to the exams being cancelled, the marks for Biology were derived via this averaging algorithm.&lt;/p&gt;
&lt;h3&gt;Frequency Distribution of Marks&lt;/h3&gt;
&lt;p&gt;I'll be plotting a few Histograms in this section and doing an overview of the 'spread' of marks across the spectrum. This helps visualize the data presented in the previous section. The data for most subjects fits into a bell curve, with the exception of Physics, Chemistry and Mathematics&lt;/p&gt;
&lt;p&gt;As a small primer: A histogram plots the frequency of a particular element in a data set. If 5 people scored 95 marks, then a bar 5 units tall would be placed at the 95th element. The graphs would make this clearer.&lt;/p&gt;
&lt;p&gt;Let's start with the small subjects: Arts, EVS and Biology&lt;/p&gt;
&lt;p&gt;&lt;img alt="histogram" src="https://aniruddhadeb.com/articles/2020/res/results/histogram/Art.png"&gt;
&lt;img alt="histogram" src="https://aniruddhadeb.com/articles/2020/res/results/histogram/EVS.png"&gt;
&lt;img alt="histogram" src="https://aniruddhadeb.com/articles/2020/res/results/histogram/Biology.png"&gt;&lt;/p&gt;
&lt;p&gt;There's not too much to see here, because of the sparsity of these graphs. Let's move on to English:&lt;/p&gt;
&lt;p&gt;&lt;img alt="histogram" src="https://aniruddhadeb.com/articles/2020/res/results/histogram/English.png"&gt;&lt;/p&gt;
&lt;p&gt;The graph for English nicely highlights the bell curve distribution; a majority of people have scored 89, and almost all students have obtained marks in the $79-94$ range. Computer Science also shows a similar trend&lt;/p&gt;
&lt;p&gt;&lt;img alt="histogram" src="https://aniruddhadeb.com/articles/2020/res/results/histogram/CS.png"&gt;&lt;/p&gt;
&lt;p&gt;Apart from a few outliers on the lower end of the spectrum, most people have obtained above $85$ here, with 91 being the most common score. 17 people obtained a score of 95 and above. One person obtained a solid $100$. This is a good result in a not-so-easy subject.&lt;/p&gt;
&lt;p&gt;Moving on to Physics:&lt;/p&gt;
&lt;p&gt;&lt;img alt="histogram" src="https://aniruddhadeb.com/articles/2020/res/results/histogram/Physics.png"&gt;&lt;/p&gt;
&lt;p&gt;The Median for Physics was much higher than that of Maths and Chemistry (In part maybe because the paper was easy). We see that around 29 people have scored less than 70 here. 92 is the mode for this dataset, which is a good score. Again, one person has scored $100$, which is not an impossible feat in any of the sciences. &lt;/p&gt;
&lt;p&gt;What immediately pops out in the Physics graph is that there is no well-defined 'peak' or 'cluster' in the data as there was for the previous subjects. This becomes even more apparent in Chemistry:&lt;/p&gt;
&lt;p&gt;&lt;img alt="histogram" src="https://aniruddhadeb.com/articles/2020/res/results/histogram/Chemistry.png"&gt;&lt;/p&gt;
&lt;p&gt;Mark segmentation is heavily apparent in chemistry, with four clearly defined segments: those scoring above 95, those in the 80-95 range, those in the 60-80 range and those who obtained below 60. The segmentation explains the high standard deviation as well as the low mean (a large number of people are centered around 70 and 85). The number of people scoring above 90 drops heavily here, with only 10 people crossing the barrier. Amazingly, nobody obtained a 100 or a 99 in this paper, with 98 being the highest. &lt;/p&gt;
&lt;p&gt;Finally, Maths teaches us a lot of lessons:&lt;/p&gt;
&lt;p&gt;&lt;img alt="histogram" src="https://aniruddhadeb.com/articles/2020/res/results/histogram/Mathematics.png"&gt;&lt;/p&gt;
&lt;p&gt;Marks in math resemble a bag of dropped marbles: there seems to be a slight pattern here, but one that is heavily tinged by apparent randomness. Heavy segmentation and sparse distribution show why the standard deviation is around 20 here. Inequality is also highly apparent here: those who do well at maths do exceptionally well (3 people scored a 100) and those who do poorly do extremely poorly. Part of this is due to the high-stakes nature of the math paper: the marking pattern has a tendency to be ruthless here, while the other part boils down to imparting math education to the people who don't have a knack for math. There are two lessons here: for the people who are yet to give their exams, Study math and Study math hard. For those who have already given their exams, If you have done poorly in Math, take comfort in the fact that you are not alone. Math (and Chemistry) was tricky this time and if you are taking a math-heavy field, you will have several opportunities in life to do better in this subject later.&lt;/p&gt;
&lt;p&gt;Finally, Here's the histograms for Best of 4 percentage and Overall percentage:&lt;/p&gt;
&lt;p&gt;&lt;img alt="histogram" src="https://aniruddhadeb.com/articles/2020/res/results/histogram/Bo4Pct.png"&gt;
&lt;img alt="histogram" src="https://aniruddhadeb.com/articles/2020/res/results/histogram/TotPct.png"&gt;&lt;/p&gt;
&lt;h3&gt;Quartiles&lt;/h3&gt;
&lt;p&gt;What score is a good score? The same set of marks, when viewed by different people, can have different interpretations. While your parents may think you have done poorly, compared to your friends, you may have done pretty well! Quartiles take care of this: they convert your percentage to percentile (A concept we're all familiar with, after JEE Main) and tell you into which 'bucket' you fit:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1st quartile or Lower quartile: below 25th percentile&lt;/li&gt;
&lt;li&gt;2nd quartile: between 25th-50th percentile&lt;/li&gt;
&lt;li&gt;3rd quartile: between 50th-75th percentile&lt;/li&gt;
&lt;li&gt;4th quartile or Upper quartile: above 75th percentile
This table shows the entry marks required to break into a particular quartile:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$$\begin{array}{|c|c|}
\hline
\text{Dataset} &amp;amp; \text{Q1} &amp;amp; \text{Q2} &amp;amp; \text{Q3} &amp;amp; \text{Q4}\\
\hline
\text{Bo4%} &amp;amp; 0 &amp;amp; 78 &amp;amp; 84.75 &amp;amp; 89.75 \\
\text{Overall %} &amp;amp; 0 &amp;amp; 74.60 &amp;amp; 82.60 &amp;amp; 87.80 \\
\text{English} &amp;amp; 0 &amp;amp; 85 &amp;amp; 88 &amp;amp; 91 \\
\text{Physics} &amp;amp; 0 &amp;amp; 72 &amp;amp; 81 &amp;amp; 91 \\
\text{Chemistry} &amp;amp; 0 &amp;amp; 64 &amp;amp; 71.50 &amp;amp; 84.25 \\
\text{Mathematics} &amp;amp; 0 &amp;amp; 62.50 &amp;amp; 77 &amp;amp; 89.50 \\
\text{Computer Science} &amp;amp; 0 &amp;amp; 86 &amp;amp; 91 &amp;amp; 94 \\
\text{Biology} &amp;amp; 0 &amp;amp; 86 &amp;amp; 90 &amp;amp; 93.25 \\
\text{Environmental Science} &amp;amp; 0 &amp;amp; 78 &amp;amp; 78 &amp;amp; 82.50 \\
\text{Art} &amp;amp; 0 &amp;amp; 86.75 &amp;amp; 88 &amp;amp; 89.50 \\
\hline
\end{array}$$&lt;/p&gt;
&lt;p&gt;As an example, if you obtained a best of 4 percentage of $85\%$, you would fit in the Third Quartile. This is because you broke through the first (0), second (78) and third (84.75) quartile entry limits but could not break into the fourth quartile (89.75). Hence, your quartile is detemined by the entry marks just below/equal to your own marks.&lt;/p&gt;
&lt;h3&gt;Corellation Analysis&lt;/h3&gt;
&lt;p&gt;Subjects are not disjoint sets: there is quite a bit of overlap between two subjects. As an example, Atomic Structure is a topic we study both in Physics and Chemistry. For a broader example, a firm understanding of Mathematics is required to do well in Physics and Physical Chemistry. &lt;/p&gt;
&lt;p&gt;&lt;img alt="On the other hand, physicists like to say physics is to math as sex is to masturbation." src="https://imgs.xkcd.com/comics/purity.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;Obligatory XKCD :)&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;In this analysis, I'll treat Mathematics as the 'glue' subject and analyze how Physics and Chemistry coreelate with Mathematics, as well as how Physics and Chemistry correlate with each other. &lt;/p&gt;
&lt;p&gt;First up, Mathematics-Physics and Mathematics-Chemistry corellations:&lt;/p&gt;
&lt;p&gt;&lt;img alt="correlation" src="https://aniruddhadeb.com/articles/2020/res/results/correlation/MP_correlation.png"&gt;
&lt;img alt="correlation" src="https://aniruddhadeb.com/articles/2020/res/results/correlation/MC_correlation.png"&gt;&lt;/p&gt;
&lt;p&gt;Notice that $r &amp;gt; 0.8$ for both of these correlations: this means that those who did well in math automatically did well in Physics and Chemistry, which reiterates a key point to upcoming students: learn to love Math. Also notice that $r_{MP} &amp;gt; r_{MC}$. This also validates the fact that Maths is more important for Physics than it is for Chemistry (which is kind of obvious, since Physical chemistry has around 30-40% weightage only). &lt;/p&gt;
&lt;p&gt;Physics-Chemistry yields an interesting graph:&lt;/p&gt;
&lt;p&gt;&lt;img alt="correlation" src="https://aniruddhadeb.com/articles/2020/res/results/correlation/PC_correlation.png"&gt;&lt;/p&gt;
&lt;p&gt;Amazingly, there is an even higher degree of correlation here than there is between Math-Physics and Math-Chemistry. This stumped me. If any of the readers have an idea as to why Physics and Chemistry are so interlinked (only the 12th syllabus), then feel free to drop a comment down below. The only theory I have for now is that there are 9 students who have not taken math but have taken Physics and Chemistry (or a similar permutation). These 9 extra data points are contributing the extra $0.04$ to the correlation coefficient.&lt;/p&gt;
&lt;h3&gt;Using Other Datapoints&lt;/h3&gt;
&lt;p&gt;Remember this table from the first section?&lt;/p&gt;
&lt;p&gt;$$\begin{array}{|c|c|}
\hline
\text{Dataset} &amp;amp; \text{mean} &amp;amp; \text{median} &amp;amp; \text{mode} &amp;amp; \text{max} &amp;amp; \text{min} &amp;amp; \sigma \\
\hline
\text{Boys Bo4%} &amp;amp; 83.70 &amp;amp; 85.5 &amp;amp; 80.25 &amp;amp; 97.75 &amp;amp; 57.5 &amp;amp; 8.62 \\
\text{Boys overall %} &amp;amp; 80.94 &amp;amp; 82.70 &amp;amp; - &amp;amp; 97.6 &amp;amp; 52.6 &amp;amp; 9.61 \\
\text{Girls Bo4 %} &amp;amp; 81.84 &amp;amp; 81.25 &amp;amp; - &amp;amp; 95.25 &amp;amp; 59.5 &amp;amp; 9.34 \\
\text{Girls overall %} &amp;amp; 78.98 &amp;amp; 80.5 &amp;amp; - &amp;amp; 94.8 &amp;amp; 54.6 &amp;amp; 11.10 \\
\hline
\end{array}$$&lt;/p&gt;
&lt;p&gt;I'll be expanding on this to display separate statistics for Boys and Girls in all the subjects. One problem that exists is that the number of boys and girls is not the same: not normalizing the data beforehand would favour the boys in every case. In these graphs, both the boys and girls are normalized, such that each boy or girl represents a fraction of the total boys and girls (for boys this fraction is $\frac{1}{80}$ as there are 80 boys, and for girls this fraction is $\frac{1}{37}$, as there are 37 girls&lt;/p&gt;
&lt;p&gt;As we did previously, Let's start with Art, EVS and Biology, three subjects from which there are minimal inferences to be drawn:&lt;/p&gt;
&lt;p&gt;&lt;img alt="BvG" src="https://aniruddhadeb.com/articles/2020/res/results/BvG/Art_BvG.png"&gt;
&lt;img alt="BvG" src="https://aniruddhadeb.com/articles/2020/res/results/BvG/EVS_BvG.png"&gt;
&lt;img alt="BvG" src="https://aniruddhadeb.com/articles/2020/res/results/BvG/Biology_BvG.png"&gt;&lt;/p&gt;
&lt;p&gt;Not too many inferences to be drawn here: EVS and Art have a very small sample size and Biology was calculated based on averages. Let's move on to English and Computer Science&lt;/p&gt;
&lt;p&gt;&lt;img alt="BvG" src="https://aniruddhadeb.com/articles/2020/res/results/BvG/English_BvG.png"&gt;
&lt;img alt="BvG" src="https://aniruddhadeb.com/articles/2020/res/results/BvG/Computers_BvG.png"&gt;&lt;/p&gt;
&lt;p&gt;Girls and Boys are pretty much on par with each other in Computer Science, whereas for English, Girls do better than Boys.&lt;/p&gt;
&lt;p&gt;The Sciences, however, have a different story to tell. Here's Physics:&lt;/p&gt;
&lt;p&gt;&lt;img alt="BvG" src="https://aniruddhadeb.com/articles/2020/res/results/BvG/Physics_BvG.png"&gt;&lt;/p&gt;
&lt;p&gt;We clearly see that the boys are doing better than girls in Physics. A large number of girls have score in the $72-75$ mark range, as well as in the $46-53$ mark range. Girls lead boys in the $88-92$ mark range, however, the $95-100$ mark range is completely occupied by boys. Chemistry paints a similar picture:&lt;/p&gt;
&lt;p&gt;&lt;img alt="BvG" src="https://aniruddhadeb.com/articles/2020/res/results/BvG/Chemistry_BvG.png"&gt;&lt;/p&gt;
&lt;p&gt;Again, the frequency of girls in the $&amp;lt;60$ mark range is high and the $95-100$ mark range is again occupied by boys. Girls do outperform boys in the $82-93$ mark range here.&lt;/p&gt;
&lt;p&gt;&lt;img alt="BvG" src="https://aniruddhadeb.com/articles/2020/res/results/BvG/Mathematics_BvG.png"&gt;&lt;/p&gt;
&lt;p&gt;Mathematics too is similar. There are no girls in the $97-100$ range and an abundance of them in the $&amp;lt;40$ mark range.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This analysis is by no means exhaustive: many other stories can also be told with exactly the same data set. However, the most important lesson that stands out is to Focus on Math. I cannot stress this enough. Math is required for Physics, Chemistry and to a small extent, Computer Science as well. Having a firm grounding in math is essential for all science students. Math is also a 'precise' subject, which means that the probability of scoring better marks in Math is higher than it is 'soft' subjects such as English.&lt;/p&gt;
&lt;p&gt;For the ones who have already given their papers, I hope that this analysis shows you how well you have done and also points out places where you could have improved. The real value of this analysis lies for the students who are yet to give their papers. I would have benefited immensely had such an analysis been available for me to read before my exams. I hope that upcoming students can use this wisdom to shape their own preparation strategy for the exams.&lt;/p&gt;
&lt;h3&gt;Behind the scenes&lt;/h3&gt;
&lt;p&gt;The data was analysed with Python. Matplotlib was used for drawing the beautiful graphs and numpy, along with python's inbuilt statistics library was used for doing the calculations. This is the first time I've ventured into data science, and I'm really enjoying it :)  R was a candidate for doing most of this processing (I really like R's ggplot2 library: it's built on solid concepts), but I already had my python development environment set up on my machine and wanted to do this in a language I'm comfortable with.&lt;/p&gt;
&lt;p&gt;Further reading (for those interested in Data Science):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Towards Data Science - Amazing medium blog on Data Science&lt;/li&gt;
&lt;li&gt;R Project - R, a language for statistical computing and graphics&lt;/li&gt;
&lt;li&gt;Statistics How to - For absolute beginners in statistics&lt;/li&gt;
&lt;/ul&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category><category term="ISC"></category><category term="Data Science"></category></entry><entry><title>Solving the African Integral (from YG file cover)</title><link href="https://aniruddhadeb.com/articles/2020/african-integral.html" rel="alternate"></link><published>2020-07-09T20:30:00+05:30</published><updated>2020-07-09T20:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-07-09:/articles/2020/african-integral.html</id><summary type="html">&lt;p&gt;A long time ago, I gave my friend (Let's call him C) an integral to solve. He came back to me a few days later and the conversation went something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;C:&lt;/strong&gt; Debu, I couldn't solve that African integral you gave me.&lt;br&gt;
&lt;strong&gt;Me:&lt;/strong&gt; Ok, but why are you calling …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;A long time ago, I gave my friend (Let's call him C) an integral to solve. He came back to me a few days later and the conversation went something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;C:&lt;/strong&gt; Debu, I couldn't solve that African integral you gave me.&lt;br&gt;
&lt;strong&gt;Me:&lt;/strong&gt; Ok, but why are you calling it African?&lt;br&gt;
&lt;strong&gt;C:&lt;/strong&gt; Because Africa is a really big continent, y'know?&lt;br&gt;
&lt;strong&gt;Me:&lt;/strong&gt; Ok, but isn't Asia bigger?&lt;br&gt;
&lt;strong&gt;C:&lt;/strong&gt; Debu, please stop making me feel dumb&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The integral in question appears prominently on the YG file cover as well, and is also featured in Advanced Problems in Mathematics for JEE(A) by Vikas Gupta (Question 24 chapter 7, for those following along)&lt;/p&gt;
&lt;p&gt;&lt;img alt="YG File cover" src="https://aniruddhadeb.com/articles/2020/res/yg_file.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Evaluate $$\int e^{x\sin x + \cos x} \left( \frac{x^4\cos^3x - x\sin x + \cos x}{x^2 \cos^2x}\right) dx$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This looks fearsome, but we can solve it easily by extending the trick $\int e^x (f(x) + f'(x)) dx = e^xf(x) + c$ just a little bit. Consider the function $$e^{g(x)}f(x)$$ Differentiating said function, we see that $$\frac{d}{dx} (e^{g(x)}f(x)) = e^{g(x)}(f'(x) + g'(x)f(x))$$ Rearranging the terms and integrating on both sides: $$e^{g(x)}f(x) = \int e^{g(x)}(f'(x) + g'(x)f(x)) dx$$ For the given problem, $g(x) = x\sin x + \cos x \implies g'(x) = x\cos x$. Therefore, the answer will be something of the form $$I = e^{x\sin x + \cos x} f(x) + c$$ The problem now becomes finding $f(x)$, which we can do through some rearrangement. Rewriting the problem to fit in $g'(x)$, the problem becomes: $$I = \int e^{x\sin x + \cos x} \left( x\cos x \cdot x + \frac{\sec x}{x^2} - \frac{\tan x \sec x}{x}\right) dx$$ We can see that the first term in the bracket implies that $f(x) = x$, but $f'(x) \ne \frac{\sec x}{x^2} - \frac{\tan x \sec x}{x}$. It's easy to see that the last two terms have some kind of pattern going on, as $\frac{d}{dx}\sec x = \sec x \tan x$ and $\frac{d}{dx} \frac{1}{x} = -\frac{1}{x^2}$. The last two terms can be rewritten as $\frac{d}{dx} \left( \frac{\sec x}{x}\right)$. Go through the above steps once again if you're unsure of what is happening, because this is important. The integral can then be rewritten as: 
$$I = \int e^{x\sin x + \cos x} \left( x\cos x \cdot x - \frac{d}{dx} \left( \frac{\sec x}{x}\right) \right) dx$$&lt;/p&gt;
&lt;p&gt;We're finally getting somewhere! We had initially assumed that $f(x) = x$, but now, seeing the differential term in the bracket, let's assume 
$$f(x) = x - \frac{\sec x}{x} \implies f'(x) = 1 - \frac{d}{dx} \left( \frac{\sec x}{x}\right)$$&lt;/p&gt;
&lt;p&gt;Also, $g'(x)f(x)$ then becomes 
$$g'(x)f(x) = x\cos x \left(x - \frac{\sec x}{x}\right) = x\cos x \cdot x - 1$$&lt;/p&gt;
&lt;p&gt;Adding them together, we get
$$g'(x)f(x) + f'(x) = x\cos x \cdot x - \frac{d}{dx} \left( \frac{\sec x}{x}\right)$$&lt;/p&gt;
&lt;p&gt;Which is the term in the brackets in the integral. Thus, $f(x) = x - \frac{\sec x}{x}$. We have now solved our integral, and the answer is
$$\boxed{I =  e^{x\sin x + \cos x} \left( x - \frac{\sec x}{x}\right) + c}$$&lt;/p&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category></entry><entry><title>Debunking Concepts of Physics, and why you should NOT use this book.</title><link href="https://aniruddhadeb.com/articles/2020/debunking-concepts-of-physics.html" rel="alternate"></link><published>2020-06-22T11:30:00+05:30</published><updated>2020-06-22T11:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-06-22:/articles/2020/debunking-concepts-of-physics.html</id><summary type="html">&lt;p&gt;I generally don't post stuff that is extremely specific to JEE, but this time I'm willing to make an exception.&lt;/p&gt;
&lt;p&gt;A lot has been said about &lt;a href="https://www.concepts-of-physics.com/concepts-of-physics.php"&gt;Concepts of Physics&lt;/a&gt; by Dr. H. C.Verma and it's usefulness for JEE Preparation. The website itself claims that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Students from the past twenty …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I generally don't post stuff that is extremely specific to JEE, but this time I'm willing to make an exception.&lt;/p&gt;
&lt;p&gt;A lot has been said about &lt;a href="https://www.concepts-of-physics.com/concepts-of-physics.php"&gt;Concepts of Physics&lt;/a&gt; by Dr. H. C.Verma and it's usefulness for JEE Preparation. The website itself claims that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Students from the past twenty years of JEE preparation used this book and have successfully cleared JEE. So, you cannot neglect this book. A common problem that was observed with many JEE aspirants is that they follow multiple books in parallel, thereby ending up in confusion. Follow only one book at a time and make sure it is reputed one like Concepts of Physics by HC Verma. You may consults other books too but not at the cost of creating more confusion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thankfully, this website is not endorsed by Dr. H. C. Verma himself. It seems to be made by a third party looking to sell their own books, in conjunction with Dr. Verma's. I have nothing against the book itself: as far as physics books go, it is brilliantly formatted and lucidly explained. It's a great introduction to Physics for several physics noobs, including me. Let me repeat that again:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Concepts of Physics is a great introductory book for people who are not good at physics.&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Everyone starts out a learner. It's fine to use a book like this when you're learning. However, this book has almost zero applicability when it comes to preparing for JEE(A). It might get you through JEE(M), but it's extremely risky to refer to ONLY this book and accept it's word as the word of god. Here are a few reasons not to use Concepts of Physics for long term preparation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It's not exam-oriented!&lt;/strong&gt; This has to be the biggest gripe of mine. The book's content has not kept up with the demands of the exam, but that is not it's purpose. However, people still believe that it has kept up and is still as relevant as it was 20 years ago. The Single Correct and Multiple Correct questions (Objective I and Objective II) are mainly concept oriented, with no numericals. Even the subjective questions suck big time, compared to Irodov or Krotov. Here's a snap of Chapter 18, Geometrical Optics:&lt;br&gt;
&lt;center&gt;&lt;img alt="chapter 18" src="https://aniruddhadeb.com/articles/2020/res/chp18_optics.png"&gt;&lt;/center&gt;&lt;br&gt;
 Notice that questions 61-66 are exactly the same with the only difference being the type of lens and mirror in the situation and the parameter being asked. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It covers irrelevant concepts!&lt;/strong&gt; TVF made a point of this in their skit "A Day with H C Verma". Chapter 47, Relativity, is not included in syllabus. A lot of other concepts, such as Peltier effect, Zeeman effect, measuring speed of light etc are irrelevant from an exam point of view. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It does not cover relevant concepts!&lt;/strong&gt; Some concepts such as force on a dielectric (question 74 of Capacitors chapter) are not explained in the textbook and are left to the students to solve. Angular momentum (one of the most important concepts, see JEE(A) 2016) is paid a lip service in Rotational motion, with one big mathematical derivation explaining the whole concept.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As I already mentioned, Concepts of physics is a great physics book, which is often the entry point of many students into the world of Higher Secondary Physics. However, I am tired of self-proclaimed 'gurus' and other JEE toppers proclaiming that this book is all you need to crack the exam. This is a blatant lie. &lt;/p&gt;</content><category term="JEE"></category><category term="JEE"></category><category term="Physics"></category></entry><entry><title>Icosahedron Resistor Network</title><link href="https://aniruddhadeb.com/articles/2020/icosahedron-resistor-network.html" rel="alternate"></link><published>2020-06-09T12:30:00+05:30</published><updated>2020-06-09T12:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-06-09:/articles/2020/icosahedron-resistor-network.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Consider the icosahedral resistance network shown in the following figure. Each edge is made of a rod of resistance $r$. Select the option(s) that is(are) correct:&lt;br&gt;
&lt;center&gt;&lt;img alt="icosahedron" src="https://aniruddhadeb.com/articles/2020/res/icosa_res_net/icosa_1.png"&gt;&lt;/center&gt;&lt;br&gt;
A) The resistance between points A and B is $\frac{r}{2}$&lt;br&gt;
B) The resistance between points A and B is $\frac …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Consider the icosahedral resistance network shown in the following figure. Each edge is made of a rod of resistance $r$. Select the option(s) that is(are) correct:&lt;br&gt;
&lt;center&gt;&lt;img alt="icosahedron" src="https://aniruddhadeb.com/articles/2020/res/icosa_res_net/icosa_1.png"&gt;&lt;/center&gt;&lt;br&gt;
A) The resistance between points A and B is $\frac{r}{2}$&lt;br&gt;
B) The resistance between points A and B is $\frac{r}{3}$&lt;br&gt;
C) The resistance between any two adjacent vertices is $\frac{11r}{30}$&lt;br&gt;
D) The resistance between any two adjacent vertices is $\frac{11r}{20}$&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This question looks really tricky. This is a variation of the problem of finding the resistance of a wire cube. This can be solved in a similar way, using symmetry and equipotential reduction.&lt;/p&gt;
&lt;p&gt;Let's start off by finding the resistance between A and B, since this is easier than finding the resistance between adjacent vertices. On connecting a battery, the points marked in the same colour will be at the same potential.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="battery" src="https://aniruddhadeb.com/articles/2020/res/icosa_res_net/icosa_2.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;You can clearly see the symmetry now. If we connect all the points with the same potential, we end up with the following resistor network (each resistance is $r$).&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="res net" src="https://aniruddhadeb.com/articles/2020/res/icosa_res_net/res_net.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;This is simple to solve. It's resistance is
$$R_{AB} = \frac r5 + \frac r{10} + \frac r5 = \boxed{\frac r2}$$
which corresponds to option (A).&lt;/p&gt;
&lt;p&gt;Solving the network between adjacent vertices is a lot trickier. The first trick is to pick a pair of vertices from which symmetry is easily identifiable. If I connect my battery as shown in the following figure, it is easy to identify which points are equipotential and how the currents are flowing.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="currents" src="https://aniruddhadeb.com/articles/2020/res/icosa_res_net/icosa_3.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;The dotted line shows the plane of symmetry of this icosahedron perpendicular to $CD$ whereas the blue dots show equipotential nodes. We can see that no current flows through $R_{AJ}$ and $R_{EB}$ since the ends are at the same potential. Also, at all equipotential points, no mixing of currents occurs. This means that $I_{AC} = I_{AD}$ and $I_{CE} = I_{ED}$, along with a few others. Performing some modifications on this circuit in line with the above observations reduces the complexity quite drastically as shown below:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="simple" src="https://aniruddhadeb.com/articles/2020/res/icosa_res_net/icosa_4.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Simplifying these resistors, we obtain a cubical network with a resistor across two opposite face diagonals&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="cube" src="https://aniruddhadeb.com/articles/2020/res/icosa_res_net/icosa_5.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;It is easy to see that $V_F = V_L$ and $V_G = V_K$. Connecting these two points and getting rid of the resistances $R_{GK}$ and $R_{LF}$, we get the following resistor network:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="simplest" src="https://aniruddhadeb.com/articles/2020/res/icosa_res_net/icosa_6.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;It is now simple to calculate the resistance across CD by using the formulae for resistors in parallel and series.&lt;/p&gt;
&lt;p&gt;$$\begin{gather} 
\frac 1 {R_{FG}} = \frac 2 r + \frac 2 {3r} \\
R_{FG} = \frac{3r}{8} \\
\frac{1}{R_{CD}} = \frac{8}{11r} + \frac{2}{r} \\
\boxed{R_{CD} = \frac{11r}{30}} 
\end{gather}$$&lt;/p&gt;
&lt;p&gt;Which corresponds to option (C)&lt;/p&gt;
&lt;p&gt;A good problem that I came up with on my own; the next step is to do the same for a dodecahedric resistor network. Stay tuned for that :)&lt;/p&gt;</content><category term="Electronics"></category><category term="Physics"></category><category term="Electronics"></category></entry><entry><title>A Compilation of hard limits</title><link href="https://aniruddhadeb.com/articles/2020/hard-limits.html" rel="alternate"></link><published>2020-06-05T11:30:00+05:30</published><updated>2020-06-05T11:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-06-05:/articles/2020/hard-limits.html</id><summary type="html">&lt;p&gt;This list consists of the limits that I found most challenging.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;$$\lim_{n \to \infty} \left( \frac{n!}{n^n} \right) ^\frac 1n$$&lt;/li&gt;
&lt;li&gt;$$\lim_{x \to 0} \left( \frac{1}{\ln(x + \sqrt{x^2+1})} - \frac 1{\ln(x+1)} \right)$$&lt;/li&gt;
&lt;li&gt;$$\lim_{n \to \infty} \frac{n + n^2 …&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;This list consists of the limits that I found most challenging.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;$$\lim_{n \to \infty} \left( \frac{n!}{n^n} \right) ^\frac 1n$$&lt;/li&gt;
&lt;li&gt;$$\lim_{x \to 0} \left( \frac{1}{\ln(x + \sqrt{x^2+1})} - \frac 1{\ln(x+1)} \right)$$&lt;/li&gt;
&lt;li&gt;$$\lim_{n \to \infty} \frac{n + n^2 + n^3 + ... + n^n}{1^n + 2^n + 3^n + ... + n^n}$$&lt;/li&gt;
&lt;li&gt;$$\lim_{n \to \infty} \left( \frac{n^n(x+n)\left(x+\frac n2\right)...\left(x+\frac nn\right)}{n!(x^2+n^2)\left(x^2+\frac {n^2}{4}\right)...\left( x^2 + \frac{n^2}{n^2}\right)}\right)^{\frac x n}$$&lt;/li&gt;
&lt;li&gt;$$\lim_{x \to 0} \left( 1^{\sin^{-2}x} + 2^{\sin^{-2}x} + ... + n^{\sin^{-2}x}\right)^{\sin^2 x}$$&lt;/li&gt;
&lt;li&gt;$$\lim_{n \to \infty} \sqrt[\leftroot{-2}\uproot{2}n+1]{(n+1)!}-\sqrt[\leftroot{-2}\uproot{2}n]{n!}$$&lt;/li&gt;
&lt;li&gt;$$\lim_{n \to \infty} \left( e - \left( 1 + \frac1n \right) ^n \right) ^\frac 1n$$&lt;/li&gt;
&lt;li&gt;$$\lim_{n \to \infty} \underbrace{\sin(\sin(\sin(...\sin(a)..)))}_\text{n times}$$&lt;/li&gt;
&lt;li&gt;$$\lim_{n \to \infty} \sqrt{1 + 2\sqrt{1 + 3\sqrt{1 + 4\sqrt{ ... 1 + (n-1)\sqrt{1+n}}}}}$$&lt;/li&gt;
&lt;li&gt;$$\lim_{x \to \infty} \binom{x}{n} \left(\frac{a}{x}\right)^n \left( 1 - \frac{a}{x}\right)^{x-n}$$&lt;/li&gt;
&lt;li&gt;$$\lim_{n \to \infty} \ \frac{2^{n+1}}{n+1} \ \left| 3\sum_{k=1}^n (-1)^k\frac{k}{2^k} + \frac 23\right|$$&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Answers:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;$e$&lt;/li&gt;
&lt;li&gt;$-\frac 12$&lt;/li&gt;
&lt;li&gt;$1 - \frac 1e$&lt;/li&gt;
&lt;li&gt;$\exp\left( \int_0^x \ln \left( \frac{t+1}{t^2+1}\right)dt\right)$ (from JEE(A) 2016)&lt;/li&gt;
&lt;li&gt;$n$&lt;/li&gt;
&lt;li&gt;$e^{-1}$&lt;/li&gt;
&lt;li&gt;$1$&lt;/li&gt;
&lt;li&gt;$0$&lt;/li&gt;
&lt;li&gt;$3$ (Ramanujan found this one :)&lt;/li&gt;
&lt;li&gt;$\frac{a^n e^a}{n!}$&lt;/li&gt;
&lt;li&gt;$2$&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category></entry><entry><title>Limit involving higher order infinitesimals</title><link href="https://aniruddhadeb.com/articles/2020/limit-higher-order-infinitesimals.html" rel="alternate"></link><published>2020-06-05T07:30:00+05:30</published><updated>2020-06-05T07:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-06-05:/articles/2020/limit-higher-order-infinitesimals.html</id><summary type="html">&lt;p&gt;Simple limit problems consist of the form $\lim_{x \to 0}\frac{O_1(x)O_2(x)..}{O_a(x)O_b(x)..}$, such as $\lim_{x \to 0} \frac{\sin 3x \tan 2x \tan^{-1} 5x}{x^2 \ln(1+x)}$. Here, the infinitesimals are well defined and cancel out easily. Some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Simple limit problems consist of the form $\lim_{x \to 0}\frac{O_1(x)O_2(x)..}{O_a(x)O_b(x)..}$, such as $\lim_{x \to 0} \frac{\sin 3x \tan 2x \tan^{-1} 5x}{x^2 \ln(1+x)}$. Here, the infinitesimals are well defined and cancel out easily. Some trickier limit problems involve the difference of two infinitesimals. A good example is $\lim_{t \to 0} \frac{\sin t - \tan t}{t^3}$. These kind of problems require expansions to solve them cleanly. L'Hopital rule is tedious as it will need to be repeated atleast thrice for this given limit, which involves infinitesimals of order 3. To illustrate how to solve these problems, I'll give a trickier example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Evaluate the limit $$\lim_{n \to \infty} \left( e - \left( 1 + \frac1n \right) ^n \right) ^\frac 1n$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's easy to assume that the limit $\lim_{n \to \infty} \left( 1 + \frac1n \right)^n$ evaluates to $e$, which means that the expression inside the outer brackets would tend to zero, giving the answer as zero. However, all is not as it seems. This is a good example of difference between infinitesimals yielding a higher order infinitesimal. To start with, consider the function
$$f(n) =  \lim_{n \to \infty} \left( 1 + \frac1n \right)^n$$
Taking a logarithm both sides and using a taylor series expansion for the log on the right side gives
$$\begin{gather}
\log f(n) = \lim_{n \to \infty} n \left( \frac1n - \frac 1{2n^2} + O\left(\frac 1 {n^3}\right) \right) \\
f(n) = \lim_{n \to \infty}e^{1 - \frac 1{2n} + O\left(\frac 1 {n^2}\right)}
\end{gather}$$&lt;/p&gt;
&lt;p&gt;If we substitute $f(n)$ in the limit now, we can see that
$$L = \lim_{n \to \infty} \left( e \left( 1 - e^{-\frac 1{2n} + O\left(\frac 1 {n^2}\right)}\right) \right) ^\frac 1n$$&lt;/p&gt;
&lt;p&gt;Taking a logarithm both sides gives us
$$\log L = \lim_{n \to \infty} \underbrace{\frac{1}{n}}_{f_1} + \underbrace{\frac{ \log\left( 1 - e^{-\frac 1{2n} + O\left(\frac 1 {n^2}\right)}\right)}{n}}_{f_2}$$&lt;/p&gt;
&lt;p&gt;$f_1$ is trivially $0$. $f_2$ can be evaluated using L'Hopital rule, which gives
$$f_2 = \lim_{n \to \infty} \frac{\frac{1}{2n^2} + ... }{1 - e^{-\frac 1{2n} + O\left(\frac 1 {n^2}\right)}}$$&lt;/p&gt;
&lt;p&gt;This evaluates to $0$ as the numerator is a higher order infinitesimal than the denominator. Thus, we have
$$\log L = 0$$&lt;/p&gt;
&lt;p&gt;Taking an exponent both sides gives us
$$\boxed{L = 1}$$&lt;/p&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category></entry><entry><title>COVID-19 USA Analysis: effects of the lack of lockdown</title><link href="https://aniruddhadeb.com/articles/2020/covid-19-usa.html" rel="alternate"></link><published>2020-05-29T20:00:00+05:30</published><updated>2020-05-29T20:00:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-05-29:/articles/2020/covid-19-usa.html</id><summary type="html">&lt;p&gt;The USA currently stands at 1.76 million COVID-19 cases. That's more than the next 5 nations combined. A large number of these cases are due to government inaction against the virus. The lack of a concerted lockdown across the country is also to blame. Here's a graph showing the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The USA currently stands at 1.76 million COVID-19 cases. That's more than the next 5 nations combined. A large number of these cases are due to government inaction against the virus. The lack of a concerted lockdown across the country is also to blame. Here's a graph showing the daily number of cases of COVID-19 in the USA.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Daily covid cases" src="https://aniruddhadeb.com/articles/2020/res/covid-19-usa/covid-cases-daily.png"&gt;&lt;/center&gt;&lt;br&gt;
&lt;center&gt;&lt;sup&gt;Source: Google&lt;/sup&gt;&lt;/center&gt;&lt;br&gt;
Notice something strange? After reaching saturation, the curve shows a weird oscillatory behaviour. Is there a pattern to this? Let's overlay some week markers on the data to get a better feel of it.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="covid weekly" src="https://aniruddhadeb.com/articles/2020/res/covid-19-usa/covid-weekly.png"&gt;&lt;/center&gt;&lt;br&gt;
&lt;center&gt;&lt;sup&gt;Source: Our World in data*&lt;/sup&gt;&lt;/center&gt;&lt;br&gt;
The pattern is much more obvious now. It is clearly visible that reported cases are at their lowest on the first few days of the week and they are at their highest during the weekends. Summing up the data proves this (quite dramatically)&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="covid sum" src="https://aniruddhadeb.com/articles/2020/res/covid-19-usa/covid-sum.png"&gt;&lt;/center&gt;&lt;br&gt;
&lt;center&gt;&lt;sup&gt;Sum of cases/day from 1 Mar to today&lt;/sup&gt;&lt;/center&gt;&lt;br&gt;
This data now allows us to paint a picture. The mean time of incubation of Coronavirus is 5.1 days&lt;sup&gt;[1]&lt;/sup&gt;. One inference is that more people are going out on Sunday night and getting tested on Friday morning. This is not very probable as most of the hospitality business (malls, hotels etc) is shut. The more likely reason is that &lt;em&gt;people are going to work on a Monday and Tuesday, displaying symptoms in a week and then getting tested at the end of the week&lt;/em&gt;. &lt;strong&gt;This situation would not arise if a nationwide lockdown was implemented&lt;/strong&gt;. This is the key reason behind the large number of cases and also behind the recurring patterns of occurence of new cases.&lt;/p&gt;
&lt;p&gt;The analysis also presents several lessons for nations in the nascent phase of the virus: India has lifted it's lockdown just as the number of cases are peaking. While isolation of zones where infected patients have been found continues, urging people to return to work in these times may present the same pattern as shown above.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;* Our World in Data recorded a spike of ~48000 cases on April 26. This seemed suspicious, which is why that data point was substituted by the Google/Wikipedia data for the same date.&lt;/p&gt;
&lt;p&gt;[1]: Lauer, Stephen A., et al. “The Incubation Period of Coronavirus Disease 2019 (COVID-19) From Publicly Reported Confirmed Cases: Estimation and Application.” Annals of Internal Medicine, vol. 172, no. 9, Mar. 2020, pp. 577–82. acpjournals.org (Atypon), doi:&lt;a href="https://doi.org/10.7326/M20-0504"&gt;10.7326/M20-0504&lt;/a&gt;.&lt;/p&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category><category term="COVID 19"></category></entry><entry><title>COVID 19 Regression analysis Update</title><link href="https://aniruddhadeb.com/articles/2020/covid-regression-analysis-update.html" rel="alternate"></link><published>2020-05-19T22:30:00+05:30</published><updated>2020-05-19T22:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-05-19:/articles/2020/covid-regression-analysis-update.html</id><summary type="html">&lt;p&gt;The Previous COVID regression analysis was fairly accurate. However, the opening of lockdown offset the statistics a bit and now there are more number of projected cases. Here is a recomputation of the statistics, which projects an average of 172,000 cases by June 1 and 520,000 cases overall …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Previous COVID regression analysis was fairly accurate. However, the opening of lockdown offset the statistics a bit and now there are more number of projected cases. Here is a recomputation of the statistics, which projects an average of 172,000 cases by June 1 and 520,000 cases overall by August end.&lt;/p&gt;
&lt;p&gt;&lt;img alt="covid static" src="https://aniruddhadeb.com/articles/2020/res/covid_update/covid_static.png"&gt;&lt;br&gt;
&lt;sup&gt;Y-axis: number of new cases per day. X-axis: number of days since first case.&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Here's an animated view:&lt;/p&gt;
&lt;p&gt;&lt;img alt="covid dynamic" src="https://aniruddhadeb.com/articles/2020/res/covid_update/covid_dynamic.gif"&gt;&lt;/p&gt;
&lt;p&gt;The relevant files can be found in &lt;a href="https://github.com/Aniruddha-Deb/COVID_19_regression"&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;UPDATE: As of May 30 9:30 pm, The recorded cases are ~174,000. I was assuming a ~10% error margin on this prediction, but I ended up being quite close to the number. The final number of cases are expected to be ~181,000 by 31st May night, resulting in an error margin of 4.1%.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;P.S: Feel free to clone and tweak the data while citing this as the original source. I do not assume responsibility in the event that this data proves to be wrong or otherwise.&lt;/p&gt;
&lt;p&gt;P.P.S: GeoGebra 6 sucks big time! GeoGebra 5 da real MVP.&lt;/p&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category><category term="COVID 19"></category></entry><entry><title>No square ends in 3</title><link href="https://aniruddhadeb.com/articles/2020/no-square-ends-in-3.html" rel="alternate"></link><published>2020-05-15T11:30:00+05:30</published><updated>2020-05-15T11:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-05-15:/articles/2020/no-square-ends-in-3.html</id><summary type="html">&lt;p&gt;This is an interesting number theory fact that seems strange when taken at face value. Here's a small proof of it:&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is an interesting number theory fact that seems strange when taken at face value. Here's a small proof of it:
$$\begin{array}{|c|c|}
\hline
\text{last digit of number} &amp;amp; \text{last digit of square} \\
\hline
0 &amp;amp; 0 \\
1 &amp;amp; 1 \\
2 &amp;amp; 4 \\
3 &amp;amp; 9 \\
4 &amp;amp; 6 \\
5 &amp;amp; 5 \\
6 &amp;amp; 6 \\
7 &amp;amp; 9 \\
8 &amp;amp; 4 \\
9 &amp;amp; 1 \\
\hline
\end{array}$$&lt;/p&gt;
&lt;p&gt;It's easy to see that no square is ending in 3 (or 2, 7 or 8 for that matter). What are the implications of this? Try the following sum:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How many solutions of $x$ exist such that $$\sum_{i=1}^x i! = n^2, \space n \in N$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In simpler terms, what summations of the factorial give us a perfect square? We can work out the first few by hand
$$\begin{gather}
x = 1 \implies S_1 = 1! = 1\\
x = 2 \implies S_2 = S_1 + 2! = 3 \\
x = 3 \implies S_3 = S_2 + 3! = 9 \\
x = 4 \implies S_4 = S_3 + 4! = 33
\end{gather}$$&lt;/p&gt;
&lt;p&gt;For $5!$ and above, the last number is always 0. When we use the above recurrence relation for $x \ge 5$, the last digit will always be 3, and since no square ends in 3, there are only two values of $x$ for which the given equation holds, which are $1$ and $3$.  $\blacksquare$&lt;/p&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category></entry><entry><title>COVID 19 regression analysis</title><link href="https://aniruddhadeb.com/articles/2020/covid-regression-analysis.html" rel="alternate"></link><published>2020-05-06T21:30:00+05:30</published><updated>2020-05-06T21:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-05-06:/articles/2020/covid-regression-analysis.html</id><summary type="html">&lt;p&gt;&lt;img alt="regression" src="https://aniruddhadeb.com/articles/2020/res/covid-regression-analysis.png"&gt;
This is a regression analysis attempt for the COVID-19 spread data. The graphs represent total cases per day. The Orange graph is USA, the smaller graph on the left is China and the graph on the right is India. A Standard gaussian curve of the form $Ae^{-b(x-c)^2 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="regression" src="https://aniruddhadeb.com/articles/2020/res/covid-regression-analysis.png"&gt;
This is a regression analysis attempt for the COVID-19 spread data. The graphs represent total cases per day. The Orange graph is USA, the smaller graph on the left is China and the graph on the right is India. A Standard gaussian curve of the form $Ae^{-b(x-c)^2}$ is fitted on the data manually (They don't fit the USA data very well though)&lt;/p&gt;
&lt;p&gt;The y-axis scale is 5000 cases/large division and 1000 cases/small division. Currently, 50 represents today's date for India i.e. May 6. Looking at a predicted worst case curve, we see it peaking somewhere around May 20 ($\pm$ 5 days). It should go down post that point. The total number of cases is the integral under the curve. For a gaussian distribution, it comes out to be $a\sqrt{\frac \pi b}$. Taking half of this (before the peak), we end up with $\approx 130,000$ cases. India can expect to see this number $\pm$ 10% of cases by May end and a overall of $\approx 200,000 \pm 10%$ cases by June end, worst case. &lt;/p&gt;
&lt;p&gt;Let's hope I'm wrong here and we can flatten the curve sooner than expected.&lt;/p&gt;</content><category term="Mathematics"></category><category term="Mathematics"></category><category term="COVID 19"></category></entry><entry><title>Inorganic Heterocyclic compounds</title><link href="https://aniruddhadeb.com/articles/2020/inorganic-heterocycles.html" rel="alternate"></link><published>2020-05-03T10:40:00+05:30</published><updated>2020-05-03T10:40:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-05-03:/articles/2020/inorganic-heterocycles.html</id><summary type="html">&lt;p&gt;The 45th IChO preparatory problem list had this as it's fifth problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;5.1&lt;/strong&gt; The interaction of thionyl chloride and sodium azide at $-30^\circ \text{C}$ gives colorless crystals &lt;strong&gt;X&lt;/strong&gt;, containing 36.4 wt.% of Cl. The crystals consist of cyclic trimers. Find the composition of &lt;strong&gt;X&lt;/strong&gt; and give …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;The 45th IChO preparatory problem list had this as it's fifth problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;5.1&lt;/strong&gt; The interaction of thionyl chloride and sodium azide at $-30^\circ \text{C}$ gives colorless crystals &lt;strong&gt;X&lt;/strong&gt;, containing 36.4 wt.% of Cl. The crystals consist of cyclic trimers. Find the composition of &lt;strong&gt;X&lt;/strong&gt; and give the reaction equation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.2&lt;/strong&gt; Draw two stereoisomers of &lt;strong&gt;X&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.3&lt;/strong&gt; A colorless liquid &lt;strong&gt;Y&lt;/strong&gt; was prepared by a reaction between &lt;strong&gt;X&lt;/strong&gt; and antimony(III) fluoride. Addition of 1.00 g of &lt;strong&gt;Y&lt;/strong&gt; to the excess of barium acetate aqueous solution gave the precipitate with the mass of 3.96 g. Determine the chemical formula of &lt;strong&gt;Y&lt;/strong&gt;, draw its structure and write the reaction equation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.4&lt;/strong&gt; &lt;strong&gt;Y&lt;/strong&gt; enters the substitution reactions with typical nucleophiles such as methylamine. What product will be formed in the reaction between &lt;strong&gt;Y&lt;/strong&gt; and the excess of methylamine? Draw its structure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.5&lt;/strong&gt; Give two examples of molecules or ions which are isoelectronic to &lt;strong&gt;Y&lt;/strong&gt;, draw their structures.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.6&lt;/strong&gt; One of the substances isoelectronic to &lt;strong&gt;Y&lt;/strong&gt; transforms in the presence of water traces into polymer &lt;strong&gt;Z&lt;/strong&gt;. 1.00 g of &lt;strong&gt;Z&lt;/strong&gt; was dissolved in water and the resulting solution was added to the excess of barium acetate solution. The precipitate with the mass of 2.91 g was formed. Determine the formula of &lt;strong&gt;Z&lt;/strong&gt; and draw its structure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This looks like a very sketchy problem: we know for a fact that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;X is a cyclic trimer, with 34.5% w/w of $\ce{Cl}$. &lt;/li&gt;
&lt;li&gt;The use of Sodium Azide suggests that the trimer also contains $\ce{N}$&lt;/li&gt;
&lt;li&gt;The $\ce{Cl}$ atoms are substituted by $\ce{F}$ atoms in 5.3. The white precipitate in 5.3 is Barium Sulphate. Thus, the trimer of 5.1 has $\ce{Cl, O}$ and $\ce{S}$. 1 gram of Y thus gives $\pu{\frac{3.96}{233} mol }\ce{BaSO4}$. &lt;/li&gt;
&lt;li&gt;5.6 is very similar to 5.3. The polymer has sulphur and oxygen, in order to produce $\ce{BaSO4}$ as precipitate.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The reaction of 5.1 can be written as $\ce{SOCl2 + NaN3 -&amp;gt; (S_xO_yCl_zN_a)3 }$ based on whatever information we have till now. Let's try getting some values for x,y,z and a. If we let all of them be 1, then the compound becomes $\ce{(SO(Cl)N)3}$. We can check if this is the correct compound by checking the mass % of $\ce{Cl}$ here. The mass % comes out to be
$$\frac{35.5}{35.5+14+16+32} \times 100 \approx 36.4\%$$&lt;/p&gt;
&lt;p&gt;This perfectly matches what we are looking for. Thus, the formula of the compound is $\ce{(NSOCl)3}$. This compound has been synthesized and it's name is sulphanuric chloride (Hazell et al.)&lt;/p&gt;
&lt;p&gt;Drawing the structure is a bit trickier. A possible stable trimeric structure is&lt;/p&gt;
&lt;p&gt;&lt;img alt="Initial guess" src="https://aniruddhadeb.com/articles/2020/res/X_1.png"&gt;&lt;/p&gt;
&lt;p&gt;However, this is not the experimentally verified structure of sulphanuric chloride. Hazell et al. states that the structure (originally proposed by Kirsanov(1952)) has the $\ce{Cl}$ atoms attached to the $\ce{S}$ atom, with a formal charge of +1 on the $\ce{S}$ and -1 on the $\ce{N}$ atom. This structure has been proposed keeping in mind the physical properties of the compound.&lt;/p&gt;
&lt;p&gt;&lt;img alt="fig. showing (I) $\alpha$ and (II) $\beta$ forms" src="https://aniruddhadeb.com/articles/2020/res/X_2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Without knowing about these findings, drawing the correct structure is nigh impossible. This is what makes this a very hard question, as the first guess is to draw the structure that I have drawn above.&lt;/del&gt; See edit&lt;/p&gt;
&lt;p&gt;Once the structure is known, 5.2, 5.3 and 5.4 are very easy. 5.2 involves drawing the two stereoisomers, which consist of an all cis $\ce{Cl}$ isomer and a trans $\ce{Cl}$ isomer, both of which are shown below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="stereoisomers" src="https://aniruddhadeb.com/articles/2020/res/X_3.png"&gt;&lt;/p&gt;
&lt;p&gt;5.3 involves a simple halogen substitution reaction with Fluorine, giving us $\ce{(NSOF)3}$. This is isostructural with $\ce{(NSOCl)3}$. 5.4 involves a substitution reaction with methylamine, giving us $$\ce{(NSOF)3 + 3CH3NH2 -&amp;gt; (NSO(NHCH3))3 + 3HF}$$&lt;/p&gt;
&lt;p&gt;5.5 again requires a bit of mental hardwork. Y contains 120 electrons. An easy choice would be to replace the $\ce{F}$ atoms with $\ce{O-}$ atoms, giving us $\ce{(NSO2)3^3-}$. Drawing a second one is much trickier. Keeping in line with the problem, if we think of other inorganic heterocycles, $\ce{(SO3)3}$, the cyclic trimer of $\ce{SO3}$ comes to mind. Indeed, this is isoelectronic as it has 120 electrons. Once $\ce{(SO3)3}$ is obtained, 5.6 becomes easy as $\ce{(SO3)3}$ polymerizes in aqueous solution to give polymeric $\ce{(SO3)_n}$.&lt;/p&gt;
&lt;p&gt;A very good problem, well above the regular inorganic standard. Breaking through the first step is the hardest, followed by obtaining the correct structure for the trimer and it's isoelectronic counterparts. The rest is quite easy.&lt;/p&gt;
&lt;h3&gt;EDIT:&lt;/h3&gt;
&lt;p&gt;There is a better, mechanism-based way of solving this question, as pointed out by &lt;a href="https://chemistry.stackexchange.com/users/54655/yusuf-hasan"&gt;Yusuf Hasan&lt;/a&gt; over at Chemistry StackExchange. Thionyl Chloride reacts with organic molecules via this reaction pathway:&lt;/p&gt;
&lt;p&gt;&lt;img alt="SNi pathway" src="https://aniruddhadeb.com/articles/2020/res/SNi.png"&gt;&lt;/p&gt;
&lt;p&gt;To solve this problem, we need to formulate a similar reaction pathway, but with the Azide anion as the substrate instead of pentan-2-ol. Here's the proposed pathway:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Monomer formation" src="https://aniruddhadeb.com/articles/2020/res/monomer.png"&gt;&lt;/p&gt;
&lt;p&gt;Trimerization occurs through a pericyclic mechanism similar to the trimerization of $\ce{SO3}$. Note that the $\ce{Cl-}$ atoms shift from $\ce{N}$ to $\ce{S}$ in a concerted manner, similar to the mechanism proposed by &lt;a href="https://www.researchgate.net/publication/11505683_Theoretical_Study_on_Chlorine_and_Hydrogen_Shift_in_Cycloheptatriene_and_Cyclopentadiene_Derivatives"&gt;Okajima and Imafuku&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Trimer formation" src="https://aniruddhadeb.com/articles/2020/res/trimer.png"&gt;&lt;/p&gt;
&lt;p&gt;This is a more concrete way to get to the answer and one that does not involve guesswork or hit and trial.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;sup&gt;P.S: Adding MHChem required an update to MathJax 3.x, which brings with it improved rendering (and stricter use of align and gather environments). The MathJax rendering bugs on mobile should be gone now.&lt;/sup&gt;&lt;/p&gt;</content><category term="Chemistry"></category></entry><entry><title>Roots of $f(f(..f(x)..))$, where $ f(x) = ax^2 + bx + c $, are symmetric about $ \frac{-b}{2a} $</title><link href="https://aniruddhadeb.com/articles/2020/roots-of-fffx.html" rel="alternate"></link><published>2020-04-30T20:30:00+05:30</published><updated>2020-04-30T20:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-04-30:/articles/2020/roots-of-fffx.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Define $ f(x) = ax^2 + bx + c , a,b,c \in \mathbb{R}$ and $ f^n(x) = f(f^{n-1}(x)), n&amp;gt;1 $. Prove that the real roots of $ f^n(x) $ are symmetric about the vertical line passing through vertex i.e. $ x = \frac{-b}{2a} $&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This seems like …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Define $ f(x) = ax^2 + bx + c , a,b,c \in \mathbb{R}$ and $ f^n(x) = f(f^{n-1}(x)), n&amp;gt;1 $. Prove that the real roots of $ f^n(x) $ are symmetric about the vertical line passing through vertex i.e. $ x = \frac{-b}{2a} $&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This seems like a complicated problem. Let's start by first making intuitional sense of this problem. We can say that $ f^n(x) $ will be a polynomial of the order $ 2^n $ and will have as many roots. Also, all roots of a quadratic of the form $ ax^2 + bx + c , a,b \in \mathbb{R} $ can be expressed as $ \frac{-b}{2a} \pm k$, where $k$ is some constant, which can be real or complex. To find all the real roots of $ f^n(x) $, we have to solve the set of equations $ f^{n-1}(x) = \alpha_i \backepsilon \alpha_i $ is a root of $ f^{n-1}(x) $.&lt;/p&gt;
&lt;p&gt;This problem can be recursively broken down until we arrive at finding the roots of $ f^2(x) $, which are the roots of $ f(x) = \alpha_1 = \frac{-b}{2a} + k $ and $ f(x) = \alpha_2 = \frac{-b}{2a} - k $. Since these two quadratics also assume the form in the paragraph discussed above, their roots can be written as $ \frac{-b}{2a} \pm u $ and $ \frac{-b}{2a} \pm v $. Note that if the equation has complex roots, then the values of u and v would be imaginary. This does not matter, as any further equations solved upon them will continue to have their roots expressed as $ \frac{-b}{2a} \pm k $. Moving to solve $ f^3(x) $ requires us to solve the equations $f(x) = \frac{-b}{2a} \pm u $ and $f(x) = \frac{-b}{2a} \pm v $. If we continue to do this, we can notice that all the $ 2^n $ roots of $ ax^2 + bx + c $ can be expressed in the same form $ \frac{-b}{2a} \pm v $, as the value of the first two coefficients of the quadratic(s) to be solved remains the same. Thus, all the real roots are symmetric about the said vertical line and all imaginary roots have their real part equal to $ \frac{-b}{2a} $. $ \blacksquare $&lt;/p&gt;
&lt;p&gt;A graphical proof for this is as follows: consider any arbitary quadratic with two real roots (this can also be proven with a quadratic with no real roots, but that requires mapping the complex plane on the z-axis, which I don't want to do).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Quadratic f(x)" src="https://aniruddhadeb.com/articles/2020/res/roots_1.png"&gt;&lt;/p&gt;
&lt;p&gt;Here the roots are A and B. Reflecting them onto the Y-axis and drawing two parallel lines through them gives us the following graph:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Quadratic with roots on y-axis" src="https://aniruddhadeb.com/articles/2020/res/roots_2.png"&gt;&lt;/p&gt;
&lt;p&gt;The two lines represent the roots and the points of intersection of the parabola with the line (That's C,D,E and F) represent the roots of the equation $f^2(x)$. This can be verified by plotting $ f(f(x)) $ in the same graph&lt;/p&gt;
&lt;p&gt;&lt;img alt="Quadratic f(f(x))" src="https://aniruddhadeb.com/articles/2020/res/roots_3.png"&gt;&lt;/p&gt;
&lt;p&gt;This provides a more intuitive approach to the above proof. As is clearly visible, $ f^2(x) $ has all it's roots symmetrical. This procedure can be repeated $n$ times, giving us the requisite proof.&lt;/p&gt;
&lt;p&gt;Both of my proofs are not very mathematically rigorous. A rigorous proof would involve induction using the principles I showed here. That exercise is left to the readers (mainly because my induction &amp;amp; formal proof-writing skills are horrible :P). &lt;/p&gt;
&lt;p&gt;An application of this problem can be found in the &lt;a href="https://jason-shi-f9dm.squarespace.com/s/2019Algebra_A.pdf"&gt;PUMAC 2019 Algebra A paper, Q3&lt;/a&gt;. This is a rather nice problem, which involves the sum of the roots of $ f^n(x) $. Since all the roots are symmetric, you would end up with $ 2^n $ times the abscissa of the vertex of said quadratic.&lt;/p&gt;</content><category term="Mathematics"></category></entry><entry><title>An integral involving ζ(2) (And Euler's first proof for the Basel Problem)</title><link href="https://aniruddhadeb.com/articles/2020/zeta-2-integral.html" rel="alternate"></link><published>2020-04-29T22:30:00+05:30</published><updated>2020-04-29T22:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-04-29:/articles/2020/zeta-2-integral.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Evaluate the integral $$\int_0^1 \frac{\log(x)}{x-1}dx$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are a few methods of doing this: the first one uses the taylor series expansion of \( \log(1-x) \):
$$I = -\int_0^1 \frac{\log(1-x)}{x}dx$$ 
$$I = \int_0^1 \frac 1x \left( x + \frac{x^2}{2} + \frac{x …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Evaluate the integral $$\int_0^1 \frac{\log(x)}{x-1}dx$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are a few methods of doing this: the first one uses the taylor series expansion of \( \log(1-x) \):
$$I = -\int_0^1 \frac{\log(1-x)}{x}dx$$ 
$$I = \int_0^1 \frac 1x \left( x + \frac{x^2}{2} + \frac{x^3}{3} + ... \right) $$&lt;/p&gt;
&lt;p&gt;This expression nicely integrates to give
$$I = 1 + \frac{1}{2^2} + \frac{1}{3^2} + ... = \boxed{\frac{\pi^2}{6}}$$&lt;/p&gt;
&lt;p&gt;The last step here involves the summation \( \zeta(2) = \sum_{k=1}^{\infty} \frac 1 {k^2} = \frac{\pi^2}{6}\). This summation is known as the &lt;a href="https://en.wikipedia.org/wiki/Basel_problem"&gt;Basel Problem&lt;/a&gt; (more on this later). For now, we'll use this as a fact and move forward.&lt;/p&gt;
&lt;p&gt;Another solution that does not involve the taylor series requires some substitutions and limit evaluation.&lt;/p&gt;
&lt;p&gt;$$\begin{gather}
I = \int_0^1\frac{\log x}{x-1} dx= -\int_0^1\log x(1+x+x^2+...)dx \\
= -\int_0^1 \log x \sum_{r=0}^\infty x^r dx \\
= -\sum_{r=0}^\infty\int_0^1x^r \log x dx 
\end{gather}$$&lt;/p&gt;
&lt;p&gt;let \(\log x = t \implies dx = e^t dt\):
$$\begin{gather}I = -\sum_{r=0}^\infty \int_{-\infty}^0te^{(r+1)t}dt \\
=-\sum_{r=0}^\infty \left[\frac{te^{(r+1)t}}{(r+1)} - \frac{e^{(r+1)t}}{(r+1)^2}\right]_{-\infty}^0\\
= \sum_{r=0}^\infty \left[\frac{1}{(r+1)^2} + \lim_{t \to -\infty} \frac{(t(r+1)-1)e^{(r+1)t}}{(r+1)^2} \right]\\
= \sum_{r=0}^\infty \left[\frac{1}{(r+1)^2} - \lim_{t \to \infty} \frac{(t(r+1)+1)}{e^{(r+1)t}(r+1)^2} \right] \\
= \sum_{r=0}^\infty \left[\frac{1}{(r+1)^2} - \lim_{t \to \infty} \frac{r+1}{e^{(r+1)t}(r+1)^3} \right] \\
= \sum_{r=0}^\infty \frac{1}{(r+1)^2}\\
= \sum_{k=1}^\infty \frac{1}{k^2}\\
\boxed{I = \frac{\pi^2}{6}}
\end{gather}$$&lt;/p&gt;
&lt;p&gt;This solution also involves the same summation. There is, however, a solution that does not involve the summation: The general form of this integral is known as &lt;a href="https://en.wikipedia.org/wiki/Spence%27s_function"&gt;Spence's Function&lt;/a&gt; or Dilogarithm. It's a transcendental function which has the values \( Li_2(0) = 1 \) and \( Li_2(1) = \zeta(2) = \frac{\pi^2}{6} \). If you know these values beforehand, you can cut out the lengthy calculation.&lt;/p&gt;
&lt;p&gt;Back to the Basel Problem, and a bit of a primer first. The &lt;a href="https://en.wikipedia.org/wiki/Riemann_zeta_function"&gt;Riemann-Zeta&lt;/a&gt; function is a mathematical function that is defined as \( \zeta(s) = \sum_{n=1}^\infty \frac{1}{n^s} \). Thus, a convenient way of referring to the sum \( \sum_{k=1}^{\infty} \frac{1}{k^2} \) would be \( \zeta(2) \), which I will use hereon. The quest for the value of \( \zeta(2) \) far predates the Riemann-zeta function (and Bernhard Riemann himself for that matter). This problem was first posed by Pietro Mengoli, an Italian mathematician who had proved that the harmonic series \( \left( \sum_{n=1}^{\infty} \frac 1n \right) \) diverges and also found the value of the sum \( \sum_{r=1}^\infty (-1)^{r-1} \frac 1r \) to be \( \log(2) \). The problem is called the Basel problem as Basel in Switzerland is the hometown of Euler, who solved the problem and the Bernoulli family, who unsuccessfully attacked the problem.&lt;/p&gt;
&lt;p&gt;The story goes that the first proof Euler gave was not accepted as it involved an unproven factorization of \( \sin(x) \). Euler being Euler, gave a second proof and a third proof as well, which were accepted. The initial proof is as follows: From the taylor series expansion of \( \sin(x) \), we have
$$\sin(x) = x + \frac{x^3}{3!} + \frac{x^5}{5!} + ... $$&lt;/p&gt;
&lt;p&gt;\( \sin(x) \) can also be written as a function of it's roots, according to the &lt;a href="https://en.wikipedia.org/wiki/Weierstrass_factorization_theorem"&gt;Weierstrass Factorization Theorem&lt;/a&gt;. Note that this theorem was published a 100 years after Euler's proof, which is why Euler's proof was initially not accepted. Euler factorized \( \sin(x) \) as follows:
$$\sin(x) = x(1 - \frac x\pi)(1 + \frac x\pi)(1 - \frac{x}{2\pi})(1+\frac{x}{2\pi})...$$ $$\sin(x) = x(1-\frac{x^2}{\pi^2})(1-\frac{x^2}{4\pi^2})... \tag{1}$$&lt;/p&gt;
&lt;p&gt;Why did Euler choose to factorize \( \sin(x) \) as such? He could also have chosen the function \(x(x-\pi)(x+\pi)(x-2\pi)(x+2\pi)...\). A simple trick I used to explain this is that the function chosen by Euler is bounded and also converges to a common limit. Dividing both sides by \( x \) and evaluating the limit \(lim_{x \to 0} \frac{\sin(x)}{x}\) in equation \( (1) \), we see that both sides converge to 1.&lt;/p&gt;
&lt;p&gt;Back to the proof, since we have two equivalent representations of \( \sin(x) \), all we have to do is compare the coefficients of \( x^3 \) in both of them to find the value of \( \zeta(2) \)
$$\frac{1}{3!} = \frac{1}{\pi^2} \sum_{k=1}^{\infty} \frac{1}{k^2}$$
$$\boxed{\sum_{k=1}^{\infty} \frac{1}{k^2} = \frac{\pi^2}{6}}$$&lt;/p&gt;
&lt;p&gt;This completes the proof. A really beautiful and simple proof, this was the one of the two proofs (Along with &lt;a href="https://en.wikipedia.org/wiki/Basel_problem#Cauchy's_proof"&gt;Cauchy's proof&lt;/a&gt;) that I was able to understand. For more proofs involving higher order mathematics, you can check out the links &lt;a href="http://math.cmu.edu/~bwsulliv/basel-problem.pdf"&gt;here&lt;/a&gt; and &lt;a href="https://math.stackexchange.com/questions/8337/different-methods-to-compute-sum-limits-k-1-infty-frac1k2-basel-pro"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="Mathematics"></category></entry><entry><title>An Interesting Electronics Problem</title><link href="https://aniruddhadeb.com/articles/2020/interesting-electronics-problem.html" rel="alternate"></link><published>2020-04-29T22:20:00+05:30</published><updated>2020-04-29T22:20:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-04-29:/articles/2020/interesting-electronics-problem.html</id><summary type="html">&lt;p&gt;An interesting electronics problem I encountered recently was this: Find the resistance between points A and B in the following resistor network&lt;/p&gt;
&lt;p&gt;&lt;img alt="resistor network" src="https://aniruddhadeb.com/articles/2020/res/iep_1.png"&gt;&lt;/p&gt;
&lt;p&gt;This looks like a simple wheatstone bridge problem, but note that the top right and bottom left resistances are R and not r. To solve this problem, we'll …&lt;/p&gt;</summary><content type="html">&lt;p&gt;An interesting electronics problem I encountered recently was this: Find the resistance between points A and B in the following resistor network&lt;/p&gt;
&lt;p&gt;&lt;img alt="resistor network" src="https://aniruddhadeb.com/articles/2020/res/iep_1.png"&gt;&lt;/p&gt;
&lt;p&gt;This looks like a simple wheatstone bridge problem, but note that the top right and bottom left resistances are R and not r. To solve this problem, we'll use the concept of symmetry and a few tricks. Let's start by connecting a battery to the circuit and labeling the currents and loops&lt;/p&gt;
&lt;p&gt;&lt;img alt="tweaked resistor network" src="https://aniruddhadeb.com/articles/2020/res/iep_2.png"&gt;&lt;/p&gt;
&lt;p&gt;We notice that there is no mixing of currents in node B. This allows us to disconnect the node and separate it into two components, both of which are relatively easy to solve.&lt;/p&gt;
&lt;p&gt;&lt;img alt="currents" src="https://aniruddhadeb.com/articles/2020/res/iep_3.png"&gt;&lt;/p&gt;
&lt;p&gt;The net resistance is now $$\frac 1 {R_{n}} = \frac 1r + \frac 1 {R_p} \tag{1}$$, where \( R_p \) is the resistance of the disconnected network. This resistance can be easily found by using KVL and KCL after connecting a battery to the network.&lt;/p&gt;
&lt;p&gt;&lt;img alt="loops" src="https://aniruddhadeb.com/articles/2020/res/iep_4.png"&gt;&lt;/p&gt;
&lt;p&gt;Solving the loops gives us the equations
$$\begin{align} &amp;amp; V = Ri_3 + ri_1 \tag{2} \\ &amp;amp; 2ri_1 - ri_3 = Ri_3 \tag{3} \end{align}$$
Solving these gives us $$V = \frac{3Rr + r^2}{R+r}i_1$$
The net current through the cell is \( i = i_1 + i_3 = \frac{R+3r}{R+r}i_1 \). Therefore, the net resistance \(R_p = \frac Vi = \frac{r(3R+r)}{3r+R} \)
We can now get \(R_n\) by substituting \( R_p \) in equation \( (1) \) 
$$\begin{gather}\frac 1 {R_n} = \frac 1r + \frac {3r+R}{r(3R+r)} \\ 
\boxed{R_n = \frac{r(3R+r)}{4(R+r)}}\end{gather}$$ &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;sup&gt;p.s: The &lt;code&gt;\eqref&lt;/code&gt; or &lt;code&gt;\ref&lt;/code&gt; commands don't work for some reason. I'll have to figure out why.&lt;/sup&gt;&lt;/p&gt;</content><category term="Electronics"></category></entry><entry><title>MathJax Test</title><link href="https://aniruddhadeb.com/articles/2020/mathjax-test.html" rel="alternate"></link><published>2020-04-29T10:20:00+05:30</published><updated>2020-04-29T10:20:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2020-04-29:/articles/2020/mathjax-test.html</id><summary type="html">&lt;p&gt;This is a test to see if MathJax works on blogger.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For \(\alpha, \beta \gt -1\), find the value of \(\lim_{n \to \infty} n^{\beta - \alpha} \frac{1^\alpha + 2^\alpha + 3^\alpha + ... + n^\alpha}{1^\beta + 2^\beta + 3^\beta + ... + n^\beta}\)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we have&lt;/p&gt;
&lt;p&gt;$$L = \lim_{n …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a test to see if MathJax works on blogger.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For \(\alpha, \beta \gt -1\), find the value of \(\lim_{n \to \infty} n^{\beta - \alpha} \frac{1^\alpha + 2^\alpha + 3^\alpha + ... + n^\alpha}{1^\beta + 2^\beta + 3^\beta + ... + n^\beta}\)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we have&lt;/p&gt;
&lt;p&gt;$$L = \lim_{n \to \infty} \frac{n^\beta}{n^\alpha} \times \frac{\sum_{r=0}^n r^\alpha}{\sum_{r=0}^n r^\beta}\
= \lim_{n \to \infty} \frac{\sum_{r=0}^n (\frac rn)^\alpha}{\sum_{r=0}^n (\frac rn)^\beta}$$&lt;/p&gt;
&lt;p&gt;The summations can now be evaluated as Riemann sums by multiplying numerator and denominator by (\frac 1n)&lt;/p&gt;
&lt;p&gt;$$L = \frac{\int_0^1 x^\alpha dx}{\int_0^1 x^\beta dx}\
L = \frac{\beta+1}{\alpha +1}$$&lt;/p&gt;
&lt;p&gt;Indeed it does! Looking forward to writing more mathematical posts.&lt;/p&gt;</content><category term="Posts"></category></entry><entry><title>Electronic Clock II - Generating the Clock Signal pt. 2</title><link href="https://aniruddhadeb.com/articles/2018/electronic-clock-2-ii.html" rel="alternate"></link><published>2018-06-16T10:30:00+05:30</published><updated>2018-06-16T10:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2018-06-16:/articles/2018/electronic-clock-2-ii.html</id><summary type="html">&lt;p&gt;In the previous post, we saw how to make a 2Hz clock signal. However, for the seconds counter, we will need a 1Hz clock signal. In order to achieve this, I will clock down the frequency using a JK Flip Flop:&lt;/p&gt;
&lt;h3&gt;Flip-Flop: Concept&lt;/h3&gt;
&lt;p&gt;A Flip flop is a one-bit storage …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the previous post, we saw how to make a 2Hz clock signal. However, for the seconds counter, we will need a 1Hz clock signal. In order to achieve this, I will clock down the frequency using a JK Flip Flop:&lt;/p&gt;
&lt;h3&gt;Flip-Flop: Concept&lt;/h3&gt;
&lt;p&gt;A Flip flop is a one-bit storage device which looks somewhat like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="flip flop" src="https://aniruddhadeb.com/articles/2018/res/flip_flop.png"&gt;&lt;/p&gt;
&lt;p&gt;The truth table of this device looks somewhat like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="truth table" src="https://aniruddhadeb.com/articles/2018/res/jk-flip-flop-truth-table.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Note that the flip flop toggles only on the rising edge of the clock. Therefore, in order to clock down the frequency by 2, we need to set the J and K bits high and feed the clock signal in to the CLK pin, thereby obtaining a 1Hz signal on the Q pin. &lt;/p&gt;
&lt;h3&gt;Adding the flip-flop to our circuit:&lt;/h3&gt;
&lt;p&gt;On adding the flip flop to our circuit, the schematic looks somewhat like this (The 4060 has been carried over from the previous post):&lt;/p&gt;
&lt;p&gt;&lt;img alt="1hz schematic" src="https://aniruddhadeb.com/articles/2018/res/1hz_schematic.png"&gt;&lt;/p&gt;
&lt;p&gt;As calculated, this gives us a frequency of 1 Hz on the Q pin&lt;/p&gt;
&lt;p&gt;&lt;img alt="oscilloscope output" src="https://aniruddhadeb.com/articles/2018/res/pic.png"&gt;&lt;/p&gt;
&lt;p&gt;This concludes our clock signal source. In the next post, we will have a look at counting seconds with the clock signal. &lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;</content><category term="Electronics"></category></entry><entry><title>Electronic Clock II - Generating the Clock Signal pt.1</title><link href="https://aniruddhadeb.com/articles/2018/electronic-clock-2-i.html" rel="alternate"></link><published>2018-06-14T22:30:00+05:30</published><updated>2018-06-14T22:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2018-06-14:/articles/2018/electronic-clock-2-i.html</id><summary type="html">&lt;p&gt;In the previous installment of this series, I spoke about the requirements and the architecture of the clock. In this installment, I'm going to engineer the clock signal generator, the most crucial part of our clock&lt;/p&gt;
&lt;h3&gt;Importance of the Signal in a clock&lt;/h3&gt;
&lt;p&gt;Every clock is only as accurate as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the previous installment of this series, I spoke about the requirements and the architecture of the clock. In this installment, I'm going to engineer the clock signal generator, the most crucial part of our clock&lt;/p&gt;
&lt;h3&gt;Importance of the Signal in a clock&lt;/h3&gt;
&lt;p&gt;Every clock is only as accurate as it's signal. An &lt;a href="https://en.wikipedia.org/wiki/Atomic_clock"&gt;atomic clock&lt;/a&gt; uses radiations emitted by cesium-133 as it's signal, a &lt;a href="https://en.wikipedia.org/wiki/Quartz_clock"&gt;quartz clock&lt;/a&gt; uses a 32768 Hz quartz crystal as it's signal whereas a mechanical clock uses an &lt;a href="https://en.wikipedia.org/wiki/Escapement"&gt;Escapement&lt;/a&gt; powered by a hairspring (in wristwatches) or by a pendulum (in clocks). The signal has a cascading effect on the accuracy of a clock - even a 0.1% divergence in the period of the second hand causes a clock to lose or gain 86.4 seconds a day, or in larger terms, lose or gain almost half a day in a year!&lt;/p&gt;
&lt;h3&gt;Make an accurate electronic signal&lt;/h3&gt;
&lt;p&gt;Our clock (like most other clocks) is going to use a quartz crystal as it's main signal. An &lt;a href="https://en.wikipedia.org/wiki/RC_oscillator"&gt;RC&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/LC_circuit"&gt;LC&lt;/a&gt; oscillator cannot be an accurate signal as the frequency will change with changes in temperature. Also, tuning an RC/LC oscillator to an exact frequency requires a ton of precision - the frequency has to be within a standard deviation of ±0.01%&lt;/p&gt;
&lt;p&gt;The signal generated by this crystal has a frequency of 32768 Hz, which isn't very useful to us. In order to use it to drive the seconds counter, we must scale it down to 1 Hz (1 pulse per second). In order to do this, I will use a HEF4060, which is a 14 bit binary ripple counter.&lt;/p&gt;
&lt;p&gt;The HEF4060 has the capacity to give us a minimum frequency of 32768/214 = 2 Hz. This will later be scaled down using a flip-flop to give us a frequency of 1 Hz. The circuit for this looks like the following:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Clock circuit" src="https://aniruddhadeb.com/articles/2018/res/clock_signal_schematic.png"&gt;&lt;/p&gt;
&lt;p&gt;After testing the above circuit on a breadboard, pin 7 (Q4) gave the following results on an oscilloscope:&lt;/p&gt;
&lt;p&gt;&lt;img alt="oscilloscope" src="https://aniruddhadeb.com/articles/2018/res/pic_44_3.bmp"&gt;&lt;/p&gt;
&lt;p&gt;These results were expected as 32768/16 gives us 2048, which is approximately 2.049 kHz. the extra 1 Hz is probably a result of breadboard capacitance, which should go away once the circuit is soldered on a PCB. &lt;/p&gt;
&lt;p&gt;In the next installment, I will use a flip flop to halve the 2Hz signal to give us a resultant signal of 1Hz, which can be used to drive the seconds counter.&lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;</content><category term="Electronics"></category></entry><entry><title>Electronic Clock I - Getting Started</title><link href="https://aniruddhadeb.com/articles/2018/electronic-clock-1.html" rel="alternate"></link><published>2018-06-14T10:30:00+05:30</published><updated>2018-06-14T10:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2018-06-14:/articles/2018/electronic-clock-1.html</id><summary type="html">&lt;p&gt;This is a new series in which I will describe all the steps I went through while creating an electronic clock. Make sure you're subscribed to the RSS feed so that you don't miss out on anything!&lt;/p&gt;
&lt;h3&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;An electronic clock is a good project for intermediate to advanced …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a new series in which I will describe all the steps I went through while creating an electronic clock. Make sure you're subscribed to the RSS feed so that you don't miss out on anything!&lt;/p&gt;
&lt;h3&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;An electronic clock is a good project for intermediate to advanced electronic hobbyists, which is why I decided to build one.&lt;/p&gt;
&lt;p&gt;The first task is enumerating the requirements of the clock. A humble requirement list looks like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clock should run on a few AA cells&lt;/li&gt;
&lt;li&gt;It should have a 24 hour display&lt;/li&gt;
&lt;li&gt;It should display seconds, minutes and hours&lt;/li&gt;
&lt;li&gt;It should have two LED's each to separate the hours, minutes and seconds&lt;/li&gt;
&lt;li&gt;It should be moderately compact&lt;/li&gt;
&lt;li&gt;It should be challenging to engineer and design&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second task is deciding what components will form the base of the clock (akin to choosing a language or a technology stack for developing an application). For a clock, a few options are available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a microcontroller:&lt;/li&gt;
&lt;li&gt;Interface a DS1307 clock module with the microcontroller using SPI, or&lt;/li&gt;
&lt;li&gt;Write your own code for a real-time clock in the microcontroller and use an external clock crystal (already done this here)&lt;/li&gt;
&lt;li&gt;Use CMOS/TTL Logic IC's&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I decided to go with the second option as I had already written code for a microcontroller clock and gone halfway through the implementation when I realized that it was too easy and did not provide a challenge. If you are a beginner, you should take the microcontroller route, as in case of bugs, they are easily rectifiable via your code, whereas debugging a hardware circuit (especially a large CMOS/TTL one) is decently hard for beginners.&lt;/p&gt;
&lt;p&gt;Within a few minutes, I drew a basic block diagram for the main components in the circuit.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://aniruddhadeb.com/articles/2018/res/disp.png"&gt;&lt;/p&gt;
&lt;p&gt;The circuit mainly consists of a 1Hz signal generator, a few counters/dividers and the display logic. &lt;/p&gt;
&lt;p&gt;In the next segment, I'm going to build the signal generator and produce an accurate 2Hz signal that can be used by the other counters.&lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;</content><category term="Electronics"></category></entry><entry><title>Cleared OCAJP with 94% - My Experience</title><link href="https://aniruddhadeb.com/articles/2018/ocajp.html" rel="alternate"></link><published>2018-06-06T22:05:00+05:30</published><updated>2018-06-06T22:05:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2018-06-06:/articles/2018/ocajp.html</id><summary type="html">&lt;p&gt;How I prepared and cleared the OCA examination in my summer holidays&lt;/p&gt;</summary><content type="html">&lt;p&gt;This was originally posted on &lt;a href="https://coderanch.com/t/695020/certification/Cleared-OCAJP-Experience"&gt;CodeRanch&lt;/a&gt;:&lt;/p&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;I'm a 15 year old student who has just cleared his secondary education. I have a knack for computers and am currently building my online profile (&lt;a href="https://github.com/Aniruddha-Deb"&gt;github&lt;/a&gt;, &lt;a href="aniruddha-deb.github.io"&gt;blog&lt;/a&gt;, etc.) I already had ~2 years of experience in java and had been eyeing the Oracle certification for quite some time. Eventually, in the summer vacations, I decided to go all in, bought a few books and sat down and studied for the exam. &lt;/p&gt;
&lt;h3&gt;Process&lt;/h3&gt;
&lt;p&gt;The books that I used for the certification were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OCA Java SE 8 Programmer I - Mala Gupta&lt;/li&gt;
&lt;li&gt;OCA/OCP Java 8 practice tests - Selikoff and Boyarsky&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I spent around 3 weeks studying for the exam with an average time of ~1.5 hours per day. I would go through the chapters and topics in Mala Gupta and do the respective questions for those topics from the practice tests book. I also wrote a lot of practice programs to wrap my head around some new concepts (Java 8 Date/Time API for instance). Most of the content was easy as I had already studied it in school and had prior programming experience. Personally for me, the hard parts were the new Java 8 features and interfaces in Java 8 (this may vary from person to person). My advice would be to spend extra time on the harder parts and comparatively less time on the easier parts (looping and decisions was easy - I went through those in a day each). &lt;/p&gt;
&lt;p&gt;Most of my practice programs were written in Eclipse (even though most books ask you to NOT do this). I found eclipse's autocompilation features handy for spotting errors. I then got a chance to tweak the code to see if the error reappears in real time, something that iterative compilation will never be able to do. That did help me learn faster. (again, my methods may not necessarily resonate with someone else's) &lt;/p&gt;
&lt;h3&gt;Before giving the exam&lt;/h3&gt;
&lt;p&gt;Once I had finished the syllabus, I went through the two practice tests that I had - one from Mala Gupta and one from Selikoff and Boyarsky. I scored 85-86% on both tests. I also gave the free enthuware test containing 25 questions and scored 80% in that. I did not pay for the full enthuware mock test set as I felt pretty comfortable with my performance. &lt;/p&gt;
&lt;h3&gt;Giving the exam&lt;/h3&gt;
&lt;p&gt;There was a pearson VUE Centre right next to where I live (less than a kilometre away), which simplified travel quite a bit. Time management is not a problem in this exam. I repeat that - time management is NOT a problem. I finished all the questions in around one hour and 15 minutes and spent the rest of the time checking the answers. You will not be hard pressed for time in this exam, so take your time and think through every question calmly and carefully. Do not submit before time. &lt;/p&gt;
&lt;h3&gt;After the exam&lt;/h3&gt;
&lt;p&gt;Amazingly, I did not get my results in 30 minutes. It took close to one and a half hours for my results to come, and around one and a half days for my certificate to be generated. This is something oracle can definetly work on. &lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;If you're a young guy (like me) reading this, my advice would be to give this exam only if you are confident of your capabilities in Java and are passionate about a future in computers. You will also spend a significant amount of your vacation time in studying for this exam. in addition to being slightly tricky, this exam is also expensive and will have to be funded by your parents. Also, there are no short term benefits to clearing this exam: the benefits will only show 10 years later when you turn up for a job interview and proudly proclaim you cleared the OCA at the age of 15. If you're okay with the above, then best of luck for the exam! &lt;/p&gt;
&lt;p&gt;p.s: all the code that I wrote for the exam is available &lt;a href="https://github.com/Aniruddha-Deb/OCAPrep"&gt;here&lt;/a&gt;. May come in handy to other aspirants. &lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;</content><category term="Programming"></category></entry><entry><title>ICSE Mathematics - Last 23 years analysis and 2018 forecast</title><link href="https://aniruddhadeb.com/articles/2018/icse-mathematics-analysis.html" rel="alternate"></link><published>2018-01-09T10:30:00+05:30</published><updated>2018-01-09T10:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2018-01-09:/articles/2018/icse-mathematics-analysis.html</id><summary type="html">&lt;p&gt;A speculative format for the 2018 ICSE Mathematics paper, created by analysis of the mathematics question papers of the past 23 years. &lt;img alt="Analysis results" src="/articles/2018/res/icse_math_analysis.png"&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Analysis results" src="https://aniruddhadeb.com/articles/2018/res/icse_math_analysis.png"&gt;&lt;/p&gt;
&lt;p&gt;A speculative format for the 2018 ICSE Mathematics paper, created by analysis of the mathematics question papers of the past 23 years. The boards are fast approaching and hope this helps out those in need.&lt;/p&gt;
&lt;p&gt;Best of luck for the exams!&lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;
&lt;p&gt;EDIT: As of 16th June, 2018, I cleared the 2018 ICSE Mathematics paper with a perfect 100. The above statistical analysis truly paid off as most of the questions followed the same pattern :D&lt;/p&gt;</content><category term="Mathematics"></category></entry><entry><title>Python Crash Course</title><link href="https://aniruddhadeb.com/articles/2017/python-crash-course.html" rel="alternate"></link><published>2017-12-22T10:30:00+05:30</published><updated>2017-12-22T10:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2017-12-22:/articles/2017/python-crash-course.html</id><summary type="html">&lt;p&gt;My initial experience with learning Python and using it to create a GTD app&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I felt the need of creating a to-do app based on the getting things done principle (link here). I had been using MyLifeOrganized in a virtual machine on my mac, but it just wasn't cutting it. Things 3 and OmniFocus for Mac were too pricey and other web-based todo apps like Trello and Todoist didn't suit me very much. As a result, I decided to jump into some code and create a custom to-do mac app.&lt;/p&gt;
&lt;p&gt;My basic requirements were very humble: I need a task list in which I can create, read, update and delete tasks easily. I eventually decided to go with a unix-like command line application. Unix apps are usually made in C or Shell Script. My C is pathetic at the very least and I find shell script to be.. Queer. Java was too heavyweight a language to code a simple shell utility in, so I chose to go with Python.&lt;/p&gt;
&lt;p&gt;I had minimal experience with python in the past. I barely knew the basic language constructs and features. Luckily, python has a very shallow learning curve. About two hours with google and my python concepts were acceptable enough to start coding. Initially, python felt very much like shell script, just slightly more verbose. The lack of semicolons in python still irritates a Java programmer like me and the absence of braces makes the code feel very different compared to Java. After a few days of coding, these features started to grow on me. &lt;/p&gt;
&lt;p&gt;The first draft of GTD.py was a disaster. I used a text file to store all the application data and there was a ton of File I/O involved. Combine that with me using the google python fire library like an amateur and things quickly went downhill. Every time the code ran, it threw a horrendous looking python exception at my face (coming from java, python exceptions are much more beautiful compared to terrible.java.Stack.traces). Python looked like a terrible choice of language, as I could have a similar Java program up and running in about 10 minutes.&lt;/p&gt;
&lt;p&gt;Eventually, though, my comfort with the language grew. I ditched the text based approach and decided to use an SQLite database to store the information. I also discarded python fire and chose to use argparse. These two libraries gave me a decent challenge to build the app.&lt;/p&gt;
&lt;p&gt;The second draft came out much better than the first. The program is now usable (still needs a little refactoring). At the time of writing, I am still getting used to python programming conventions (reserved_chars as opposed to reservedChars) and the strange looking import statements. The language is still much less verbose as compared to Java and with enough practice, I may end up being more productive in Python. There's still a long way to go - I barely know the standard libraries and the functions. I also need to get to know the python runtime well enough before I start coding serious application critical components in python. The initial impression of python as a language for me was decently good. Would be interesting to see where I stand in about two to three months with the language.&lt;/p&gt;
&lt;p&gt;Check out the GTD.py code &lt;a href="https://github.com/Aniruddha-Deb/GTD.py"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Good luck to all those starting their python journey!&lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;</content><category term="Programming"></category></entry><entry><title>TCS IT Wiz - an Experience</title><link href="https://aniruddhadeb.com/articles/2017/tcsitwiz-experience.html" rel="alternate"></link><published>2017-12-14T10:30:00+05:30</published><updated>2017-12-14T10:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2017-12-14:/articles/2017/tcsitwiz-experience.html</id><summary type="html">&lt;p&gt;A Firsthand account of the TCS IT Wiz 2017 Journey&lt;/p&gt;</summary><content type="html">&lt;p&gt;Anyone who is in college or in high school and is interested in quizzing will know about the TCS IT Wiz (website: &lt;a href="www.tcsitwiz.com"&gt;www.tcsitwiz.com&lt;/a&gt;) - one of the most prestigious high school quizzes, sponsored by Tata Consultancy Services and hosted by Greycaps CEO Giri 'Pickbrain' Balasubramaniam.&lt;/p&gt;
&lt;p&gt;I got my first taste of this quiz when I was in eighth standard. I sheepishly went up to the head of department of computers and said that I was interested in participating in the TCS IT Wiz. After an announcement in class about the quiz, all the scholars in the class soon followed suit. Looking back, I barely knew anything about IT then. Around 30 of us were put in a bus and taken to the venue, where we managed to get a balcony seat. I couldn't answer more than 8 questions correctly. It was a complete disaster&lt;/p&gt;
&lt;p&gt;Fast forward a year, and I was ready to tackle the quiz head-on another time. However, a science exhibition was held on the same day as that of the quiz, and I chose (and won) the science exhibition. Fast forward another year, and I am now Pune champion. How time flies!&lt;/p&gt;
&lt;p&gt;This year, I was well aware of the quiz and did a moderate amount of preparation before the regionals. TCS uploads the regional finals of every city, so going through them and getting a feel of the questions and the rounds is essential. Preparation time also needs to be devoted to TCS itself - There is a round dedicated completely to it. Going over their website (thoroughly) and their wikipedia page should be adequate for the regionals.&lt;/p&gt;
&lt;p&gt;We were among the first to reach the venue and were seated pretty far ahead. This time, when Pickbrain came on stage in his usual kurta, I was well prepared. With a score of 12 in the prelims, I successfully managed to get on stage along with my teammate, Rasesh. Well acquainted with the format of the quiz, we played along well and managed to top the quiz with a score of 40. UWC Mahindra college were runners up, with a score of 35. &lt;/p&gt;
&lt;p&gt;Right after the quiz was over, the very next day, we drew up a schedule of preparation. Going over last year's regional finals was top priority, followed by researching about companies and new technology trends. Close observation of our competitors was also on the back of our minds as we continued researching.&lt;/p&gt;
&lt;p&gt;The quiz finals are held on 10th December every year, at Taj Lands End in Mumbai. This was the first time I was in a TCS National final, up against stiff competition from last time's winners. Due to hasty decisions, we were knocked out of the quiz during the semifinal stage, getting a +1 and then a -1, bringing our score to 0. Delhi and Ahmedabad got 4 or 5 and Kochi got 1. The finals were a close contested battle between Delhi and Ahmedabad up till the fifth round. In the fifth round, Delhi built up an unassailable 30 point lead and went on to win the quiz again, with a score of 80 to Ahmedabad's 40. &lt;/p&gt;
&lt;p&gt;Tata Consultancy Services are very generous with prizes. All national finalists got 35,000 rupees in Amazon gift vouchers, whereas the runner up got 1,00,000 and the winners received 1,50,000. Even though I lost, the experience in Mumbai will be unforgettable. Hope to come back next year and give Pranav from DPS Noida some stiff competition!&lt;/p&gt;
&lt;p&gt;Watch the 2017 national finals &lt;a href="https://www.youtube.com/watch?v=3VsvX1Ateys"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Best of luck for next year's quiz!&lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;</content><category term="Quizzing"></category></entry><entry><title>National Safety Science Quiz - an Experience</title><link href="https://aniruddhadeb.com/articles/2017/nssq-experience.html" rel="alternate"></link><published>2017-12-09T10:30:00+05:30</published><updated>2017-12-09T10:30:00+05:30</updated><author><name>Aniruddha Deb</name></author><id>tag:aniruddhadeb.com,2017-12-09:/articles/2017/nssq-experience.html</id><summary type="html">&lt;p&gt;A Firsthand account of NSSQ 2017&lt;/p&gt;</summary><content type="html">&lt;p&gt;'Safety science' is a novel term. Googling it up reveals a few obscure links. It doesn't even have a Wikipedia page of it's own! Safety science is a new term that refers to the science of keeping oneself safe from dangers at home, at work, on the streets and so on. This concept of safety science is spearheaded in India by Underwriters Laboratories (&lt;em&gt;whispers&lt;/em&gt; marketing) in association with NDTV (&lt;em&gt;whispers&lt;/em&gt; TRP.).&lt;/p&gt;
&lt;p&gt;I got the first taste of this quiz last year, when I was in ninth grade. It was the first 'web quiz' of sorts that I had given. I did not qualify from the school (top 2 qualify for regional finals) and ultimately stayed back. This year though, I somehow managed to top the school and got 24 out of 25. &lt;/p&gt;
&lt;p&gt;By a stroke of luck, I had done minimal preparation for the quiz and managed to go on stage. Playing the stage round wisely and steadily, I amazingly managed to win this round. This was the typical 'what the hell, I was not expecting this to happen' moment. We then had to travel to Delhi from 29th of November to the 3rd of December, which was right in the thick of our exams. After juggling the exams out of the way, we were on our way to Delhi!&lt;/p&gt;
&lt;p&gt;On reaching Delhi, a welcome dinner was hosted on the 29th. We then had a safety parliament shoot (read: TRP) on the 30th, when a panel of safety experts came on stage and we had to ask them questions on the state of safety in India. After a long night of preparation, we had our semifinals the following day. An aura of nervousness prevailed around all the participants as we got ready for the second semifinal, where we were pitted against the likes of winners and runner ups from Delhi, Jaipur, Bangalore and Calcutta. Ultimately, we managed to lose and dropped to last while the runner ups from Delhi managed to win.&lt;/p&gt;
&lt;p&gt;It was a case of history repeating itself, as Chettinad Vidyaashram from Chennai, the winners of last year's national finals, won again this time. DAV Chennai, last year's runner ups, came runner up again.&lt;/p&gt;
&lt;p&gt;If you have successfully survived my rambling about the quiz, this is a step by step guide on how I prepared: 
The first step is the web quiz. Make sure you get above 20 out of 25 in the quiz.
The top four people from each school participate in teams of two. Make sure you tie up with a person whom you are comfortable with. For good strategy, inform your expected teammate to prepare and do his best in the web round, so that the two of you are in the top four people.
The prelims of the regional finals are going to be the hardest questions in the entire journey. Prepare hard for the regional finals. The minute you qualify on stage, it is a cakewalk.
On stage, three out of four rounds are on 'pounce', that is, if another person gets an easy question, any team on stage can pounce and answer that question and will get +10 for a right and -7 for a wrong. The question remains open after you pounce, so all other teams can still answer the question. 
It is confidence that will carry you through the stage rounds. The questions on stage are comparatively very easy. Do not be afraid to pounce on each and every question on stage. Pounce hard and victory will be yours.
The national semifinals are a completely different game. Every question is on buzzer. There are 10 questions spread over 4 rounds. The rounds are arranged according to the table below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No.&lt;/th&gt;
&lt;th&gt;Num Questions&lt;/th&gt;
&lt;th&gt;Points per question&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;±10&lt;/td&gt;
&lt;td&gt;Single questions &lt;br&gt;1 normal question &lt;br&gt;2 anagram questions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;±20&lt;/td&gt;
&lt;td&gt;Double questions &lt;br&gt;2 picture based questions &lt;br&gt;1 true/false question&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;±50&lt;/td&gt;
&lt;td&gt;5 part questions &lt;br&gt;1 true/false question &lt;br&gt;1 word maze &lt;br&gt;1 spot the safety hazards question&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;*/2&lt;/td&gt;
&lt;td&gt;Make or break question: can double or halve all your points &lt;br&gt;5 part question &lt;br&gt;All 5 parts need to be correct to double &lt;br&gt;Question type: Match the symbols to their meanings&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Till now, nobody who has attempted a make or break question has won the quiz. Everyone gets four right and one wrong
The right strategy for the semifinal and final is to be quick on the buzzer and make minimal mistakes. Attempt the make or break question only if you are in dire conditions.&lt;/p&gt;
&lt;p&gt;A few important topics to prepare on are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fire extinguishers and their classes&lt;/li&gt;
&lt;li&gt;Personal Protective Equipment (PPE) and their types and classes&lt;/li&gt;
&lt;li&gt;Safety symbols (make or break question)&lt;/li&gt;
&lt;li&gt;Terms related to safety (word maze)&lt;/li&gt;
&lt;li&gt;Picture recognition (for safety hazards)&lt;/li&gt;
&lt;li&gt;Safety news (products banned for dangerous chemicals etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Best of luck for the quiz!&lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;</content><category term="Quizzing"></category></entry></feed>