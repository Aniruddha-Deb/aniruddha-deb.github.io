<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Aniruddha Deb</title><link>https://aniruddha-deb.github.io/</link><description></description><lastBuildDate>Mon, 13 Jul 2020 03:44:00 +0530</lastBuildDate><item><title>Testing</title><link>https://aniruddha-deb.github.io/articles/2020/subdir-test.html</link><description>&lt;p&gt;This is a scratchpad of sorts to test the capabilities of Pelican.&lt;/p&gt;
&lt;p&gt;Let's start with an Image:
&lt;img alt="Test Image" src="https://aniruddha-deb.github.io/articles/2020/res/test_post/big_buck_bunny.png"&gt;
Big buck bunny looking real handsome ;) Some tweaks have to be made to expand 
the image on click but this is ok for now..&lt;/p&gt;
&lt;p&gt;Let's try headings!&lt;/p&gt;
&lt;h1&gt;Echo&lt;/h1&gt;
&lt;h2&gt;Echo&lt;/h2&gt;
&lt;h3&gt;Echo&lt;/h3&gt;
&lt;h4&gt;Echo&lt;/h4&gt;
&lt;h5&gt;Echo&lt;/h5&gt;
&lt;h6&gt;Echo&lt;/h6&gt;
&lt;p&gt;looking good, although I will personally never use anything lower than H4 (if 
you're nesting these many headings, you should just go write a book).&lt;/p&gt;
&lt;p&gt;Lists looking fine as well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This&lt;/li&gt;
&lt;li&gt;is &lt;/li&gt;
&lt;li&gt;an &lt;/li&gt;
&lt;li&gt;unordered&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ordered list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Law&lt;/li&gt;
&lt;li&gt;And&lt;/li&gt;
&lt;li&gt;Order&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tables (top 10 chess players as of 19th July 2020):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Country&lt;/th&gt;
&lt;th&gt;Rating&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Magnus Carlsen&lt;/td&gt;
&lt;td&gt;NOR&lt;/td&gt;
&lt;td&gt;2863&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Fabiano Caruana&lt;/td&gt;
&lt;td&gt;USA&lt;/td&gt;
&lt;td&gt;2835&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Liren Ding&lt;/td&gt;
&lt;td&gt;CHN&lt;/td&gt;
&lt;td&gt;2791&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Ian Nepomniachtchi&lt;/td&gt;
&lt;td&gt;RUS&lt;/td&gt;
&lt;td&gt;2784&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Maxime Vachier-Lagrave&lt;/td&gt;
&lt;td&gt;FRA&lt;/td&gt;
&lt;td&gt;2778&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Alexander Grischuk&lt;/td&gt;
&lt;td&gt;RUS&lt;/td&gt;
&lt;td&gt;2777&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;Levon Aronian&lt;/td&gt;
&lt;td&gt;ARM&lt;/td&gt;
&lt;td&gt;2773&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Wesley So&lt;/td&gt;
&lt;td&gt;USA&lt;/td&gt;
&lt;td&gt;2770&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;Teimour Radjabov&lt;/td&gt;
&lt;td&gt;AZE&lt;/td&gt;
&lt;td&gt;2765&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Anish Giri&lt;/td&gt;
&lt;td&gt;NED&lt;/td&gt;
&lt;td&gt;2764&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Some MathJax, and a quote/hyperlink example (this is taken from 
&lt;a href="https://math.stackexchange.com/questions/3761395/will-t12-x-substitution-work-for-this-integral/3761410#3761410"&gt;Math SE&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;let $x = t^{12} \implies dx = 12t^{11} dt$
$$A = \int \left( \frac{1}{t^4+t^3} + \frac{\ln(1+t^2)}{t^4 + t^6} \right) 12t^{11}dt \ 
= \underbrace{\int \frac{12t^8}{t+1}dt}_{A_1} + \underbrace{\int \frac{\ln(1+t^2)}{1+t^2}12t^7dt}_{A_2} $$
$A_1$ can be written as:
$$A_1 = 12 \int \frac{x^8 - 1 + 1}{x+1} dx= 12 \int (x^4+1)(x^2+1)(x-1) + \frac{1}{x+1}dx$$
Which is doable. For $A_2$, make the substitution $1+t^2 = k \implies 2tdt = dk$
$$A_2 = 6 \int \frac{\ln(k)}{k}(k-1)^3dk$$
This can be integrated by parts as follows:
$$A_2 = 6\left( \ln(k) \cdot \left( \frac{k^3}{3} - \frac{3k^2}{2} + 3k - \ln(k)\right) + \int \frac 1k \cdot \left( \frac{k^3}{3} - \frac{3k^2}{2} + 3k - \ln(k)\right) dk\right)$$
$A_2$ is also now doable. Add $A_1$ and $A_2$ to get $A$ and substitute back till you get $A = f(x) + c$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's an example of some embedded HTML: (using the &lt;a href="chess.com"&gt;chess.com&lt;/a&gt; 
chess player to show one of my games)&lt;/p&gt;
&lt;iframe id="6878876" allowtransparency="true" frameborder="0" style="width:760px;height:480px;margin:auto;display:block;border:none;" src="//www.chess.com/emboard?id=6878876"&gt;&lt;/iframe&gt;

&lt;script type="text/javascript"&gt;window.addEventListener("message",e=&gt;{e['data']&amp;&amp;"6878876"===e['data']['id']&amp;&amp;document.getElementById(\`${e['data']['id']}\`)&amp;&amp;(document.getElementById(\`${e['data']['id']}\`).style.height=\`${e['data']['frameHeight']+60}px\`)});&lt;/script&gt;

&lt;p&gt;Here's some code to generate a minefield (Taken from the &lt;a href="https://github.com/Aniruddha-Deb/Mines/blob/master/src/com/sensei/mines/core/MinefieldGenerator.java"&gt;Mines&lt;/a&gt; repo):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRows&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCols&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numMines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prefs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMines&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;numMines&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;xLoc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;yLoc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;yDiff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;yLoc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;xDiff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;xLoc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;putable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yDiff&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xDiff&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buttons&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;yLoc&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;xLoc&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasMine&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;putable&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                 
            &lt;span class="n"&gt;buttons&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;yLoc&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;xLoc&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;buttons&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasMine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;padAround&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buttons&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Everything looks in place! Looking forward to writing some great content here.
Next post: How I migrated from Blogger to github-pages.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aniruddha Deb</dc:creator><pubDate>Mon, 13 Jul 2020 03:44:00 +0530</pubDate><guid isPermaLink="false">tag:aniruddha-deb.github.io,2020-07-13:/articles/2020/subdir-test.html</guid><category>Posts</category></item><item><title>Electronic Clock II - Generating the Clock Signal pt. 2</title><link>https://aniruddha-deb.github.io/articles/2018/electronic-clock-2-ii.html</link><description>&lt;p&gt;In the previous post, we saw how to make a 2Hz clock signal. However, for the seconds counter, we will need a 1Hz clock signal. In order to achieve this, I will clock down the frequency using a JK Flip Flop:&lt;/p&gt;
&lt;h3&gt;Flip-Flop: Concept&lt;/h3&gt;
&lt;p&gt;A Flip flop is a one-bit storage device which looks somewhat like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="flip flop" src="https://aniruddha-deb.github.io/articles/2018/res/flip_flop.png"&gt;&lt;/p&gt;
&lt;p&gt;The truth table of this device looks somewhat like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="truth table" src="https://aniruddha-deb.github.io/articles/2018/res/jk-flip-flop-truth-table.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Note that the flip flop toggles only on the rising edge of the clock. Therefore, in order to clock down the frequency by 2, we need to set the J and K bits high and feed the clock signal in to the CLK pin, thereby obtaining a 1Hz signal on the Q pin. &lt;/p&gt;
&lt;h3&gt;Adding the flip-flop to our circuit:&lt;/h3&gt;
&lt;p&gt;On adding the flip flop to our circuit, the schematic looks somewhat like this (The 4060 has been carried over from the previous post):&lt;/p&gt;
&lt;p&gt;&lt;img alt="1hz schematic" src="https://aniruddha-deb.github.io/articles/2018/res/1hz_schematic.png"&gt;&lt;/p&gt;
&lt;p&gt;As calculated, this gives us a frequency of 1 Hz on the Q pin&lt;/p&gt;
&lt;p&gt;&lt;img alt="oscilloscope output" src="https://aniruddha-deb.github.io/articles/2018/res/pic.png"&gt;&lt;/p&gt;
&lt;p&gt;This concludes our clock signal source. In the next post, we will have a look at counting seconds with the clock signal. &lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aniruddha Deb</dc:creator><pubDate>Sat, 16 Jun 2018 10:30:00 +0530</pubDate><guid isPermaLink="false">tag:aniruddha-deb.github.io,2018-06-16:/articles/2018/electronic-clock-2-ii.html</guid><category>Electronics</category></item><item><title>Electronic Clock II - Generating the Clock Signal pt.1</title><link>https://aniruddha-deb.github.io/articles/2018/electronic-clock-2-i.html</link><description>&lt;p&gt;In the previous installment of this series, I spoke about the requirements and the architecture of the clock. In this installment, I'm going to engineer the clock signal generator, the most crucial part of our clock&lt;/p&gt;
&lt;h3&gt;Importance of the Signal in a clock&lt;/h3&gt;
&lt;p&gt;Every clock is only as accurate as it's signal. An &lt;a href="https://en.wikipedia.org/wiki/Atomic_clock"&gt;atomic clock&lt;/a&gt; uses radiations emitted by cesium-133 as it's signal, a &lt;a href="https://en.wikipedia.org/wiki/Quartz_clock"&gt;quartz clock&lt;/a&gt; uses a 32768 Hz quartz crystal as it's signal whereas a mechanical clock uses an &lt;a href="https://en.wikipedia.org/wiki/Escapement"&gt;Escapement&lt;/a&gt; powered by a hairspring (in wristwatches) or by a pendulum (in clocks). The signal has a cascading effect on the accuracy of a clock - even a 0.1% divergence in the period of the second hand causes a clock to lose or gain 86.4 seconds a day, or in larger terms, lose or gain almost half a day in a year!&lt;/p&gt;
&lt;h3&gt;Make an accurate electronic signal&lt;/h3&gt;
&lt;p&gt;Our clock (like most other clocks) is going to use a quartz crystal as it's main signal. An &lt;a href="https://en.wikipedia.org/wiki/RC_oscillator"&gt;RC&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/LC_circuit"&gt;LC&lt;/a&gt; oscillator cannot be an accurate signal as the frequency will change with changes in temperature. Also, tuning an RC/LC oscillator to an exact frequency requires a ton of precision - the frequency has to be within a standard deviation of ±0.01%&lt;/p&gt;
&lt;p&gt;The signal generated by this crystal has a frequency of 32768 Hz, which isn't very useful to us. In order to use it to drive the seconds counter, we must scale it down to 1 Hz (1 pulse per second). In order to do this, I will use a HEF4060, which is a 14 bit binary ripple counter.&lt;/p&gt;
&lt;p&gt;The HEF4060 has the capacity to give us a minimum frequency of 32768/214 = 2 Hz. This will later be scaled down using a flip-flop to give us a frequency of 1 Hz. The circuit for this looks like the following:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Clock circuit" src="https://aniruddha-deb.github.io/articles/2018/res/clock_signal_schematic.png"&gt;&lt;/p&gt;
&lt;p&gt;After testing the above circuit on a breadboard, pin 7 (Q4) gave the following results on an oscilloscope:&lt;/p&gt;
&lt;p&gt;&lt;img alt="oscilloscope" src="https://aniruddha-deb.github.io/articles/2018/res/pic_44_3.bmp"&gt;&lt;/p&gt;
&lt;p&gt;These results were expected as 32768/16 gives us 2048, which is approximately 2.049 kHz. the extra 1 Hz is probably a result of breadboard capacitance, which should go away once the circuit is soldered on a PCB. &lt;/p&gt;
&lt;p&gt;In the next installment, I will use a flip flop to halve the 2Hz signal to give us a resultant signal of 1Hz, which can be used to drive the seconds counter.&lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aniruddha Deb</dc:creator><pubDate>Thu, 14 Jun 2018 22:30:00 +0530</pubDate><guid isPermaLink="false">tag:aniruddha-deb.github.io,2018-06-14:/articles/2018/electronic-clock-2-i.html</guid><category>Electronics</category></item><item><title>Electronic Clock I - Getting Started</title><link>https://aniruddha-deb.github.io/articles/2018/electronic-clock-1.html</link><description>&lt;p&gt;This is a new series in which I will describe all the steps I went through while creating an electronic clock. Make sure you're subscribed to the RSS feed so that you don't miss out on anything!&lt;/p&gt;
&lt;h3&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;An electronic clock is a good project for intermediate to advanced electronic hobbyists, which is why I decided to build one.&lt;/p&gt;
&lt;p&gt;The first task is enumerating the requirements of the clock. A humble requirement list looks like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clock should run on a few AA cells&lt;/li&gt;
&lt;li&gt;It should have a 24 hour display&lt;/li&gt;
&lt;li&gt;It should display seconds, minutes and hours&lt;/li&gt;
&lt;li&gt;It should have two LED's each to separate the hours, minutes and seconds&lt;/li&gt;
&lt;li&gt;It should be moderately compact&lt;/li&gt;
&lt;li&gt;It should be challenging to engineer and design&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second task is deciding what components will form the base of the clock (akin to choosing a language or a technology stack for developing an application). For a clock, a few options are available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a microcontroller:&lt;/li&gt;
&lt;li&gt;Interface a DS1307 clock module with the microcontroller using SPI, or&lt;/li&gt;
&lt;li&gt;Write your own code for a real-time clock in the microcontroller and use an external clock crystal (already done this here)&lt;/li&gt;
&lt;li&gt;Use CMOS/TTL Logic IC's&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I decided to go with the second option as I had already written code for a microcontroller clock and gone halfway through the implementation when I realized that it was too easy and did not provide a challenge. If you are a beginner, you should take the microcontroller route, as in case of bugs, they are easily rectifiable via your code, whereas debugging a hardware circuit (especially a large CMOS/TTL one) is decently hard for beginners.&lt;/p&gt;
&lt;p&gt;Within a few minutes, I drew a basic block diagram for the main components in the circuit.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://aniruddha-deb.github.io/articles/2018/res/disp.png"&gt;&lt;/p&gt;
&lt;p&gt;The circuit mainly consists of a 1Hz signal generator, a few counters/dividers and the display logic. &lt;/p&gt;
&lt;p&gt;In the next segment, I'm going to build the signal generator and produce an accurate 2Hz signal that can be used by the other counters.&lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aniruddha Deb</dc:creator><pubDate>Thu, 14 Jun 2018 10:30:00 +0530</pubDate><guid isPermaLink="false">tag:aniruddha-deb.github.io,2018-06-14:/articles/2018/electronic-clock-1.html</guid><category>Electronics</category></item><item><title>Cleared OCAJP with 94% - My Experience</title><link>https://aniruddha-deb.github.io/articles/2018/ocajp.html</link><description>&lt;p&gt;This was originally posted on &lt;a href="https://coderanch.com/t/695020/certification/Cleared-OCAJP-Experience"&gt;CodeRanch&lt;/a&gt;:&lt;/p&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;I'm a 15 year old student who has just cleared his secondary education. I have a knack for computers and am currently building my online profile (&lt;a href="https://github.com/Aniruddha-Deb"&gt;github&lt;/a&gt;, &lt;a href="aniruddha-deb.github.io"&gt;blog&lt;/a&gt;, etc.) I already had ~2 years of experience in java and had been eyeing the Oracle certification for quite some time. Eventually, in the summer vacations, I decided to go all in, bought a few books and sat down and studied for the exam. &lt;/p&gt;
&lt;h3&gt;Process&lt;/h3&gt;
&lt;p&gt;The books that I used for the certification were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OCA Java SE 8 Programmer I - Mala Gupta&lt;/li&gt;
&lt;li&gt;OCA/OCP Java 8 practice tests - Selikoff and Boyarsky&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I spent around 3 weeks studying for the exam with an average time of ~1.5 hours per day. I would go through the chapters and topics in Mala Gupta and do the respective questions for those topics from the practice tests book. I also wrote a lot of practice programs to wrap my head around some new concepts (Java 8 Date/Time API for instance). Most of the content was easy as I had already studied it in school and had prior programming experience. Personally for me, the hard parts were the new Java 8 features and interfaces in Java 8 (this may vary from person to person). My advice would be to spend extra time on the harder parts and comparatively less time on the easier parts (looping and decisions was easy - I went through those in a day each). &lt;/p&gt;
&lt;p&gt;Most of my practice programs were written in Eclipse (even though most books ask you to NOT do this). I found eclipse's autocompilation features handy for spotting errors. I then got a chance to tweak the code to see if the error reappears in real time, something that iterative compilation will never be able to do. That did help me learn faster. (again, my methods may not necessarily resonate with someone else's) &lt;/p&gt;
&lt;h3&gt;Before giving the exam&lt;/h3&gt;
&lt;p&gt;Once I had finished the syllabus, I went through the two practice tests that I had - one from Mala Gupta and one from Selikoff and Boyarsky. I scored 85-86% on both tests. I also gave the free enthuware test containing 25 questions and scored 80% in that. I did not pay for the full enthuware mock test set as I felt pretty comfortable with my performance. &lt;/p&gt;
&lt;h3&gt;Giving the exam&lt;/h3&gt;
&lt;p&gt;There was a pearson VUE Centre right next to where I live (less than a kilometre away), which simplified travel quite a bit. Time management is not a problem in this exam. I repeat that - time management is NOT a problem. I finished all the questions in around one hour and 15 minutes and spent the rest of the time checking the answers. You will not be hard pressed for time in this exam, so take your time and think through every question calmly and carefully. Do not submit before time. &lt;/p&gt;
&lt;h3&gt;After the exam&lt;/h3&gt;
&lt;p&gt;Amazingly, I did not get my results in 30 minutes. It took close to one and a half hours for my results to come, and around one and a half days for my certificate to be generated. This is something oracle can definetly work on. &lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;If you're a young guy (like me) reading this, my advice would be to give this exam only if you are confident of your capabilities in Java and are passionate about a future in computers. You will also spend a significant amount of your vacation time in studying for this exam. in addition to being slightly tricky, this exam is also expensive and will have to be funded by your parents. Also, there are no short term benefits to clearing this exam: the benefits will only show 10 years later when you turn up for a job interview and proudly proclaim you cleared the OCA at the age of 15. If you're okay with the above, then best of luck for the exam! &lt;/p&gt;
&lt;p&gt;p.s: all the code that I wrote for the exam is available &lt;a href="https://github.com/Aniruddha-Deb/OCAPrep"&gt;here&lt;/a&gt;. May come in handy to other aspirants. &lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aniruddha Deb</dc:creator><pubDate>Wed, 06 Jun 2018 22:05:00 +0530</pubDate><guid isPermaLink="false">tag:aniruddha-deb.github.io,2018-06-06:/articles/2018/ocajp.html</guid><category>Programming</category></item><item><title>ICSE Mathematics - Last 23 years analysis and 2018 forecast</title><link>https://aniruddha-deb.github.io/articles/2018/icse-mathematics-analysis.html</link><description>&lt;p&gt;&lt;img alt="Analysis results" src="https://aniruddha-deb.github.io/articles/2018/res/icse_math_analysis.png"&gt;&lt;/p&gt;
&lt;p&gt;A speculative format for the 2018 ICSE Mathematics paper, created by analysis of the mathematics question papers of the past 23 years. The boards are fast approaching and hope this helps out those in need.&lt;/p&gt;
&lt;p&gt;Best of luck for the exams!&lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;
&lt;p&gt;EDIT: As of 16th June, 2018, I cleared the 2018 ICSE Mathematics paper with a perfect 100. The above statistical analysis truly paid off as most of the questions followed the same pattern :D&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aniruddha Deb</dc:creator><pubDate>Tue, 09 Jan 2018 10:30:00 +0530</pubDate><guid isPermaLink="false">tag:aniruddha-deb.github.io,2018-01-09:/articles/2018/icse-mathematics-analysis.html</guid><category>Mathematics</category></item><item><title>Python Crash Course</title><link>https://aniruddha-deb.github.io/articles/2017/python-crash-course.html</link><description>&lt;p&gt;Recently, I felt the need of creating a to-do app based on the getting things done principle (link here). I had been using MyLifeOrganized in a virtual machine on my mac, but it just wasn't cutting it. Things 3 and OmniFocus for Mac were too pricey and other web-based todo apps like Trello and Todoist didn't suit me very much. As a result, I decided to jump into some code and create a custom to-do mac app.&lt;/p&gt;
&lt;p&gt;My basic requirements were very humble: I need a task list in which I can create, read, update and delete tasks easily. I eventually decided to go with a unix-like command line application. Unix apps are usually made in C or Shell Script. My C is pathetic at the very least and I find shell script to be.. Queer. Java was too heavyweight a language to code a simple shell utility in, so I chose to go with Python.&lt;/p&gt;
&lt;p&gt;I had minimal experience with python in the past. I barely knew the basic language constructs and features. Luckily, python has a very shallow learning curve. About two hours with google and my python concepts were acceptable enough to start coding. Initially, python felt very much like shell script, just slightly more verbose. The lack of semicolons in python still irritates a Java programmer like me and the absence of braces makes the code feel very different compared to Java. After a few days of coding, these features started to grow on me. &lt;/p&gt;
&lt;p&gt;The first draft of GTD.py was a disaster. I used a text file to store all the application data and there was a ton of File I/O involved. Combine that with me using the google python fire library like an amateur and things quickly went downhill. Every time the code ran, it threw a horrendous looking python exception at my face (coming from java, python exceptions are much more beautiful compared to terrible.java.Stack.traces). Python looked like a terrible choice of language, as I could have a similar Java program up and running in about 10 minutes.&lt;/p&gt;
&lt;p&gt;Eventually, though, my comfort with the language grew. I ditched the text based approach and decided to use an SQLite database to store the information. I also discarded python fire and chose to use argparse. These two libraries gave me a decent challenge to build the app.&lt;/p&gt;
&lt;p&gt;The second draft came out much better than the first. The program is now usable (still needs a little refactoring). At the time of writing, I am still getting used to python programming conventions (reserved_chars as opposed to reservedChars) and the strange looking import statements. The language is still much less verbose as compared to Java and with enough practice, I may end up being more productive in Python. There's still a long way to go - I barely know the standard libraries and the functions. I also need to get to know the python runtime well enough before I start coding serious application critical components in python. The initial impression of python as a language for me was decently good. Would be interesting to see where I stand in about two to three months with the language.&lt;/p&gt;
&lt;p&gt;Check out the GTD.py code &lt;a href="https://github.com/Aniruddha-Deb/GTD.py"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Good luck to all those starting their python journey!&lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aniruddha Deb</dc:creator><pubDate>Fri, 22 Dec 2017 10:30:00 +0530</pubDate><guid isPermaLink="false">tag:aniruddha-deb.github.io,2017-12-22:/articles/2017/python-crash-course.html</guid><category>Programming</category></item><item><title>TCS IT Wiz - an Experience</title><link>https://aniruddha-deb.github.io/articles/2017/tcsitwiz-experience.html</link><description>&lt;p&gt;Anyone who is in college or in high school and is interested in quizzing will know about the TCS IT Wiz (website: &lt;a href="www.tcsitwiz.com"&gt;www.tcsitwiz.com&lt;/a&gt;) - one of the most prestigious high school quizzes, sponsored by Tata Consultancy Services and hosted by Greycaps CEO Giri 'Pickbrain' Balasubramaniam.&lt;/p&gt;
&lt;p&gt;I got my first taste of this quiz when I was in eighth standard. I sheepishly went up to the head of department of computers and said that I was interested in participating in the TCS IT Wiz. After an announcement in class about the quiz, all the scholars in the class soon followed suit. Looking back, I barely knew anything about IT then. Around 30 of us were put in a bus and taken to the venue, where we managed to get a balcony seat. I couldn't answer more than 8 questions correctly. It was a complete disaster&lt;/p&gt;
&lt;p&gt;Fast forward a year, and I was ready to tackle the quiz head-on another time. However, a science exhibition was held on the same day as that of the quiz, and I chose (and won) the science exhibition. Fast forward another year, and I am now Pune champion. How time flies!&lt;/p&gt;
&lt;p&gt;This year, I was well aware of the quiz and did a moderate amount of preparation before the regionals. TCS uploads the regional finals of every city, so going through them and getting a feel of the questions and the rounds is essential. Preparation time also needs to be devoted to TCS itself - There is a round dedicated completely to it. Going over their website (thoroughly) and their wikipedia page should be adequate for the regionals.&lt;/p&gt;
&lt;p&gt;We were among the first to reach the venue and were seated pretty far ahead. This time, when Pickbrain came on stage in his usual kurta, I was well prepared. With a score of 12 in the prelims, I successfully managed to get on stage along with my teammate, Rasesh. Well acquainted with the format of the quiz, we played along well and managed to top the quiz with a score of 40. UWC Mahindra college were runners up, with a score of 35. &lt;/p&gt;
&lt;p&gt;Right after the quiz was over, the very next day, we drew up a schedule of preparation. Going over last year's regional finals was top priority, followed by researching about companies and new technology trends. Close observation of our competitors was also on the back of our minds as we continued researching.&lt;/p&gt;
&lt;p&gt;The quiz finals are held on 10th December every year, at Taj Lands End in Mumbai. This was the first time I was in a TCS National final, up against stiff competition from last time's winners. Due to hasty decisions, we were knocked out of the quiz during the semifinal stage, getting a +1 and then a -1, bringing our score to 0. Delhi and Ahmedabad got 4 or 5 and Kochi got 1. The finals were a close contested battle between Delhi and Ahmedabad up till the fifth round. In the fifth round, Delhi built up an unassailable 30 point lead and went on to win the quiz again, with a score of 80 to Ahmedabad's 40. &lt;/p&gt;
&lt;p&gt;Tata Consultancy Services are very generous with prizes. All national finalists got 35,000 rupees in Amazon gift vouchers, whereas the runner up got 1,00,000 and the winners received 1,50,000. Even though I lost, the experience in Mumbai will be unforgettable. Hope to come back next year and give Pranav from DPS Noida some stiff competition!&lt;/p&gt;
&lt;p&gt;Watch the 2017 national finals &lt;a href="https://www.youtube.com/watch?v=3VsvX1Ateys"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Best of luck for next year's quiz!&lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aniruddha Deb</dc:creator><pubDate>Thu, 14 Dec 2017 10:30:00 +0530</pubDate><guid isPermaLink="false">tag:aniruddha-deb.github.io,2017-12-14:/articles/2017/tcsitwiz-experience.html</guid><category>Quizzing</category></item><item><title>National Safety Science Quiz - an Experience</title><link>https://aniruddha-deb.github.io/articles/2017/nssq-experience.html</link><description>&lt;p&gt;'Safety science' is a novel term. Googling it up reveals a few obscure links. It doesn't even have a Wikipedia page of it's own! Safety science is a new term that refers to the science of keeping oneself safe from dangers at home, at work, on the streets and so on. This concept of safety science is spearheaded in India by Underwriters Laboratories (&lt;em&gt;whispers&lt;/em&gt; marketing) in association with NDTV (&lt;em&gt;whispers&lt;/em&gt; TRP.).&lt;/p&gt;
&lt;p&gt;I got the first taste of this quiz last year, when I was in ninth grade. It was the first 'web quiz' of sorts that I had given (p.s.: cheating is very easy, only that I realized it after my quiz was over). &lt;/p&gt;
&lt;p&gt;I did not qualify from the school (top 2 qualify for regional finals) and ultimately stayed back. This year though, I somehow managed to top the school and got 24 out of 25. &lt;/p&gt;
&lt;p&gt;By a stroke of luck, I had done minimal preparation for the quiz and managed to go on stage. Playing the stage round wisely and steadily, I amazingly managed to win this round. This was the typical 'what the hell, I was not expecting this to happen' moment. We then had to travel to Delhi from 29th of November to the 3rd of December, which was right in the thick of our exams. After juggling the exams out of the way, we were on our way to Delhi!&lt;/p&gt;
&lt;p&gt;On reaching Delhi, a welcome dinner was hosted on the 29th. We then had a safety parliament shoot (read: TRP) on the 30th, when a panel of safety experts came on stage and we had to ask them questions on the state of safety in India(more on this in a later blog). After a long night of preparation, we had our semifinals the following day. An aura of nervousness prevailed around all the participants as we got ready for the second semifinal, where we were pitted against the likes of winners and runner ups from Delhi, Jaipur, Bangalore and Calcutta. Ultimately, we managed to lose and dropped to last while the runner ups from Delhi managed to win.&lt;/p&gt;
&lt;p&gt;It was a case of history repeating itself, as Chettinad Vidyaashram from Chennai, the winners of last year's national finals, won again this time. DAV Chennai, last year's runner ups, came runner up again.&lt;/p&gt;
&lt;p&gt;If you have successfully survived my drunk rambling about the quiz, this is a step by step guide on how I prepared: 
The first step is the web quiz. If you really want it that bad, just open up a new tab and google the questions in the quiz. Make sure you get above 20 out of 25 in the quiz.
The top four people from each school participate in teams of two. Make sure you tie up with a person whom you are comfortable with. For good strategy, inform your expected teammate to prepare and do his best in the web round, so that the two of you are in the top four people.
The prelims of the regional finals are going to be the hardest questions in the entire journey. Prepare hard for the regional finals. The minute you qualify on stage, it is a cakewalk.
On stage, three out of four rounds are on 'pounce', that is, if another person gets an easy question, any team on stage can pounce and answer that question and will get +10 for a right and -7 for a wrong. The question remains open after you pounce, so all other teams can still answer the question. 
It is confidence that will carry you through the stage rounds. The questions on stage are comparatively very easy. Do not be afraid to pounce on each and every question on stage. Pounce hard and victory will be yours.
The national semifinals are a completely different game. Every question is on buzzer. There are 10 questions spread over 4 rounds. The rounds are arranged according to the table below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No.&lt;/th&gt;
&lt;th&gt;Num Questions&lt;/th&gt;
&lt;th&gt;Points per question&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;±10&lt;/td&gt;
&lt;td&gt;Single questions &lt;br&gt;1 normal question &lt;br&gt;2 anagram questions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;±20&lt;/td&gt;
&lt;td&gt;Double questions &lt;br&gt;2 picture based questions &lt;br&gt;1 true/false question&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;±50&lt;/td&gt;
&lt;td&gt;5 part questions &lt;br&gt;1 true/false question &lt;br&gt;1 word maze &lt;br&gt;1 spot the safety hazards question&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;*/2&lt;/td&gt;
&lt;td&gt;Make or break question: can double or halve all your points &lt;br&gt;5 part question &lt;br&gt;All 5 parts need to be correct to double &lt;br&gt;Question type: Match the symbols to their meanings&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Till now, nobody who has attempted a make or break question has won the quiz. Everyone gets four right and one wrong
The right strategy for the semifinal and final is to be quick on the buzzer and make minimal mistakes. Attempt the make or break question only if you are in dire conditions.&lt;/p&gt;
&lt;p&gt;A few important topics to prepare on are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fire extinguishers and their classes&lt;/li&gt;
&lt;li&gt;Personal Protective Equipment (PPE) and their types and classes&lt;/li&gt;
&lt;li&gt;Safety symbols (make or break question)&lt;/li&gt;
&lt;li&gt;Terms related to safety (word maze)&lt;/li&gt;
&lt;li&gt;Picture recognition (for safety hazards)&lt;/li&gt;
&lt;li&gt;Safety news (products banned for dangerous chemicals etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Best of luck for the quiz!&lt;/p&gt;
&lt;p&gt;- Deb&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aniruddha Deb</dc:creator><pubDate>Sat, 09 Dec 2017 10:30:00 +0530</pubDate><guid isPermaLink="false">tag:aniruddha-deb.github.io,2017-12-09:/articles/2017/nssq-experience.html</guid><category>Quizzing</category></item></channel></rss>